Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    WS

Grammar

Rule 0     S' -> ProgramaInit
Rule 1     ProgramaInit -> Programa ENDMARKER
Rule 2     Programa -> Corpo
Rule 3     Programa -> Decls Corpo
Rule 4     Corpo -> Proc Newline
Rule 5     Corpo -> Corpo Proc Newline
Rule 6     Corpo -> Newline
Rule 7     Empty -> <empty>
Rule 8     Newline -> NEWLINE
Rule 9     Newline -> Empty
Rule 10    Dedent -> Dedent DEDENT
Rule 11    Dedent -> Empty
Rule 12    Decls -> Decl Newline
Rule 13    Decls -> Decls Decl Newline
Rule 14    Decl -> INTDec ID
Rule 15    Decl -> INTDec ID ATRIB NUM
Rule 16    Decl -> INTDec ID ATRIB Input
Rule 17    Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues
Rule 18    Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET
Rule 19    Decl -> Def
Rule 20    Def -> DEF ID COLON Newline INDENT Corpo DEDENT
Rule 21    Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT
Rule 22    ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET
Rule 23    ArrayIntValues -> ArrayIntValues , Expr
Rule 24    ArrayIntValues -> Expr
Rule 25    Proc -> Atrib
Rule 26    Proc -> Print
Rule 27    Proc -> If
Rule 28    Proc -> Cycle
Rule 29    Proc -> Call
Rule 30    Proc -> Assert
Rule 31    Call -> CALL
Rule 32    Assert -> ASSERT LCPARENT Cond RCPARENT
Rule 33    If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
Rule 34    If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
Rule 35    Cycle -> While
Rule 36    Cycle -> DoWhile
Rule 37    DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
Rule 38    While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
Rule 39    Cond -> Expr GT Expr
Rule 40    Cond -> Expr LT Expr
Rule 41    Cond -> Expr GEQ Expr
Rule 42    Cond -> Expr LEQ Expr
Rule 43    Cond -> Expr EQUIV Expr
Rule 44    Cond -> Expr NEQ Expr
Rule 45    Cond -> Expr OR Expr
Rule 46    Cond -> Expr AND Expr
Rule 47    Cond -> NOT Cond
Rule 48    Atrib -> ID ATRIB Expr
Rule 49    Atrib -> ID ATRIB Input
Rule 50    Atrib -> ID INC
Rule 51    Atrib -> ID DEC
Rule 52    Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
Rule 53    Print -> NonFormatted
Rule 54    NonFormatted -> PRINT LCPARENT Argument RCPARENT
Rule 55    Argument -> String
Rule 56    Argument -> Expr
Rule 57    Expr -> Var
Rule 58    Expr -> ExprIncDec
Rule 59    Expr -> NUM
Rule 60    Expr -> Expr SUM Expr
Rule 61    Expr -> Expr SUB Expr
Rule 62    Expr -> Expr MULT Expr
Rule 63    Expr -> Expr DIV Expr
Rule 64    Expr -> Expr MOD Expr
Rule 65    ExprIncDec -> ID INC
Rule 66    ExprIncDec -> ID DEC
Rule 67    Var -> ID
Rule 68    Var -> ID LSQBRACKET Expr RSQBRACKET
Rule 69    Input -> INPUT LCPARENT String RCPARENT
Rule 70    String -> QUOTE STRING QUOTE
Rule 71    String -> Empty

Terminals, with rules where they appear

,                    : 23
AND                  : 46
ASSERT               : 32
ATRIB                : 15 16 17 48 49 52
CALL                 : 31
COLON                : 20 21 33 34 34 37 38
DEC                  : 51 66
DEDENT               : 10 20 21 34
DEF                  : 20 21
DIV                  : 63
DO                   : 37
ELSE                 : 34
ENDMARKER            : 1
EQUIV                : 43
GEQ                  : 41
GT                   : 39
ID                   : 14 15 16 17 18 20 21 48 49 50 51 52 65 66 67 68
IF                   : 33 34
INC                  : 50 65
INDENT               : 20 21 33 34 34 37 38
INPUT                : 69
INTDec               : 14 15 16 17 18
LCPARENT             : 32 33 34 37 38 54 69
LCURLBRACKET         : 22
LEQ                  : 42
LSQBRACKET           : 17 18 52 68
LT                   : 40
MOD                  : 64
MULT                 : 62
NEQ                  : 44
NEWLINE              : 8 37
NOT                  : 47
NUM                  : 15 17 18 59
OR                   : 45
PRINT                : 54
QUOTE                : 70 70
RCPARENT             : 32 33 34 37 38 54 69
RCURLBRACKET         : 22
RSQBRACKET           : 17 18 52 68
STRING               : 70
SUB                  : 61
SUM                  : 60
WHILE                : 37 38
WS                   : 
error                : 

Nonterminals, with rules where they appear

Argument             : 54
ArrayIntValues       : 22 23
ArrayValues          : 17
Assert               : 30
Atrib                : 25
Call                 : 29
Cond                 : 32 33 34 37 38 47
Corpo                : 2 3 5 20 21 33 34 34 37 38
Cycle                : 28
Decl                 : 12 13
Decls                : 3 13 21
Dedent               : 10 33 34 37 38
Def                  : 19
DoWhile              : 36
Empty                : 9 11 71
Expr                 : 23 24 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 48 52 52 56 60 60 61 61 62 62 63 63 64 64 68
ExprIncDec           : 58
If                   : 27
Input                : 16 49
Newline              : 4 5 6 12 13 20 21 33 34 34 37 38
NonFormatted         : 53
Print                : 26
Proc                 : 4 5
Programa             : 1
ProgramaInit         : 0
String               : 55 69
Var                  : 57
While                : 35

Parsing method: LALR

state 0

    (0) S' -> . ProgramaInit
    (1) ProgramaInit -> . Programa ENDMARKER
    (2) Programa -> . Corpo
    (3) Programa -> . Decls Corpo
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (12) Decls -> . Decl Newline
    (13) Decls -> . Decls Decl Newline
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (14) Decl -> . INTDec ID
    (15) Decl -> . INTDec ID ATRIB NUM
    (16) Decl -> . INTDec ID ATRIB Input
    (17) Decl -> . INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues
    (18) Decl -> . INTDec ID LSQBRACKET NUM RSQBRACKET
    (19) Decl -> . Def
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (7) Empty -> .
    (20) Def -> . DEF ID COLON Newline INDENT Corpo DEDENT
    (21) Def -> . DEF ID COLON Newline INDENT Decls Corpo DEDENT
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    NEWLINE         shift and go to state 14
    INTDec          shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    ENDMARKER       reduce using rule 7 (Empty -> .)
    DEF             shift and go to state 25
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

  ! ID              [ reduce using rule 7 (Empty -> .) ]
  ! IF              [ reduce using rule 7 (Empty -> .) ]
  ! CALL            [ reduce using rule 7 (Empty -> .) ]
  ! ASSERT          [ reduce using rule 7 (Empty -> .) ]
  ! PRINT           [ reduce using rule 7 (Empty -> .) ]
  ! WHILE           [ reduce using rule 7 (Empty -> .) ]
  ! DO              [ reduce using rule 7 (Empty -> .) ]

    ProgramaInit                   shift and go to state 1
    Programa                       shift and go to state 2
    Corpo                          shift and go to state 3
    Decls                          shift and go to state 4
    Proc                           shift and go to state 5
    Newline                        shift and go to state 6
    Decl                           shift and go to state 7
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    Empty                          shift and go to state 15
    Def                            shift and go to state 18
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 1

    (0) S' -> ProgramaInit .



state 2

    (1) ProgramaInit -> Programa . ENDMARKER

    ENDMARKER       shift and go to state 29


state 3

    (2) Programa -> Corpo .
    (5) Corpo -> Corpo . Proc Newline
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

    ENDMARKER       reduce using rule 2 (Programa -> Corpo .)
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

    Proc                           shift and go to state 30
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 4

    (3) Programa -> Decls . Corpo
    (13) Decls -> Decls . Decl Newline
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (14) Decl -> . INTDec ID
    (15) Decl -> . INTDec ID ATRIB NUM
    (16) Decl -> . INTDec ID ATRIB Input
    (17) Decl -> . INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues
    (18) Decl -> . INTDec ID LSQBRACKET NUM RSQBRACKET
    (19) Decl -> . Def
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (20) Def -> . DEF ID COLON Newline INDENT Corpo DEDENT
    (21) Def -> . DEF ID COLON Newline INDENT Decls Corpo DEDENT
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (7) Empty -> .
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    INTDec          shift and go to state 16
    NEWLINE         shift and go to state 14
    DEF             shift and go to state 25
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    ENDMARKER       reduce using rule 7 (Empty -> .)
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

  ! ID              [ reduce using rule 7 (Empty -> .) ]
  ! IF              [ reduce using rule 7 (Empty -> .) ]
  ! CALL            [ reduce using rule 7 (Empty -> .) ]
  ! ASSERT          [ reduce using rule 7 (Empty -> .) ]
  ! PRINT           [ reduce using rule 7 (Empty -> .) ]
  ! WHILE           [ reduce using rule 7 (Empty -> .) ]
  ! DO              [ reduce using rule 7 (Empty -> .) ]

    Corpo                          shift and go to state 31
    Decl                           shift and go to state 32
    Newline                        shift and go to state 6
    Proc                           shift and go to state 5
    Def                            shift and go to state 18
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    Empty                          shift and go to state 15
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 5

    (4) Corpo -> Proc . Newline
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (7) Empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 14
    ID              reduce using rule 7 (Empty -> .)
    IF              reduce using rule 7 (Empty -> .)
    CALL            reduce using rule 7 (Empty -> .)
    ASSERT          reduce using rule 7 (Empty -> .)
    PRINT           reduce using rule 7 (Empty -> .)
    WHILE           reduce using rule 7 (Empty -> .)
    DO              reduce using rule 7 (Empty -> .)
    ENDMARKER       reduce using rule 7 (Empty -> .)
    DEDENT          reduce using rule 7 (Empty -> .)
    ELSE            reduce using rule 7 (Empty -> .)

  ! NEWLINE         [ reduce using rule 7 (Empty -> .) ]

    Newline                        shift and go to state 33
    Empty                          shift and go to state 15

state 6

    (6) Corpo -> Newline .

    ID              reduce using rule 6 (Corpo -> Newline .)
    IF              reduce using rule 6 (Corpo -> Newline .)
    CALL            reduce using rule 6 (Corpo -> Newline .)
    ASSERT          reduce using rule 6 (Corpo -> Newline .)
    PRINT           reduce using rule 6 (Corpo -> Newline .)
    WHILE           reduce using rule 6 (Corpo -> Newline .)
    DO              reduce using rule 6 (Corpo -> Newline .)
    ENDMARKER       reduce using rule 6 (Corpo -> Newline .)
    DEDENT          reduce using rule 6 (Corpo -> Newline .)
    ELSE            reduce using rule 6 (Corpo -> Newline .)
    NEWLINE         reduce using rule 6 (Corpo -> Newline .)


state 7

    (12) Decls -> Decl . Newline
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (7) Empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 14
    INTDec          reduce using rule 7 (Empty -> .)
    DEF             reduce using rule 7 (Empty -> .)
    ID              reduce using rule 7 (Empty -> .)
    IF              reduce using rule 7 (Empty -> .)
    CALL            reduce using rule 7 (Empty -> .)
    ASSERT          reduce using rule 7 (Empty -> .)
    PRINT           reduce using rule 7 (Empty -> .)
    WHILE           reduce using rule 7 (Empty -> .)
    DO              reduce using rule 7 (Empty -> .)
    ENDMARKER       reduce using rule 7 (Empty -> .)
    DEDENT          reduce using rule 7 (Empty -> .)

  ! NEWLINE         [ reduce using rule 7 (Empty -> .) ]

    Newline                        shift and go to state 34
    Empty                          shift and go to state 15

state 8

    (25) Proc -> Atrib .

    NEWLINE         reduce using rule 25 (Proc -> Atrib .)
    ID              reduce using rule 25 (Proc -> Atrib .)
    IF              reduce using rule 25 (Proc -> Atrib .)
    CALL            reduce using rule 25 (Proc -> Atrib .)
    ASSERT          reduce using rule 25 (Proc -> Atrib .)
    PRINT           reduce using rule 25 (Proc -> Atrib .)
    WHILE           reduce using rule 25 (Proc -> Atrib .)
    DO              reduce using rule 25 (Proc -> Atrib .)
    ENDMARKER       reduce using rule 25 (Proc -> Atrib .)
    DEDENT          reduce using rule 25 (Proc -> Atrib .)
    ELSE            reduce using rule 25 (Proc -> Atrib .)


state 9

    (26) Proc -> Print .

    NEWLINE         reduce using rule 26 (Proc -> Print .)
    ID              reduce using rule 26 (Proc -> Print .)
    IF              reduce using rule 26 (Proc -> Print .)
    CALL            reduce using rule 26 (Proc -> Print .)
    ASSERT          reduce using rule 26 (Proc -> Print .)
    PRINT           reduce using rule 26 (Proc -> Print .)
    WHILE           reduce using rule 26 (Proc -> Print .)
    DO              reduce using rule 26 (Proc -> Print .)
    ENDMARKER       reduce using rule 26 (Proc -> Print .)
    DEDENT          reduce using rule 26 (Proc -> Print .)
    ELSE            reduce using rule 26 (Proc -> Print .)


state 10

    (27) Proc -> If .

    NEWLINE         reduce using rule 27 (Proc -> If .)
    ID              reduce using rule 27 (Proc -> If .)
    IF              reduce using rule 27 (Proc -> If .)
    CALL            reduce using rule 27 (Proc -> If .)
    ASSERT          reduce using rule 27 (Proc -> If .)
    PRINT           reduce using rule 27 (Proc -> If .)
    WHILE           reduce using rule 27 (Proc -> If .)
    DO              reduce using rule 27 (Proc -> If .)
    ENDMARKER       reduce using rule 27 (Proc -> If .)
    DEDENT          reduce using rule 27 (Proc -> If .)
    ELSE            reduce using rule 27 (Proc -> If .)


state 11

    (28) Proc -> Cycle .

    NEWLINE         reduce using rule 28 (Proc -> Cycle .)
    ID              reduce using rule 28 (Proc -> Cycle .)
    IF              reduce using rule 28 (Proc -> Cycle .)
    CALL            reduce using rule 28 (Proc -> Cycle .)
    ASSERT          reduce using rule 28 (Proc -> Cycle .)
    PRINT           reduce using rule 28 (Proc -> Cycle .)
    WHILE           reduce using rule 28 (Proc -> Cycle .)
    DO              reduce using rule 28 (Proc -> Cycle .)
    ENDMARKER       reduce using rule 28 (Proc -> Cycle .)
    DEDENT          reduce using rule 28 (Proc -> Cycle .)
    ELSE            reduce using rule 28 (Proc -> Cycle .)


state 12

    (29) Proc -> Call .

    NEWLINE         reduce using rule 29 (Proc -> Call .)
    ID              reduce using rule 29 (Proc -> Call .)
    IF              reduce using rule 29 (Proc -> Call .)
    CALL            reduce using rule 29 (Proc -> Call .)
    ASSERT          reduce using rule 29 (Proc -> Call .)
    PRINT           reduce using rule 29 (Proc -> Call .)
    WHILE           reduce using rule 29 (Proc -> Call .)
    DO              reduce using rule 29 (Proc -> Call .)
    ENDMARKER       reduce using rule 29 (Proc -> Call .)
    DEDENT          reduce using rule 29 (Proc -> Call .)
    ELSE            reduce using rule 29 (Proc -> Call .)


state 13

    (30) Proc -> Assert .

    NEWLINE         reduce using rule 30 (Proc -> Assert .)
    ID              reduce using rule 30 (Proc -> Assert .)
    IF              reduce using rule 30 (Proc -> Assert .)
    CALL            reduce using rule 30 (Proc -> Assert .)
    ASSERT          reduce using rule 30 (Proc -> Assert .)
    PRINT           reduce using rule 30 (Proc -> Assert .)
    WHILE           reduce using rule 30 (Proc -> Assert .)
    DO              reduce using rule 30 (Proc -> Assert .)
    ENDMARKER       reduce using rule 30 (Proc -> Assert .)
    DEDENT          reduce using rule 30 (Proc -> Assert .)
    ELSE            reduce using rule 30 (Proc -> Assert .)


state 14

    (8) Newline -> NEWLINE .

    ID              reduce using rule 8 (Newline -> NEWLINE .)
    IF              reduce using rule 8 (Newline -> NEWLINE .)
    CALL            reduce using rule 8 (Newline -> NEWLINE .)
    ASSERT          reduce using rule 8 (Newline -> NEWLINE .)
    PRINT           reduce using rule 8 (Newline -> NEWLINE .)
    WHILE           reduce using rule 8 (Newline -> NEWLINE .)
    DO              reduce using rule 8 (Newline -> NEWLINE .)
    ENDMARKER       reduce using rule 8 (Newline -> NEWLINE .)
    DEDENT          reduce using rule 8 (Newline -> NEWLINE .)
    ELSE            reduce using rule 8 (Newline -> NEWLINE .)
    NEWLINE         reduce using rule 8 (Newline -> NEWLINE .)
    INTDec          reduce using rule 8 (Newline -> NEWLINE .)
    DEF             reduce using rule 8 (Newline -> NEWLINE .)
    INDENT          reduce using rule 8 (Newline -> NEWLINE .)


state 15

    (9) Newline -> Empty .

    ID              reduce using rule 9 (Newline -> Empty .)
    IF              reduce using rule 9 (Newline -> Empty .)
    CALL            reduce using rule 9 (Newline -> Empty .)
    ASSERT          reduce using rule 9 (Newline -> Empty .)
    PRINT           reduce using rule 9 (Newline -> Empty .)
    WHILE           reduce using rule 9 (Newline -> Empty .)
    DO              reduce using rule 9 (Newline -> Empty .)
    ENDMARKER       reduce using rule 9 (Newline -> Empty .)
    DEDENT          reduce using rule 9 (Newline -> Empty .)
    ELSE            reduce using rule 9 (Newline -> Empty .)
    NEWLINE         reduce using rule 9 (Newline -> Empty .)
    INTDec          reduce using rule 9 (Newline -> Empty .)
    DEF             reduce using rule 9 (Newline -> Empty .)
    INDENT          reduce using rule 9 (Newline -> Empty .)


state 16

    (14) Decl -> INTDec . ID
    (15) Decl -> INTDec . ID ATRIB NUM
    (16) Decl -> INTDec . ID ATRIB Input
    (17) Decl -> INTDec . ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues
    (18) Decl -> INTDec . ID LSQBRACKET NUM RSQBRACKET

    ID              shift and go to state 35


state 17

    (48) Atrib -> ID . ATRIB Expr
    (49) Atrib -> ID . ATRIB Input
    (50) Atrib -> ID . INC
    (51) Atrib -> ID . DEC
    (52) Atrib -> ID . LSQBRACKET Expr RSQBRACKET ATRIB Expr

    ATRIB           shift and go to state 36
    INC             shift and go to state 37
    DEC             shift and go to state 38
    LSQBRACKET      shift and go to state 39


state 18

    (19) Decl -> Def .

    NEWLINE         reduce using rule 19 (Decl -> Def .)
    INTDec          reduce using rule 19 (Decl -> Def .)
    DEF             reduce using rule 19 (Decl -> Def .)
    ID              reduce using rule 19 (Decl -> Def .)
    IF              reduce using rule 19 (Decl -> Def .)
    CALL            reduce using rule 19 (Decl -> Def .)
    ASSERT          reduce using rule 19 (Decl -> Def .)
    PRINT           reduce using rule 19 (Decl -> Def .)
    WHILE           reduce using rule 19 (Decl -> Def .)
    DO              reduce using rule 19 (Decl -> Def .)
    ENDMARKER       reduce using rule 19 (Decl -> Def .)
    DEDENT          reduce using rule 19 (Decl -> Def .)


state 19

    (53) Print -> NonFormatted .

    NEWLINE         reduce using rule 53 (Print -> NonFormatted .)
    ID              reduce using rule 53 (Print -> NonFormatted .)
    IF              reduce using rule 53 (Print -> NonFormatted .)
    CALL            reduce using rule 53 (Print -> NonFormatted .)
    ASSERT          reduce using rule 53 (Print -> NonFormatted .)
    PRINT           reduce using rule 53 (Print -> NonFormatted .)
    WHILE           reduce using rule 53 (Print -> NonFormatted .)
    DO              reduce using rule 53 (Print -> NonFormatted .)
    ENDMARKER       reduce using rule 53 (Print -> NonFormatted .)
    DEDENT          reduce using rule 53 (Print -> NonFormatted .)
    ELSE            reduce using rule 53 (Print -> NonFormatted .)


state 20

    (33) If -> IF . LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> IF . LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT

    LCPARENT        shift and go to state 40


state 21

    (35) Cycle -> While .

    NEWLINE         reduce using rule 35 (Cycle -> While .)
    ID              reduce using rule 35 (Cycle -> While .)
    IF              reduce using rule 35 (Cycle -> While .)
    CALL            reduce using rule 35 (Cycle -> While .)
    ASSERT          reduce using rule 35 (Cycle -> While .)
    PRINT           reduce using rule 35 (Cycle -> While .)
    WHILE           reduce using rule 35 (Cycle -> While .)
    DO              reduce using rule 35 (Cycle -> While .)
    ENDMARKER       reduce using rule 35 (Cycle -> While .)
    DEDENT          reduce using rule 35 (Cycle -> While .)
    ELSE            reduce using rule 35 (Cycle -> While .)


state 22

    (36) Cycle -> DoWhile .

    NEWLINE         reduce using rule 36 (Cycle -> DoWhile .)
    ID              reduce using rule 36 (Cycle -> DoWhile .)
    IF              reduce using rule 36 (Cycle -> DoWhile .)
    CALL            reduce using rule 36 (Cycle -> DoWhile .)
    ASSERT          reduce using rule 36 (Cycle -> DoWhile .)
    PRINT           reduce using rule 36 (Cycle -> DoWhile .)
    WHILE           reduce using rule 36 (Cycle -> DoWhile .)
    DO              reduce using rule 36 (Cycle -> DoWhile .)
    ENDMARKER       reduce using rule 36 (Cycle -> DoWhile .)
    DEDENT          reduce using rule 36 (Cycle -> DoWhile .)
    ELSE            reduce using rule 36 (Cycle -> DoWhile .)


state 23

    (31) Call -> CALL .

    NEWLINE         reduce using rule 31 (Call -> CALL .)
    ID              reduce using rule 31 (Call -> CALL .)
    IF              reduce using rule 31 (Call -> CALL .)
    CALL            reduce using rule 31 (Call -> CALL .)
    ASSERT          reduce using rule 31 (Call -> CALL .)
    PRINT           reduce using rule 31 (Call -> CALL .)
    WHILE           reduce using rule 31 (Call -> CALL .)
    DO              reduce using rule 31 (Call -> CALL .)
    ENDMARKER       reduce using rule 31 (Call -> CALL .)
    DEDENT          reduce using rule 31 (Call -> CALL .)
    ELSE            reduce using rule 31 (Call -> CALL .)


state 24

    (32) Assert -> ASSERT . LCPARENT Cond RCPARENT

    LCPARENT        shift and go to state 41


state 25

    (20) Def -> DEF . ID COLON Newline INDENT Corpo DEDENT
    (21) Def -> DEF . ID COLON Newline INDENT Decls Corpo DEDENT

    ID              shift and go to state 42


state 26

    (54) NonFormatted -> PRINT . LCPARENT Argument RCPARENT

    LCPARENT        shift and go to state 43


state 27

    (38) While -> WHILE . LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

    LCPARENT        shift and go to state 44


state 28

    (37) DoWhile -> DO . COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

    COLON           shift and go to state 45


state 29

    (1) ProgramaInit -> Programa ENDMARKER .

    $end            reduce using rule 1 (ProgramaInit -> Programa ENDMARKER .)


state 30

    (5) Corpo -> Corpo Proc . Newline
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (7) Empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 14
    ID              reduce using rule 7 (Empty -> .)
    IF              reduce using rule 7 (Empty -> .)
    CALL            reduce using rule 7 (Empty -> .)
    ASSERT          reduce using rule 7 (Empty -> .)
    PRINT           reduce using rule 7 (Empty -> .)
    WHILE           reduce using rule 7 (Empty -> .)
    DO              reduce using rule 7 (Empty -> .)
    ENDMARKER       reduce using rule 7 (Empty -> .)
    DEDENT          reduce using rule 7 (Empty -> .)
    ELSE            reduce using rule 7 (Empty -> .)

  ! NEWLINE         [ reduce using rule 7 (Empty -> .) ]

    Newline                        shift and go to state 46
    Empty                          shift and go to state 15

state 31

    (3) Programa -> Decls Corpo .
    (5) Corpo -> Corpo . Proc Newline
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

    ENDMARKER       reduce using rule 3 (Programa -> Decls Corpo .)
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

    Proc                           shift and go to state 30
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 32

    (13) Decls -> Decls Decl . Newline
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (7) Empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 14
    INTDec          reduce using rule 7 (Empty -> .)
    DEF             reduce using rule 7 (Empty -> .)
    ID              reduce using rule 7 (Empty -> .)
    IF              reduce using rule 7 (Empty -> .)
    CALL            reduce using rule 7 (Empty -> .)
    ASSERT          reduce using rule 7 (Empty -> .)
    PRINT           reduce using rule 7 (Empty -> .)
    WHILE           reduce using rule 7 (Empty -> .)
    DO              reduce using rule 7 (Empty -> .)
    ENDMARKER       reduce using rule 7 (Empty -> .)
    DEDENT          reduce using rule 7 (Empty -> .)

  ! NEWLINE         [ reduce using rule 7 (Empty -> .) ]

    Newline                        shift and go to state 47
    Empty                          shift and go to state 15

state 33

    (4) Corpo -> Proc Newline .

    ID              reduce using rule 4 (Corpo -> Proc Newline .)
    IF              reduce using rule 4 (Corpo -> Proc Newline .)
    CALL            reduce using rule 4 (Corpo -> Proc Newline .)
    ASSERT          reduce using rule 4 (Corpo -> Proc Newline .)
    PRINT           reduce using rule 4 (Corpo -> Proc Newline .)
    WHILE           reduce using rule 4 (Corpo -> Proc Newline .)
    DO              reduce using rule 4 (Corpo -> Proc Newline .)
    ENDMARKER       reduce using rule 4 (Corpo -> Proc Newline .)
    DEDENT          reduce using rule 4 (Corpo -> Proc Newline .)
    ELSE            reduce using rule 4 (Corpo -> Proc Newline .)
    NEWLINE         reduce using rule 4 (Corpo -> Proc Newline .)


state 34

    (12) Decls -> Decl Newline .

    INTDec          reduce using rule 12 (Decls -> Decl Newline .)
    NEWLINE         reduce using rule 12 (Decls -> Decl Newline .)
    DEF             reduce using rule 12 (Decls -> Decl Newline .)
    ID              reduce using rule 12 (Decls -> Decl Newline .)
    IF              reduce using rule 12 (Decls -> Decl Newline .)
    CALL            reduce using rule 12 (Decls -> Decl Newline .)
    ASSERT          reduce using rule 12 (Decls -> Decl Newline .)
    PRINT           reduce using rule 12 (Decls -> Decl Newline .)
    WHILE           reduce using rule 12 (Decls -> Decl Newline .)
    DO              reduce using rule 12 (Decls -> Decl Newline .)
    ENDMARKER       reduce using rule 12 (Decls -> Decl Newline .)
    DEDENT          reduce using rule 12 (Decls -> Decl Newline .)


state 35

    (14) Decl -> INTDec ID .
    (15) Decl -> INTDec ID . ATRIB NUM
    (16) Decl -> INTDec ID . ATRIB Input
    (17) Decl -> INTDec ID . LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues
    (18) Decl -> INTDec ID . LSQBRACKET NUM RSQBRACKET

    NEWLINE         reduce using rule 14 (Decl -> INTDec ID .)
    INTDec          reduce using rule 14 (Decl -> INTDec ID .)
    DEF             reduce using rule 14 (Decl -> INTDec ID .)
    ID              reduce using rule 14 (Decl -> INTDec ID .)
    IF              reduce using rule 14 (Decl -> INTDec ID .)
    CALL            reduce using rule 14 (Decl -> INTDec ID .)
    ASSERT          reduce using rule 14 (Decl -> INTDec ID .)
    PRINT           reduce using rule 14 (Decl -> INTDec ID .)
    WHILE           reduce using rule 14 (Decl -> INTDec ID .)
    DO              reduce using rule 14 (Decl -> INTDec ID .)
    ENDMARKER       reduce using rule 14 (Decl -> INTDec ID .)
    DEDENT          reduce using rule 14 (Decl -> INTDec ID .)
    ATRIB           shift and go to state 48
    LSQBRACKET      shift and go to state 49


state 36

    (48) Atrib -> ID ATRIB . Expr
    (49) Atrib -> ID ATRIB . Input
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (69) Input -> . INPUT LCPARENT String RCPARENT
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    INPUT           shift and go to state 56
    ID              shift and go to state 50

    Expr                           shift and go to state 51
    Input                          shift and go to state 52
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 37

    (50) Atrib -> ID INC .

    NEWLINE         reduce using rule 50 (Atrib -> ID INC .)
    ID              reduce using rule 50 (Atrib -> ID INC .)
    IF              reduce using rule 50 (Atrib -> ID INC .)
    CALL            reduce using rule 50 (Atrib -> ID INC .)
    ASSERT          reduce using rule 50 (Atrib -> ID INC .)
    PRINT           reduce using rule 50 (Atrib -> ID INC .)
    WHILE           reduce using rule 50 (Atrib -> ID INC .)
    DO              reduce using rule 50 (Atrib -> ID INC .)
    ENDMARKER       reduce using rule 50 (Atrib -> ID INC .)
    DEDENT          reduce using rule 50 (Atrib -> ID INC .)
    ELSE            reduce using rule 50 (Atrib -> ID INC .)


state 38

    (51) Atrib -> ID DEC .

    NEWLINE         reduce using rule 51 (Atrib -> ID DEC .)
    ID              reduce using rule 51 (Atrib -> ID DEC .)
    IF              reduce using rule 51 (Atrib -> ID DEC .)
    CALL            reduce using rule 51 (Atrib -> ID DEC .)
    ASSERT          reduce using rule 51 (Atrib -> ID DEC .)
    PRINT           reduce using rule 51 (Atrib -> ID DEC .)
    WHILE           reduce using rule 51 (Atrib -> ID DEC .)
    DO              reduce using rule 51 (Atrib -> ID DEC .)
    ENDMARKER       reduce using rule 51 (Atrib -> ID DEC .)
    DEDENT          reduce using rule 51 (Atrib -> ID DEC .)
    ELSE            reduce using rule 51 (Atrib -> ID DEC .)


state 39

    (52) Atrib -> ID LSQBRACKET . Expr RSQBRACKET ATRIB Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 57
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 40

    (33) If -> IF LCPARENT . Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> IF LCPARENT . Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (39) Cond -> . Expr GT Expr
    (40) Cond -> . Expr LT Expr
    (41) Cond -> . Expr GEQ Expr
    (42) Cond -> . Expr LEQ Expr
    (43) Cond -> . Expr EQUIV Expr
    (44) Cond -> . Expr NEQ Expr
    (45) Cond -> . Expr OR Expr
    (46) Cond -> . Expr AND Expr
    (47) Cond -> . NOT Cond
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NOT             shift and go to state 60
    NUM             shift and go to state 55
    ID              shift and go to state 50

    Cond                           shift and go to state 58
    Expr                           shift and go to state 59
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 41

    (32) Assert -> ASSERT LCPARENT . Cond RCPARENT
    (39) Cond -> . Expr GT Expr
    (40) Cond -> . Expr LT Expr
    (41) Cond -> . Expr GEQ Expr
    (42) Cond -> . Expr LEQ Expr
    (43) Cond -> . Expr EQUIV Expr
    (44) Cond -> . Expr NEQ Expr
    (45) Cond -> . Expr OR Expr
    (46) Cond -> . Expr AND Expr
    (47) Cond -> . NOT Cond
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NOT             shift and go to state 60
    NUM             shift and go to state 55
    ID              shift and go to state 50

    Cond                           shift and go to state 61
    Expr                           shift and go to state 59
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 42

    (20) Def -> DEF ID . COLON Newline INDENT Corpo DEDENT
    (21) Def -> DEF ID . COLON Newline INDENT Decls Corpo DEDENT

    COLON           shift and go to state 62


state 43

    (54) NonFormatted -> PRINT LCPARENT . Argument RCPARENT
    (55) Argument -> . String
    (56) Argument -> . Expr
    (70) String -> . QUOTE STRING QUOTE
    (71) String -> . Empty
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (7) Empty -> .
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    QUOTE           shift and go to state 66
    NUM             shift and go to state 55
    RCPARENT        reduce using rule 7 (Empty -> .)
    ID              shift and go to state 50

    Argument                       shift and go to state 63
    String                         shift and go to state 64
    Expr                           shift and go to state 65
    Empty                          shift and go to state 67
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 44

    (38) While -> WHILE LCPARENT . Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (39) Cond -> . Expr GT Expr
    (40) Cond -> . Expr LT Expr
    (41) Cond -> . Expr GEQ Expr
    (42) Cond -> . Expr LEQ Expr
    (43) Cond -> . Expr EQUIV Expr
    (44) Cond -> . Expr NEQ Expr
    (45) Cond -> . Expr OR Expr
    (46) Cond -> . Expr AND Expr
    (47) Cond -> . NOT Cond
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NOT             shift and go to state 60
    NUM             shift and go to state 55
    ID              shift and go to state 50

    Cond                           shift and go to state 68
    Expr                           shift and go to state 59
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 45

    (37) DoWhile -> DO COLON . Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (7) Empty -> .

    NEWLINE         shift and go to state 14
    INDENT          reduce using rule 7 (Empty -> .)

    Newline                        shift and go to state 69
    Empty                          shift and go to state 15

state 46

    (5) Corpo -> Corpo Proc Newline .

    ID              reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    IF              reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    CALL            reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    ASSERT          reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    PRINT           reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    WHILE           reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    DO              reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    ENDMARKER       reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    DEDENT          reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    ELSE            reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    NEWLINE         reduce using rule 5 (Corpo -> Corpo Proc Newline .)


state 47

    (13) Decls -> Decls Decl Newline .

    INTDec          reduce using rule 13 (Decls -> Decls Decl Newline .)
    NEWLINE         reduce using rule 13 (Decls -> Decls Decl Newline .)
    DEF             reduce using rule 13 (Decls -> Decls Decl Newline .)
    ID              reduce using rule 13 (Decls -> Decls Decl Newline .)
    IF              reduce using rule 13 (Decls -> Decls Decl Newline .)
    CALL            reduce using rule 13 (Decls -> Decls Decl Newline .)
    ASSERT          reduce using rule 13 (Decls -> Decls Decl Newline .)
    PRINT           reduce using rule 13 (Decls -> Decls Decl Newline .)
    WHILE           reduce using rule 13 (Decls -> Decls Decl Newline .)
    DO              reduce using rule 13 (Decls -> Decls Decl Newline .)
    ENDMARKER       reduce using rule 13 (Decls -> Decls Decl Newline .)
    DEDENT          reduce using rule 13 (Decls -> Decls Decl Newline .)


state 48

    (15) Decl -> INTDec ID ATRIB . NUM
    (16) Decl -> INTDec ID ATRIB . Input
    (69) Input -> . INPUT LCPARENT String RCPARENT

    NUM             shift and go to state 70
    INPUT           shift and go to state 56

    Input                          shift and go to state 71

state 49

    (17) Decl -> INTDec ID LSQBRACKET . NUM RSQBRACKET ATRIB ArrayValues
    (18) Decl -> INTDec ID LSQBRACKET . NUM RSQBRACKET

    NUM             shift and go to state 72


state 50

    (67) Var -> ID .
    (68) Var -> ID . LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> ID . INC
    (66) ExprIncDec -> ID . DEC

    SUM             reduce using rule 67 (Var -> ID .)
    SUB             reduce using rule 67 (Var -> ID .)
    MULT            reduce using rule 67 (Var -> ID .)
    DIV             reduce using rule 67 (Var -> ID .)
    MOD             reduce using rule 67 (Var -> ID .)
    NEWLINE         reduce using rule 67 (Var -> ID .)
    ID              reduce using rule 67 (Var -> ID .)
    IF              reduce using rule 67 (Var -> ID .)
    CALL            reduce using rule 67 (Var -> ID .)
    ASSERT          reduce using rule 67 (Var -> ID .)
    PRINT           reduce using rule 67 (Var -> ID .)
    WHILE           reduce using rule 67 (Var -> ID .)
    DO              reduce using rule 67 (Var -> ID .)
    ENDMARKER       reduce using rule 67 (Var -> ID .)
    DEDENT          reduce using rule 67 (Var -> ID .)
    ELSE            reduce using rule 67 (Var -> ID .)
    RSQBRACKET      reduce using rule 67 (Var -> ID .)
    GT              reduce using rule 67 (Var -> ID .)
    LT              reduce using rule 67 (Var -> ID .)
    GEQ             reduce using rule 67 (Var -> ID .)
    LEQ             reduce using rule 67 (Var -> ID .)
    EQUIV           reduce using rule 67 (Var -> ID .)
    NEQ             reduce using rule 67 (Var -> ID .)
    OR              reduce using rule 67 (Var -> ID .)
    AND             reduce using rule 67 (Var -> ID .)
    RCPARENT        reduce using rule 67 (Var -> ID .)
    RCURLBRACKET    reduce using rule 67 (Var -> ID .)
    ,               reduce using rule 67 (Var -> ID .)
    LSQBRACKET      shift and go to state 73
    INC             shift and go to state 74
    DEC             shift and go to state 75


state 51

    (48) Atrib -> ID ATRIB Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    NEWLINE         reduce using rule 48 (Atrib -> ID ATRIB Expr .)
    ID              reduce using rule 48 (Atrib -> ID ATRIB Expr .)
    IF              reduce using rule 48 (Atrib -> ID ATRIB Expr .)
    CALL            reduce using rule 48 (Atrib -> ID ATRIB Expr .)
    ASSERT          reduce using rule 48 (Atrib -> ID ATRIB Expr .)
    PRINT           reduce using rule 48 (Atrib -> ID ATRIB Expr .)
    WHILE           reduce using rule 48 (Atrib -> ID ATRIB Expr .)
    DO              reduce using rule 48 (Atrib -> ID ATRIB Expr .)
    ENDMARKER       reduce using rule 48 (Atrib -> ID ATRIB Expr .)
    DEDENT          reduce using rule 48 (Atrib -> ID ATRIB Expr .)
    ELSE            reduce using rule 48 (Atrib -> ID ATRIB Expr .)
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 52

    (49) Atrib -> ID ATRIB Input .

    NEWLINE         reduce using rule 49 (Atrib -> ID ATRIB Input .)
    ID              reduce using rule 49 (Atrib -> ID ATRIB Input .)
    IF              reduce using rule 49 (Atrib -> ID ATRIB Input .)
    CALL            reduce using rule 49 (Atrib -> ID ATRIB Input .)
    ASSERT          reduce using rule 49 (Atrib -> ID ATRIB Input .)
    PRINT           reduce using rule 49 (Atrib -> ID ATRIB Input .)
    WHILE           reduce using rule 49 (Atrib -> ID ATRIB Input .)
    DO              reduce using rule 49 (Atrib -> ID ATRIB Input .)
    ENDMARKER       reduce using rule 49 (Atrib -> ID ATRIB Input .)
    DEDENT          reduce using rule 49 (Atrib -> ID ATRIB Input .)
    ELSE            reduce using rule 49 (Atrib -> ID ATRIB Input .)


state 53

    (57) Expr -> Var .

    SUM             reduce using rule 57 (Expr -> Var .)
    SUB             reduce using rule 57 (Expr -> Var .)
    MULT            reduce using rule 57 (Expr -> Var .)
    DIV             reduce using rule 57 (Expr -> Var .)
    MOD             reduce using rule 57 (Expr -> Var .)
    NEWLINE         reduce using rule 57 (Expr -> Var .)
    ID              reduce using rule 57 (Expr -> Var .)
    IF              reduce using rule 57 (Expr -> Var .)
    CALL            reduce using rule 57 (Expr -> Var .)
    ASSERT          reduce using rule 57 (Expr -> Var .)
    PRINT           reduce using rule 57 (Expr -> Var .)
    WHILE           reduce using rule 57 (Expr -> Var .)
    DO              reduce using rule 57 (Expr -> Var .)
    ENDMARKER       reduce using rule 57 (Expr -> Var .)
    DEDENT          reduce using rule 57 (Expr -> Var .)
    ELSE            reduce using rule 57 (Expr -> Var .)
    RSQBRACKET      reduce using rule 57 (Expr -> Var .)
    GT              reduce using rule 57 (Expr -> Var .)
    LT              reduce using rule 57 (Expr -> Var .)
    GEQ             reduce using rule 57 (Expr -> Var .)
    LEQ             reduce using rule 57 (Expr -> Var .)
    EQUIV           reduce using rule 57 (Expr -> Var .)
    NEQ             reduce using rule 57 (Expr -> Var .)
    OR              reduce using rule 57 (Expr -> Var .)
    AND             reduce using rule 57 (Expr -> Var .)
    RCPARENT        reduce using rule 57 (Expr -> Var .)
    RCURLBRACKET    reduce using rule 57 (Expr -> Var .)
    ,               reduce using rule 57 (Expr -> Var .)


state 54

    (58) Expr -> ExprIncDec .

    SUM             reduce using rule 58 (Expr -> ExprIncDec .)
    SUB             reduce using rule 58 (Expr -> ExprIncDec .)
    MULT            reduce using rule 58 (Expr -> ExprIncDec .)
    DIV             reduce using rule 58 (Expr -> ExprIncDec .)
    MOD             reduce using rule 58 (Expr -> ExprIncDec .)
    NEWLINE         reduce using rule 58 (Expr -> ExprIncDec .)
    ID              reduce using rule 58 (Expr -> ExprIncDec .)
    IF              reduce using rule 58 (Expr -> ExprIncDec .)
    CALL            reduce using rule 58 (Expr -> ExprIncDec .)
    ASSERT          reduce using rule 58 (Expr -> ExprIncDec .)
    PRINT           reduce using rule 58 (Expr -> ExprIncDec .)
    WHILE           reduce using rule 58 (Expr -> ExprIncDec .)
    DO              reduce using rule 58 (Expr -> ExprIncDec .)
    ENDMARKER       reduce using rule 58 (Expr -> ExprIncDec .)
    DEDENT          reduce using rule 58 (Expr -> ExprIncDec .)
    ELSE            reduce using rule 58 (Expr -> ExprIncDec .)
    RSQBRACKET      reduce using rule 58 (Expr -> ExprIncDec .)
    GT              reduce using rule 58 (Expr -> ExprIncDec .)
    LT              reduce using rule 58 (Expr -> ExprIncDec .)
    GEQ             reduce using rule 58 (Expr -> ExprIncDec .)
    LEQ             reduce using rule 58 (Expr -> ExprIncDec .)
    EQUIV           reduce using rule 58 (Expr -> ExprIncDec .)
    NEQ             reduce using rule 58 (Expr -> ExprIncDec .)
    OR              reduce using rule 58 (Expr -> ExprIncDec .)
    AND             reduce using rule 58 (Expr -> ExprIncDec .)
    RCPARENT        reduce using rule 58 (Expr -> ExprIncDec .)
    RCURLBRACKET    reduce using rule 58 (Expr -> ExprIncDec .)
    ,               reduce using rule 58 (Expr -> ExprIncDec .)


state 55

    (59) Expr -> NUM .

    SUM             reduce using rule 59 (Expr -> NUM .)
    SUB             reduce using rule 59 (Expr -> NUM .)
    MULT            reduce using rule 59 (Expr -> NUM .)
    DIV             reduce using rule 59 (Expr -> NUM .)
    MOD             reduce using rule 59 (Expr -> NUM .)
    NEWLINE         reduce using rule 59 (Expr -> NUM .)
    ID              reduce using rule 59 (Expr -> NUM .)
    IF              reduce using rule 59 (Expr -> NUM .)
    CALL            reduce using rule 59 (Expr -> NUM .)
    ASSERT          reduce using rule 59 (Expr -> NUM .)
    PRINT           reduce using rule 59 (Expr -> NUM .)
    WHILE           reduce using rule 59 (Expr -> NUM .)
    DO              reduce using rule 59 (Expr -> NUM .)
    ENDMARKER       reduce using rule 59 (Expr -> NUM .)
    DEDENT          reduce using rule 59 (Expr -> NUM .)
    ELSE            reduce using rule 59 (Expr -> NUM .)
    RSQBRACKET      reduce using rule 59 (Expr -> NUM .)
    GT              reduce using rule 59 (Expr -> NUM .)
    LT              reduce using rule 59 (Expr -> NUM .)
    GEQ             reduce using rule 59 (Expr -> NUM .)
    LEQ             reduce using rule 59 (Expr -> NUM .)
    EQUIV           reduce using rule 59 (Expr -> NUM .)
    NEQ             reduce using rule 59 (Expr -> NUM .)
    OR              reduce using rule 59 (Expr -> NUM .)
    AND             reduce using rule 59 (Expr -> NUM .)
    RCPARENT        reduce using rule 59 (Expr -> NUM .)
    RCURLBRACKET    reduce using rule 59 (Expr -> NUM .)
    ,               reduce using rule 59 (Expr -> NUM .)


state 56

    (69) Input -> INPUT . LCPARENT String RCPARENT

    LCPARENT        shift and go to state 81


state 57

    (52) Atrib -> ID LSQBRACKET Expr . RSQBRACKET ATRIB Expr
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    RSQBRACKET      shift and go to state 82
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 58

    (33) If -> IF LCPARENT Cond . RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> IF LCPARENT Cond . RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT

    RCPARENT        shift and go to state 83


state 59

    (39) Cond -> Expr . GT Expr
    (40) Cond -> Expr . LT Expr
    (41) Cond -> Expr . GEQ Expr
    (42) Cond -> Expr . LEQ Expr
    (43) Cond -> Expr . EQUIV Expr
    (44) Cond -> Expr . NEQ Expr
    (45) Cond -> Expr . OR Expr
    (46) Cond -> Expr . AND Expr
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    GT              shift and go to state 84
    LT              shift and go to state 85
    GEQ             shift and go to state 86
    LEQ             shift and go to state 87
    EQUIV           shift and go to state 88
    NEQ             shift and go to state 89
    OR              shift and go to state 90
    AND             shift and go to state 91
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 60

    (47) Cond -> NOT . Cond
    (39) Cond -> . Expr GT Expr
    (40) Cond -> . Expr LT Expr
    (41) Cond -> . Expr GEQ Expr
    (42) Cond -> . Expr LEQ Expr
    (43) Cond -> . Expr EQUIV Expr
    (44) Cond -> . Expr NEQ Expr
    (45) Cond -> . Expr OR Expr
    (46) Cond -> . Expr AND Expr
    (47) Cond -> . NOT Cond
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NOT             shift and go to state 60
    NUM             shift and go to state 55
    ID              shift and go to state 50

    Cond                           shift and go to state 92
    Expr                           shift and go to state 59
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 61

    (32) Assert -> ASSERT LCPARENT Cond . RCPARENT

    RCPARENT        shift and go to state 93


state 62

    (20) Def -> DEF ID COLON . Newline INDENT Corpo DEDENT
    (21) Def -> DEF ID COLON . Newline INDENT Decls Corpo DEDENT
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (7) Empty -> .

    NEWLINE         shift and go to state 14
    INDENT          reduce using rule 7 (Empty -> .)

    Newline                        shift and go to state 94
    Empty                          shift and go to state 15

state 63

    (54) NonFormatted -> PRINT LCPARENT Argument . RCPARENT

    RCPARENT        shift and go to state 95


state 64

    (55) Argument -> String .

    RCPARENT        reduce using rule 55 (Argument -> String .)


state 65

    (56) Argument -> Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 56 (Argument -> Expr .)
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 66

    (70) String -> QUOTE . STRING QUOTE

    STRING          shift and go to state 96


state 67

    (71) String -> Empty .

    RCPARENT        reduce using rule 71 (String -> Empty .)


state 68

    (38) While -> WHILE LCPARENT Cond . RCPARENT COLON Newline INDENT Corpo Dedent

    RCPARENT        shift and go to state 97


state 69

    (37) DoWhile -> DO COLON Newline . INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

    INDENT          shift and go to state 98


state 70

    (15) Decl -> INTDec ID ATRIB NUM .

    NEWLINE         reduce using rule 15 (Decl -> INTDec ID ATRIB NUM .)
    INTDec          reduce using rule 15 (Decl -> INTDec ID ATRIB NUM .)
    DEF             reduce using rule 15 (Decl -> INTDec ID ATRIB NUM .)
    ID              reduce using rule 15 (Decl -> INTDec ID ATRIB NUM .)
    IF              reduce using rule 15 (Decl -> INTDec ID ATRIB NUM .)
    CALL            reduce using rule 15 (Decl -> INTDec ID ATRIB NUM .)
    ASSERT          reduce using rule 15 (Decl -> INTDec ID ATRIB NUM .)
    PRINT           reduce using rule 15 (Decl -> INTDec ID ATRIB NUM .)
    WHILE           reduce using rule 15 (Decl -> INTDec ID ATRIB NUM .)
    DO              reduce using rule 15 (Decl -> INTDec ID ATRIB NUM .)
    ENDMARKER       reduce using rule 15 (Decl -> INTDec ID ATRIB NUM .)
    DEDENT          reduce using rule 15 (Decl -> INTDec ID ATRIB NUM .)


state 71

    (16) Decl -> INTDec ID ATRIB Input .

    NEWLINE         reduce using rule 16 (Decl -> INTDec ID ATRIB Input .)
    INTDec          reduce using rule 16 (Decl -> INTDec ID ATRIB Input .)
    DEF             reduce using rule 16 (Decl -> INTDec ID ATRIB Input .)
    ID              reduce using rule 16 (Decl -> INTDec ID ATRIB Input .)
    IF              reduce using rule 16 (Decl -> INTDec ID ATRIB Input .)
    CALL            reduce using rule 16 (Decl -> INTDec ID ATRIB Input .)
    ASSERT          reduce using rule 16 (Decl -> INTDec ID ATRIB Input .)
    PRINT           reduce using rule 16 (Decl -> INTDec ID ATRIB Input .)
    WHILE           reduce using rule 16 (Decl -> INTDec ID ATRIB Input .)
    DO              reduce using rule 16 (Decl -> INTDec ID ATRIB Input .)
    ENDMARKER       reduce using rule 16 (Decl -> INTDec ID ATRIB Input .)
    DEDENT          reduce using rule 16 (Decl -> INTDec ID ATRIB Input .)


state 72

    (17) Decl -> INTDec ID LSQBRACKET NUM . RSQBRACKET ATRIB ArrayValues
    (18) Decl -> INTDec ID LSQBRACKET NUM . RSQBRACKET

    RSQBRACKET      shift and go to state 99


state 73

    (68) Var -> ID LSQBRACKET . Expr RSQBRACKET
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 100
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 74

    (65) ExprIncDec -> ID INC .

    SUM             reduce using rule 65 (ExprIncDec -> ID INC .)
    SUB             reduce using rule 65 (ExprIncDec -> ID INC .)
    MULT            reduce using rule 65 (ExprIncDec -> ID INC .)
    DIV             reduce using rule 65 (ExprIncDec -> ID INC .)
    MOD             reduce using rule 65 (ExprIncDec -> ID INC .)
    NEWLINE         reduce using rule 65 (ExprIncDec -> ID INC .)
    ID              reduce using rule 65 (ExprIncDec -> ID INC .)
    IF              reduce using rule 65 (ExprIncDec -> ID INC .)
    CALL            reduce using rule 65 (ExprIncDec -> ID INC .)
    ASSERT          reduce using rule 65 (ExprIncDec -> ID INC .)
    PRINT           reduce using rule 65 (ExprIncDec -> ID INC .)
    WHILE           reduce using rule 65 (ExprIncDec -> ID INC .)
    DO              reduce using rule 65 (ExprIncDec -> ID INC .)
    ENDMARKER       reduce using rule 65 (ExprIncDec -> ID INC .)
    DEDENT          reduce using rule 65 (ExprIncDec -> ID INC .)
    ELSE            reduce using rule 65 (ExprIncDec -> ID INC .)
    RSQBRACKET      reduce using rule 65 (ExprIncDec -> ID INC .)
    GT              reduce using rule 65 (ExprIncDec -> ID INC .)
    LT              reduce using rule 65 (ExprIncDec -> ID INC .)
    GEQ             reduce using rule 65 (ExprIncDec -> ID INC .)
    LEQ             reduce using rule 65 (ExprIncDec -> ID INC .)
    EQUIV           reduce using rule 65 (ExprIncDec -> ID INC .)
    NEQ             reduce using rule 65 (ExprIncDec -> ID INC .)
    OR              reduce using rule 65 (ExprIncDec -> ID INC .)
    AND             reduce using rule 65 (ExprIncDec -> ID INC .)
    RCPARENT        reduce using rule 65 (ExprIncDec -> ID INC .)
    RCURLBRACKET    reduce using rule 65 (ExprIncDec -> ID INC .)
    ,               reduce using rule 65 (ExprIncDec -> ID INC .)


state 75

    (66) ExprIncDec -> ID DEC .

    SUM             reduce using rule 66 (ExprIncDec -> ID DEC .)
    SUB             reduce using rule 66 (ExprIncDec -> ID DEC .)
    MULT            reduce using rule 66 (ExprIncDec -> ID DEC .)
    DIV             reduce using rule 66 (ExprIncDec -> ID DEC .)
    MOD             reduce using rule 66 (ExprIncDec -> ID DEC .)
    NEWLINE         reduce using rule 66 (ExprIncDec -> ID DEC .)
    ID              reduce using rule 66 (ExprIncDec -> ID DEC .)
    IF              reduce using rule 66 (ExprIncDec -> ID DEC .)
    CALL            reduce using rule 66 (ExprIncDec -> ID DEC .)
    ASSERT          reduce using rule 66 (ExprIncDec -> ID DEC .)
    PRINT           reduce using rule 66 (ExprIncDec -> ID DEC .)
    WHILE           reduce using rule 66 (ExprIncDec -> ID DEC .)
    DO              reduce using rule 66 (ExprIncDec -> ID DEC .)
    ENDMARKER       reduce using rule 66 (ExprIncDec -> ID DEC .)
    DEDENT          reduce using rule 66 (ExprIncDec -> ID DEC .)
    ELSE            reduce using rule 66 (ExprIncDec -> ID DEC .)
    RSQBRACKET      reduce using rule 66 (ExprIncDec -> ID DEC .)
    GT              reduce using rule 66 (ExprIncDec -> ID DEC .)
    LT              reduce using rule 66 (ExprIncDec -> ID DEC .)
    GEQ             reduce using rule 66 (ExprIncDec -> ID DEC .)
    LEQ             reduce using rule 66 (ExprIncDec -> ID DEC .)
    EQUIV           reduce using rule 66 (ExprIncDec -> ID DEC .)
    NEQ             reduce using rule 66 (ExprIncDec -> ID DEC .)
    OR              reduce using rule 66 (ExprIncDec -> ID DEC .)
    AND             reduce using rule 66 (ExprIncDec -> ID DEC .)
    RCPARENT        reduce using rule 66 (ExprIncDec -> ID DEC .)
    RCURLBRACKET    reduce using rule 66 (ExprIncDec -> ID DEC .)
    ,               reduce using rule 66 (ExprIncDec -> ID DEC .)


state 76

    (60) Expr -> Expr SUM . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 101
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 77

    (61) Expr -> Expr SUB . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 102
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 78

    (62) Expr -> Expr MULT . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 103
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 79

    (63) Expr -> Expr DIV . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 104
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 80

    (64) Expr -> Expr MOD . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 105
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 81

    (69) Input -> INPUT LCPARENT . String RCPARENT
    (70) String -> . QUOTE STRING QUOTE
    (71) String -> . Empty
    (7) Empty -> .

    QUOTE           shift and go to state 66
    RCPARENT        reduce using rule 7 (Empty -> .)

    String                         shift and go to state 106
    Empty                          shift and go to state 67

state 82

    (52) Atrib -> ID LSQBRACKET Expr RSQBRACKET . ATRIB Expr

    ATRIB           shift and go to state 107


state 83

    (33) If -> IF LCPARENT Cond RCPARENT . COLON Newline INDENT Corpo Dedent
    (34) If -> IF LCPARENT Cond RCPARENT . COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT

    COLON           shift and go to state 108


state 84

    (39) Cond -> Expr GT . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 109
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 85

    (40) Cond -> Expr LT . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 110
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 86

    (41) Cond -> Expr GEQ . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 111
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 87

    (42) Cond -> Expr LEQ . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 112
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 88

    (43) Cond -> Expr EQUIV . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 113
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 89

    (44) Cond -> Expr NEQ . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 114
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 90

    (45) Cond -> Expr OR . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 115
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 91

    (46) Cond -> Expr AND . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 116
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 92

    (47) Cond -> NOT Cond .

    RCPARENT        reduce using rule 47 (Cond -> NOT Cond .)


state 93

    (32) Assert -> ASSERT LCPARENT Cond RCPARENT .

    NEWLINE         reduce using rule 32 (Assert -> ASSERT LCPARENT Cond RCPARENT .)
    ID              reduce using rule 32 (Assert -> ASSERT LCPARENT Cond RCPARENT .)
    IF              reduce using rule 32 (Assert -> ASSERT LCPARENT Cond RCPARENT .)
    CALL            reduce using rule 32 (Assert -> ASSERT LCPARENT Cond RCPARENT .)
    ASSERT          reduce using rule 32 (Assert -> ASSERT LCPARENT Cond RCPARENT .)
    PRINT           reduce using rule 32 (Assert -> ASSERT LCPARENT Cond RCPARENT .)
    WHILE           reduce using rule 32 (Assert -> ASSERT LCPARENT Cond RCPARENT .)
    DO              reduce using rule 32 (Assert -> ASSERT LCPARENT Cond RCPARENT .)
    ENDMARKER       reduce using rule 32 (Assert -> ASSERT LCPARENT Cond RCPARENT .)
    DEDENT          reduce using rule 32 (Assert -> ASSERT LCPARENT Cond RCPARENT .)
    ELSE            reduce using rule 32 (Assert -> ASSERT LCPARENT Cond RCPARENT .)


state 94

    (20) Def -> DEF ID COLON Newline . INDENT Corpo DEDENT
    (21) Def -> DEF ID COLON Newline . INDENT Decls Corpo DEDENT

    INDENT          shift and go to state 117


state 95

    (54) NonFormatted -> PRINT LCPARENT Argument RCPARENT .

    NEWLINE         reduce using rule 54 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    ID              reduce using rule 54 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    IF              reduce using rule 54 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    CALL            reduce using rule 54 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    ASSERT          reduce using rule 54 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    PRINT           reduce using rule 54 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    WHILE           reduce using rule 54 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    DO              reduce using rule 54 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    ENDMARKER       reduce using rule 54 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    DEDENT          reduce using rule 54 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    ELSE            reduce using rule 54 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)


state 96

    (70) String -> QUOTE STRING . QUOTE

    QUOTE           shift and go to state 118


state 97

    (38) While -> WHILE LCPARENT Cond RCPARENT . COLON Newline INDENT Corpo Dedent

    COLON           shift and go to state 119


state 98

    (37) DoWhile -> DO COLON Newline INDENT . Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (7) Empty -> .
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    NEWLINE         shift and go to state 14
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    DEDENT          reduce using rule 7 (Empty -> .)
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

  ! ID              [ reduce using rule 7 (Empty -> .) ]
  ! IF              [ reduce using rule 7 (Empty -> .) ]
  ! CALL            [ reduce using rule 7 (Empty -> .) ]
  ! ASSERT          [ reduce using rule 7 (Empty -> .) ]
  ! PRINT           [ reduce using rule 7 (Empty -> .) ]
  ! WHILE           [ reduce using rule 7 (Empty -> .) ]
  ! DO              [ reduce using rule 7 (Empty -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 120
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    Empty                          shift and go to state 15
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 99

    (17) Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET . ATRIB ArrayValues
    (18) Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .

    ATRIB           shift and go to state 121
    NEWLINE         reduce using rule 18 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    INTDec          reduce using rule 18 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    DEF             reduce using rule 18 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    ID              reduce using rule 18 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    IF              reduce using rule 18 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    CALL            reduce using rule 18 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    ASSERT          reduce using rule 18 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    PRINT           reduce using rule 18 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    WHILE           reduce using rule 18 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    DO              reduce using rule 18 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    ENDMARKER       reduce using rule 18 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    DEDENT          reduce using rule 18 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)


state 100

    (68) Var -> ID LSQBRACKET Expr . RSQBRACKET
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    RSQBRACKET      shift and go to state 122
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 101

    (60) Expr -> Expr SUM Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    SUM             reduce using rule 60 (Expr -> Expr SUM Expr .)
    SUB             reduce using rule 60 (Expr -> Expr SUM Expr .)
    NEWLINE         reduce using rule 60 (Expr -> Expr SUM Expr .)
    ID              reduce using rule 60 (Expr -> Expr SUM Expr .)
    IF              reduce using rule 60 (Expr -> Expr SUM Expr .)
    CALL            reduce using rule 60 (Expr -> Expr SUM Expr .)
    ASSERT          reduce using rule 60 (Expr -> Expr SUM Expr .)
    PRINT           reduce using rule 60 (Expr -> Expr SUM Expr .)
    WHILE           reduce using rule 60 (Expr -> Expr SUM Expr .)
    DO              reduce using rule 60 (Expr -> Expr SUM Expr .)
    ENDMARKER       reduce using rule 60 (Expr -> Expr SUM Expr .)
    DEDENT          reduce using rule 60 (Expr -> Expr SUM Expr .)
    ELSE            reduce using rule 60 (Expr -> Expr SUM Expr .)
    RSQBRACKET      reduce using rule 60 (Expr -> Expr SUM Expr .)
    GT              reduce using rule 60 (Expr -> Expr SUM Expr .)
    LT              reduce using rule 60 (Expr -> Expr SUM Expr .)
    GEQ             reduce using rule 60 (Expr -> Expr SUM Expr .)
    LEQ             reduce using rule 60 (Expr -> Expr SUM Expr .)
    EQUIV           reduce using rule 60 (Expr -> Expr SUM Expr .)
    NEQ             reduce using rule 60 (Expr -> Expr SUM Expr .)
    OR              reduce using rule 60 (Expr -> Expr SUM Expr .)
    AND             reduce using rule 60 (Expr -> Expr SUM Expr .)
    RCPARENT        reduce using rule 60 (Expr -> Expr SUM Expr .)
    RCURLBRACKET    reduce using rule 60 (Expr -> Expr SUM Expr .)
    ,               reduce using rule 60 (Expr -> Expr SUM Expr .)
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80

  ! MULT            [ reduce using rule 60 (Expr -> Expr SUM Expr .) ]
  ! DIV             [ reduce using rule 60 (Expr -> Expr SUM Expr .) ]
  ! MOD             [ reduce using rule 60 (Expr -> Expr SUM Expr .) ]
  ! SUM             [ shift and go to state 76 ]
  ! SUB             [ shift and go to state 77 ]


state 102

    (61) Expr -> Expr SUB Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    SUM             reduce using rule 61 (Expr -> Expr SUB Expr .)
    SUB             reduce using rule 61 (Expr -> Expr SUB Expr .)
    NEWLINE         reduce using rule 61 (Expr -> Expr SUB Expr .)
    ID              reduce using rule 61 (Expr -> Expr SUB Expr .)
    IF              reduce using rule 61 (Expr -> Expr SUB Expr .)
    CALL            reduce using rule 61 (Expr -> Expr SUB Expr .)
    ASSERT          reduce using rule 61 (Expr -> Expr SUB Expr .)
    PRINT           reduce using rule 61 (Expr -> Expr SUB Expr .)
    WHILE           reduce using rule 61 (Expr -> Expr SUB Expr .)
    DO              reduce using rule 61 (Expr -> Expr SUB Expr .)
    ENDMARKER       reduce using rule 61 (Expr -> Expr SUB Expr .)
    DEDENT          reduce using rule 61 (Expr -> Expr SUB Expr .)
    ELSE            reduce using rule 61 (Expr -> Expr SUB Expr .)
    RSQBRACKET      reduce using rule 61 (Expr -> Expr SUB Expr .)
    GT              reduce using rule 61 (Expr -> Expr SUB Expr .)
    LT              reduce using rule 61 (Expr -> Expr SUB Expr .)
    GEQ             reduce using rule 61 (Expr -> Expr SUB Expr .)
    LEQ             reduce using rule 61 (Expr -> Expr SUB Expr .)
    EQUIV           reduce using rule 61 (Expr -> Expr SUB Expr .)
    NEQ             reduce using rule 61 (Expr -> Expr SUB Expr .)
    OR              reduce using rule 61 (Expr -> Expr SUB Expr .)
    AND             reduce using rule 61 (Expr -> Expr SUB Expr .)
    RCPARENT        reduce using rule 61 (Expr -> Expr SUB Expr .)
    RCURLBRACKET    reduce using rule 61 (Expr -> Expr SUB Expr .)
    ,               reduce using rule 61 (Expr -> Expr SUB Expr .)
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80

  ! MULT            [ reduce using rule 61 (Expr -> Expr SUB Expr .) ]
  ! DIV             [ reduce using rule 61 (Expr -> Expr SUB Expr .) ]
  ! MOD             [ reduce using rule 61 (Expr -> Expr SUB Expr .) ]
  ! SUM             [ shift and go to state 76 ]
  ! SUB             [ shift and go to state 77 ]


state 103

    (62) Expr -> Expr MULT Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    SUM             reduce using rule 62 (Expr -> Expr MULT Expr .)
    SUB             reduce using rule 62 (Expr -> Expr MULT Expr .)
    MULT            reduce using rule 62 (Expr -> Expr MULT Expr .)
    DIV             reduce using rule 62 (Expr -> Expr MULT Expr .)
    MOD             reduce using rule 62 (Expr -> Expr MULT Expr .)
    NEWLINE         reduce using rule 62 (Expr -> Expr MULT Expr .)
    ID              reduce using rule 62 (Expr -> Expr MULT Expr .)
    IF              reduce using rule 62 (Expr -> Expr MULT Expr .)
    CALL            reduce using rule 62 (Expr -> Expr MULT Expr .)
    ASSERT          reduce using rule 62 (Expr -> Expr MULT Expr .)
    PRINT           reduce using rule 62 (Expr -> Expr MULT Expr .)
    WHILE           reduce using rule 62 (Expr -> Expr MULT Expr .)
    DO              reduce using rule 62 (Expr -> Expr MULT Expr .)
    ENDMARKER       reduce using rule 62 (Expr -> Expr MULT Expr .)
    DEDENT          reduce using rule 62 (Expr -> Expr MULT Expr .)
    ELSE            reduce using rule 62 (Expr -> Expr MULT Expr .)
    RSQBRACKET      reduce using rule 62 (Expr -> Expr MULT Expr .)
    GT              reduce using rule 62 (Expr -> Expr MULT Expr .)
    LT              reduce using rule 62 (Expr -> Expr MULT Expr .)
    GEQ             reduce using rule 62 (Expr -> Expr MULT Expr .)
    LEQ             reduce using rule 62 (Expr -> Expr MULT Expr .)
    EQUIV           reduce using rule 62 (Expr -> Expr MULT Expr .)
    NEQ             reduce using rule 62 (Expr -> Expr MULT Expr .)
    OR              reduce using rule 62 (Expr -> Expr MULT Expr .)
    AND             reduce using rule 62 (Expr -> Expr MULT Expr .)
    RCPARENT        reduce using rule 62 (Expr -> Expr MULT Expr .)
    RCURLBRACKET    reduce using rule 62 (Expr -> Expr MULT Expr .)
    ,               reduce using rule 62 (Expr -> Expr MULT Expr .)

  ! SUM             [ shift and go to state 76 ]
  ! SUB             [ shift and go to state 77 ]
  ! MULT            [ shift and go to state 78 ]
  ! DIV             [ shift and go to state 79 ]
  ! MOD             [ shift and go to state 80 ]


state 104

    (63) Expr -> Expr DIV Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    SUM             reduce using rule 63 (Expr -> Expr DIV Expr .)
    SUB             reduce using rule 63 (Expr -> Expr DIV Expr .)
    MULT            reduce using rule 63 (Expr -> Expr DIV Expr .)
    DIV             reduce using rule 63 (Expr -> Expr DIV Expr .)
    MOD             reduce using rule 63 (Expr -> Expr DIV Expr .)
    NEWLINE         reduce using rule 63 (Expr -> Expr DIV Expr .)
    ID              reduce using rule 63 (Expr -> Expr DIV Expr .)
    IF              reduce using rule 63 (Expr -> Expr DIV Expr .)
    CALL            reduce using rule 63 (Expr -> Expr DIV Expr .)
    ASSERT          reduce using rule 63 (Expr -> Expr DIV Expr .)
    PRINT           reduce using rule 63 (Expr -> Expr DIV Expr .)
    WHILE           reduce using rule 63 (Expr -> Expr DIV Expr .)
    DO              reduce using rule 63 (Expr -> Expr DIV Expr .)
    ENDMARKER       reduce using rule 63 (Expr -> Expr DIV Expr .)
    DEDENT          reduce using rule 63 (Expr -> Expr DIV Expr .)
    ELSE            reduce using rule 63 (Expr -> Expr DIV Expr .)
    RSQBRACKET      reduce using rule 63 (Expr -> Expr DIV Expr .)
    GT              reduce using rule 63 (Expr -> Expr DIV Expr .)
    LT              reduce using rule 63 (Expr -> Expr DIV Expr .)
    GEQ             reduce using rule 63 (Expr -> Expr DIV Expr .)
    LEQ             reduce using rule 63 (Expr -> Expr DIV Expr .)
    EQUIV           reduce using rule 63 (Expr -> Expr DIV Expr .)
    NEQ             reduce using rule 63 (Expr -> Expr DIV Expr .)
    OR              reduce using rule 63 (Expr -> Expr DIV Expr .)
    AND             reduce using rule 63 (Expr -> Expr DIV Expr .)
    RCPARENT        reduce using rule 63 (Expr -> Expr DIV Expr .)
    RCURLBRACKET    reduce using rule 63 (Expr -> Expr DIV Expr .)
    ,               reduce using rule 63 (Expr -> Expr DIV Expr .)

  ! SUM             [ shift and go to state 76 ]
  ! SUB             [ shift and go to state 77 ]
  ! MULT            [ shift and go to state 78 ]
  ! DIV             [ shift and go to state 79 ]
  ! MOD             [ shift and go to state 80 ]


state 105

    (64) Expr -> Expr MOD Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    SUM             reduce using rule 64 (Expr -> Expr MOD Expr .)
    SUB             reduce using rule 64 (Expr -> Expr MOD Expr .)
    MULT            reduce using rule 64 (Expr -> Expr MOD Expr .)
    DIV             reduce using rule 64 (Expr -> Expr MOD Expr .)
    MOD             reduce using rule 64 (Expr -> Expr MOD Expr .)
    NEWLINE         reduce using rule 64 (Expr -> Expr MOD Expr .)
    ID              reduce using rule 64 (Expr -> Expr MOD Expr .)
    IF              reduce using rule 64 (Expr -> Expr MOD Expr .)
    CALL            reduce using rule 64 (Expr -> Expr MOD Expr .)
    ASSERT          reduce using rule 64 (Expr -> Expr MOD Expr .)
    PRINT           reduce using rule 64 (Expr -> Expr MOD Expr .)
    WHILE           reduce using rule 64 (Expr -> Expr MOD Expr .)
    DO              reduce using rule 64 (Expr -> Expr MOD Expr .)
    ENDMARKER       reduce using rule 64 (Expr -> Expr MOD Expr .)
    DEDENT          reduce using rule 64 (Expr -> Expr MOD Expr .)
    ELSE            reduce using rule 64 (Expr -> Expr MOD Expr .)
    RSQBRACKET      reduce using rule 64 (Expr -> Expr MOD Expr .)
    GT              reduce using rule 64 (Expr -> Expr MOD Expr .)
    LT              reduce using rule 64 (Expr -> Expr MOD Expr .)
    GEQ             reduce using rule 64 (Expr -> Expr MOD Expr .)
    LEQ             reduce using rule 64 (Expr -> Expr MOD Expr .)
    EQUIV           reduce using rule 64 (Expr -> Expr MOD Expr .)
    NEQ             reduce using rule 64 (Expr -> Expr MOD Expr .)
    OR              reduce using rule 64 (Expr -> Expr MOD Expr .)
    AND             reduce using rule 64 (Expr -> Expr MOD Expr .)
    RCPARENT        reduce using rule 64 (Expr -> Expr MOD Expr .)
    RCURLBRACKET    reduce using rule 64 (Expr -> Expr MOD Expr .)
    ,               reduce using rule 64 (Expr -> Expr MOD Expr .)

  ! SUM             [ shift and go to state 76 ]
  ! SUB             [ shift and go to state 77 ]
  ! MULT            [ shift and go to state 78 ]
  ! DIV             [ shift and go to state 79 ]
  ! MOD             [ shift and go to state 80 ]


state 106

    (69) Input -> INPUT LCPARENT String . RCPARENT

    RCPARENT        shift and go to state 123


state 107

    (52) Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 124
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 108

    (33) If -> IF LCPARENT Cond RCPARENT COLON . Newline INDENT Corpo Dedent
    (34) If -> IF LCPARENT Cond RCPARENT COLON . Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (7) Empty -> .

    NEWLINE         shift and go to state 14
    INDENT          reduce using rule 7 (Empty -> .)

    Newline                        shift and go to state 125
    Empty                          shift and go to state 15

state 109

    (39) Cond -> Expr GT Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 39 (Cond -> Expr GT Expr .)
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 110

    (40) Cond -> Expr LT Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 40 (Cond -> Expr LT Expr .)
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 111

    (41) Cond -> Expr GEQ Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 41 (Cond -> Expr GEQ Expr .)
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 112

    (42) Cond -> Expr LEQ Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 42 (Cond -> Expr LEQ Expr .)
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 113

    (43) Cond -> Expr EQUIV Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 43 (Cond -> Expr EQUIV Expr .)
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 114

    (44) Cond -> Expr NEQ Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 44 (Cond -> Expr NEQ Expr .)
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 115

    (45) Cond -> Expr OR Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 45 (Cond -> Expr OR Expr .)
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 116

    (46) Cond -> Expr AND Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 46 (Cond -> Expr AND Expr .)
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 117

    (20) Def -> DEF ID COLON Newline INDENT . Corpo DEDENT
    (21) Def -> DEF ID COLON Newline INDENT . Decls Corpo DEDENT
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (12) Decls -> . Decl Newline
    (13) Decls -> . Decls Decl Newline
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (14) Decl -> . INTDec ID
    (15) Decl -> . INTDec ID ATRIB NUM
    (16) Decl -> . INTDec ID ATRIB Input
    (17) Decl -> . INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues
    (18) Decl -> . INTDec ID LSQBRACKET NUM RSQBRACKET
    (19) Decl -> . Def
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (7) Empty -> .
    (20) Def -> . DEF ID COLON Newline INDENT Corpo DEDENT
    (21) Def -> . DEF ID COLON Newline INDENT Decls Corpo DEDENT
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    NEWLINE         shift and go to state 14
    INTDec          shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    DEDENT          reduce using rule 7 (Empty -> .)
    DEF             shift and go to state 25
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

  ! ID              [ reduce using rule 7 (Empty -> .) ]
  ! IF              [ reduce using rule 7 (Empty -> .) ]
  ! CALL            [ reduce using rule 7 (Empty -> .) ]
  ! ASSERT          [ reduce using rule 7 (Empty -> .) ]
  ! PRINT           [ reduce using rule 7 (Empty -> .) ]
  ! WHILE           [ reduce using rule 7 (Empty -> .) ]
  ! DO              [ reduce using rule 7 (Empty -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 126
    Decls                          shift and go to state 127
    Proc                           shift and go to state 5
    Decl                           shift and go to state 7
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    Empty                          shift and go to state 15
    Def                            shift and go to state 18
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 118

    (70) String -> QUOTE STRING QUOTE .

    RCPARENT        reduce using rule 70 (String -> QUOTE STRING QUOTE .)


state 119

    (38) While -> WHILE LCPARENT Cond RCPARENT COLON . Newline INDENT Corpo Dedent
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (7) Empty -> .

    NEWLINE         shift and go to state 14
    INDENT          reduce using rule 7 (Empty -> .)

    Newline                        shift and go to state 128
    Empty                          shift and go to state 15

state 120

    (37) DoWhile -> DO COLON Newline INDENT Corpo . Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (5) Corpo -> Corpo . Proc Newline
    (10) Dedent -> . Dedent DEDENT
    (11) Dedent -> . Empty
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (7) Empty -> .
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

  ! shift/reduce conflict for WHILE resolved as shift
    DEDENT          reduce using rule 7 (Empty -> .)
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

  ! WHILE           [ reduce using rule 7 (Empty -> .) ]

    Dedent                         shift and go to state 129
    Proc                           shift and go to state 30
    Empty                          shift and go to state 130
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 121

    (17) Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB . ArrayValues
    (22) ArrayValues -> . LCURLBRACKET ArrayIntValues RCURLBRACKET

    LCURLBRACKET    shift and go to state 132

    ArrayValues                    shift and go to state 131

state 122

    (68) Var -> ID LSQBRACKET Expr RSQBRACKET .

    SUM             reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    SUB             reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    MULT            reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    DIV             reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    MOD             reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    NEWLINE         reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    ID              reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    IF              reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    CALL            reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    ASSERT          reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    PRINT           reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    WHILE           reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    DO              reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    ENDMARKER       reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    DEDENT          reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    ELSE            reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    RSQBRACKET      reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    GT              reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    LT              reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    GEQ             reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    LEQ             reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    EQUIV           reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    NEQ             reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    OR              reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    AND             reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    RCPARENT        reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    RCURLBRACKET    reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    ,               reduce using rule 68 (Var -> ID LSQBRACKET Expr RSQBRACKET .)


state 123

    (69) Input -> INPUT LCPARENT String RCPARENT .

    NEWLINE         reduce using rule 69 (Input -> INPUT LCPARENT String RCPARENT .)
    ID              reduce using rule 69 (Input -> INPUT LCPARENT String RCPARENT .)
    IF              reduce using rule 69 (Input -> INPUT LCPARENT String RCPARENT .)
    CALL            reduce using rule 69 (Input -> INPUT LCPARENT String RCPARENT .)
    ASSERT          reduce using rule 69 (Input -> INPUT LCPARENT String RCPARENT .)
    PRINT           reduce using rule 69 (Input -> INPUT LCPARENT String RCPARENT .)
    WHILE           reduce using rule 69 (Input -> INPUT LCPARENT String RCPARENT .)
    DO              reduce using rule 69 (Input -> INPUT LCPARENT String RCPARENT .)
    ENDMARKER       reduce using rule 69 (Input -> INPUT LCPARENT String RCPARENT .)
    DEDENT          reduce using rule 69 (Input -> INPUT LCPARENT String RCPARENT .)
    ELSE            reduce using rule 69 (Input -> INPUT LCPARENT String RCPARENT .)
    INTDec          reduce using rule 69 (Input -> INPUT LCPARENT String RCPARENT .)
    DEF             reduce using rule 69 (Input -> INPUT LCPARENT String RCPARENT .)


state 124

    (52) Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    NEWLINE         reduce using rule 52 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    ID              reduce using rule 52 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    IF              reduce using rule 52 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    CALL            reduce using rule 52 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    ASSERT          reduce using rule 52 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    PRINT           reduce using rule 52 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    WHILE           reduce using rule 52 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    DO              reduce using rule 52 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    ENDMARKER       reduce using rule 52 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    DEDENT          reduce using rule 52 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    ELSE            reduce using rule 52 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 125

    (33) If -> IF LCPARENT Cond RCPARENT COLON Newline . INDENT Corpo Dedent
    (34) If -> IF LCPARENT Cond RCPARENT COLON Newline . INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT

    INDENT          shift and go to state 133


state 126

    (20) Def -> DEF ID COLON Newline INDENT Corpo . DEDENT
    (5) Corpo -> Corpo . Proc Newline
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

    DEDENT          shift and go to state 134
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

    Proc                           shift and go to state 30
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 127

    (21) Def -> DEF ID COLON Newline INDENT Decls . Corpo DEDENT
    (13) Decls -> Decls . Decl Newline
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (14) Decl -> . INTDec ID
    (15) Decl -> . INTDec ID ATRIB NUM
    (16) Decl -> . INTDec ID ATRIB Input
    (17) Decl -> . INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues
    (18) Decl -> . INTDec ID LSQBRACKET NUM RSQBRACKET
    (19) Decl -> . Def
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (20) Def -> . DEF ID COLON Newline INDENT Corpo DEDENT
    (21) Def -> . DEF ID COLON Newline INDENT Decls Corpo DEDENT
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (7) Empty -> .
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    INTDec          shift and go to state 16
    NEWLINE         shift and go to state 14
    DEF             shift and go to state 25
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    DEDENT          reduce using rule 7 (Empty -> .)
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

  ! ID              [ reduce using rule 7 (Empty -> .) ]
  ! IF              [ reduce using rule 7 (Empty -> .) ]
  ! CALL            [ reduce using rule 7 (Empty -> .) ]
  ! ASSERT          [ reduce using rule 7 (Empty -> .) ]
  ! PRINT           [ reduce using rule 7 (Empty -> .) ]
  ! WHILE           [ reduce using rule 7 (Empty -> .) ]
  ! DO              [ reduce using rule 7 (Empty -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 135
    Decl                           shift and go to state 32
    Proc                           shift and go to state 5
    Def                            shift and go to state 18
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    Empty                          shift and go to state 15
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 128

    (38) While -> WHILE LCPARENT Cond RCPARENT COLON Newline . INDENT Corpo Dedent

    INDENT          shift and go to state 136


state 129

    (37) DoWhile -> DO COLON Newline INDENT Corpo Dedent . WHILE LCPARENT Cond RCPARENT NEWLINE
    (10) Dedent -> Dedent . DEDENT

    WHILE           shift and go to state 137
    DEDENT          shift and go to state 138


state 130

    (11) Dedent -> Empty .

    WHILE           reduce using rule 11 (Dedent -> Empty .)
    DEDENT          reduce using rule 11 (Dedent -> Empty .)
    ELSE            reduce using rule 11 (Dedent -> Empty .)
    NEWLINE         reduce using rule 11 (Dedent -> Empty .)
    ID              reduce using rule 11 (Dedent -> Empty .)
    IF              reduce using rule 11 (Dedent -> Empty .)
    CALL            reduce using rule 11 (Dedent -> Empty .)
    ASSERT          reduce using rule 11 (Dedent -> Empty .)
    PRINT           reduce using rule 11 (Dedent -> Empty .)
    DO              reduce using rule 11 (Dedent -> Empty .)
    ENDMARKER       reduce using rule 11 (Dedent -> Empty .)


state 131

    (17) Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .

    NEWLINE         reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    INTDec          reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    DEF             reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    ID              reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    IF              reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    CALL            reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    ASSERT          reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    PRINT           reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    WHILE           reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    DO              reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    ENDMARKER       reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    DEDENT          reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)


state 132

    (22) ArrayValues -> LCURLBRACKET . ArrayIntValues RCURLBRACKET
    (23) ArrayIntValues -> . ArrayIntValues , Expr
    (24) ArrayIntValues -> . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    ArrayIntValues                 shift and go to state 139
    Expr                           shift and go to state 140
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 133

    (33) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT . Corpo Dedent
    (34) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT . Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (7) Empty -> .
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    NEWLINE         shift and go to state 14
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    ELSE            reduce using rule 7 (Empty -> .)
    DEDENT          reduce using rule 7 (Empty -> .)
    ENDMARKER       reduce using rule 7 (Empty -> .)
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

  ! ID              [ reduce using rule 7 (Empty -> .) ]
  ! IF              [ reduce using rule 7 (Empty -> .) ]
  ! CALL            [ reduce using rule 7 (Empty -> .) ]
  ! ASSERT          [ reduce using rule 7 (Empty -> .) ]
  ! PRINT           [ reduce using rule 7 (Empty -> .) ]
  ! WHILE           [ reduce using rule 7 (Empty -> .) ]
  ! DO              [ reduce using rule 7 (Empty -> .) ]
  ! NEWLINE         [ reduce using rule 7 (Empty -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 141
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    Empty                          shift and go to state 15
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 134

    (20) Def -> DEF ID COLON Newline INDENT Corpo DEDENT .

    NEWLINE         reduce using rule 20 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    INTDec          reduce using rule 20 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    DEF             reduce using rule 20 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    ID              reduce using rule 20 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    IF              reduce using rule 20 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    CALL            reduce using rule 20 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    ASSERT          reduce using rule 20 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    PRINT           reduce using rule 20 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    WHILE           reduce using rule 20 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    DO              reduce using rule 20 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    ENDMARKER       reduce using rule 20 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    DEDENT          reduce using rule 20 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)


state 135

    (21) Def -> DEF ID COLON Newline INDENT Decls Corpo . DEDENT
    (5) Corpo -> Corpo . Proc Newline
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

    DEDENT          shift and go to state 142
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

    Proc                           shift and go to state 30
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 136

    (38) While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT . Corpo Dedent
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (7) Empty -> .
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    NEWLINE         shift and go to state 14
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    ELSE            reduce using rule 7 (Empty -> .)
    DEDENT          reduce using rule 7 (Empty -> .)
    ENDMARKER       reduce using rule 7 (Empty -> .)
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

  ! ID              [ reduce using rule 7 (Empty -> .) ]
  ! IF              [ reduce using rule 7 (Empty -> .) ]
  ! CALL            [ reduce using rule 7 (Empty -> .) ]
  ! ASSERT          [ reduce using rule 7 (Empty -> .) ]
  ! PRINT           [ reduce using rule 7 (Empty -> .) ]
  ! WHILE           [ reduce using rule 7 (Empty -> .) ]
  ! DO              [ reduce using rule 7 (Empty -> .) ]
  ! NEWLINE         [ reduce using rule 7 (Empty -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 143
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    Empty                          shift and go to state 15
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 137

    (37) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE . LCPARENT Cond RCPARENT NEWLINE

    LCPARENT        shift and go to state 144


state 138

    (10) Dedent -> Dedent DEDENT .

    WHILE           reduce using rule 10 (Dedent -> Dedent DEDENT .)
    DEDENT          reduce using rule 10 (Dedent -> Dedent DEDENT .)
    ELSE            reduce using rule 10 (Dedent -> Dedent DEDENT .)
    NEWLINE         reduce using rule 10 (Dedent -> Dedent DEDENT .)
    ID              reduce using rule 10 (Dedent -> Dedent DEDENT .)
    IF              reduce using rule 10 (Dedent -> Dedent DEDENT .)
    CALL            reduce using rule 10 (Dedent -> Dedent DEDENT .)
    ASSERT          reduce using rule 10 (Dedent -> Dedent DEDENT .)
    PRINT           reduce using rule 10 (Dedent -> Dedent DEDENT .)
    DO              reduce using rule 10 (Dedent -> Dedent DEDENT .)
    ENDMARKER       reduce using rule 10 (Dedent -> Dedent DEDENT .)


state 139

    (22) ArrayValues -> LCURLBRACKET ArrayIntValues . RCURLBRACKET
    (23) ArrayIntValues -> ArrayIntValues . , Expr

    RCURLBRACKET    shift and go to state 145
    ,               shift and go to state 146


state 140

    (24) ArrayIntValues -> Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    RCURLBRACKET    reduce using rule 24 (ArrayIntValues -> Expr .)
    ,               reduce using rule 24 (ArrayIntValues -> Expr .)
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 141

    (33) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo . Dedent
    (34) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo . Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (5) Corpo -> Corpo . Proc Newline
    (10) Dedent -> . Dedent DEDENT
    (11) Dedent -> . Empty
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (7) Empty -> .
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    ELSE            reduce using rule 7 (Empty -> .)
    DEDENT          reduce using rule 7 (Empty -> .)
    NEWLINE         reduce using rule 7 (Empty -> .)
    ENDMARKER       reduce using rule 7 (Empty -> .)
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

  ! ID              [ reduce using rule 7 (Empty -> .) ]
  ! IF              [ reduce using rule 7 (Empty -> .) ]
  ! CALL            [ reduce using rule 7 (Empty -> .) ]
  ! ASSERT          [ reduce using rule 7 (Empty -> .) ]
  ! PRINT           [ reduce using rule 7 (Empty -> .) ]
  ! WHILE           [ reduce using rule 7 (Empty -> .) ]
  ! DO              [ reduce using rule 7 (Empty -> .) ]

    Dedent                         shift and go to state 147
    Proc                           shift and go to state 30
    Empty                          shift and go to state 130
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 142

    (21) Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .

    NEWLINE         reduce using rule 21 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    INTDec          reduce using rule 21 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    DEF             reduce using rule 21 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    ID              reduce using rule 21 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    IF              reduce using rule 21 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    CALL            reduce using rule 21 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    ASSERT          reduce using rule 21 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    PRINT           reduce using rule 21 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    WHILE           reduce using rule 21 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    DO              reduce using rule 21 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    ENDMARKER       reduce using rule 21 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    DEDENT          reduce using rule 21 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)


state 143

    (38) While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo . Dedent
    (5) Corpo -> Corpo . Proc Newline
    (10) Dedent -> . Dedent DEDENT
    (11) Dedent -> . Empty
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (7) Empty -> .
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    DEDENT          reduce using rule 7 (Empty -> .)
    NEWLINE         reduce using rule 7 (Empty -> .)
    ENDMARKER       reduce using rule 7 (Empty -> .)
    ELSE            reduce using rule 7 (Empty -> .)
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

  ! ID              [ reduce using rule 7 (Empty -> .) ]
  ! IF              [ reduce using rule 7 (Empty -> .) ]
  ! CALL            [ reduce using rule 7 (Empty -> .) ]
  ! ASSERT          [ reduce using rule 7 (Empty -> .) ]
  ! PRINT           [ reduce using rule 7 (Empty -> .) ]
  ! WHILE           [ reduce using rule 7 (Empty -> .) ]
  ! DO              [ reduce using rule 7 (Empty -> .) ]

    Dedent                         shift and go to state 148
    Proc                           shift and go to state 30
    Empty                          shift and go to state 130
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 144

    (37) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT . Cond RCPARENT NEWLINE
    (39) Cond -> . Expr GT Expr
    (40) Cond -> . Expr LT Expr
    (41) Cond -> . Expr GEQ Expr
    (42) Cond -> . Expr LEQ Expr
    (43) Cond -> . Expr EQUIV Expr
    (44) Cond -> . Expr NEQ Expr
    (45) Cond -> . Expr OR Expr
    (46) Cond -> . Expr AND Expr
    (47) Cond -> . NOT Cond
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NOT             shift and go to state 60
    NUM             shift and go to state 55
    ID              shift and go to state 50

    Cond                           shift and go to state 149
    Expr                           shift and go to state 59
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 145

    (22) ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .

    NEWLINE         reduce using rule 22 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    INTDec          reduce using rule 22 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    DEF             reduce using rule 22 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    ID              reduce using rule 22 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    IF              reduce using rule 22 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    CALL            reduce using rule 22 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    ASSERT          reduce using rule 22 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    PRINT           reduce using rule 22 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    WHILE           reduce using rule 22 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    DO              reduce using rule 22 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    ENDMARKER       reduce using rule 22 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    DEDENT          reduce using rule 22 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)


state 146

    (23) ArrayIntValues -> ArrayIntValues , . Expr
    (57) Expr -> . Var
    (58) Expr -> . ExprIncDec
    (59) Expr -> . NUM
    (60) Expr -> . Expr SUM Expr
    (61) Expr -> . Expr SUB Expr
    (62) Expr -> . Expr MULT Expr
    (63) Expr -> . Expr DIV Expr
    (64) Expr -> . Expr MOD Expr
    (67) Var -> . ID
    (68) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (65) ExprIncDec -> . ID INC
    (66) ExprIncDec -> . ID DEC

    NUM             shift and go to state 55
    ID              shift and go to state 50

    Expr                           shift and go to state 150
    Var                            shift and go to state 53
    ExprIncDec                     shift and go to state 54

state 147

    (33) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .
    (34) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent . ELSE COLON Newline INDENT Corpo DEDENT
    (10) Dedent -> Dedent . DEDENT

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for DEDENT resolved as shift
    NEWLINE         reduce using rule 33 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ID              reduce using rule 33 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    IF              reduce using rule 33 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    CALL            reduce using rule 33 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ASSERT          reduce using rule 33 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    PRINT           reduce using rule 33 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    WHILE           reduce using rule 33 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    DO              reduce using rule 33 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ENDMARKER       reduce using rule 33 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ELSE            shift and go to state 151
    DEDENT          shift and go to state 138

  ! DEDENT          [ reduce using rule 33 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .) ]
  ! ELSE            [ reduce using rule 33 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .) ]


state 148

    (38) While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .
    (10) Dedent -> Dedent . DEDENT

  ! shift/reduce conflict for DEDENT resolved as shift
    NEWLINE         reduce using rule 38 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ID              reduce using rule 38 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    IF              reduce using rule 38 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    CALL            reduce using rule 38 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ASSERT          reduce using rule 38 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    PRINT           reduce using rule 38 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    WHILE           reduce using rule 38 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    DO              reduce using rule 38 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ENDMARKER       reduce using rule 38 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ELSE            reduce using rule 38 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    DEDENT          shift and go to state 138

  ! DEDENT          [ reduce using rule 38 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .) ]


state 149

    (37) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond . RCPARENT NEWLINE

    RCPARENT        shift and go to state 152


state 150

    (23) ArrayIntValues -> ArrayIntValues , Expr .
    (60) Expr -> Expr . SUM Expr
    (61) Expr -> Expr . SUB Expr
    (62) Expr -> Expr . MULT Expr
    (63) Expr -> Expr . DIV Expr
    (64) Expr -> Expr . MOD Expr

    RCURLBRACKET    reduce using rule 23 (ArrayIntValues -> ArrayIntValues , Expr .)
    ,               reduce using rule 23 (ArrayIntValues -> ArrayIntValues , Expr .)
    SUM             shift and go to state 76
    SUB             shift and go to state 77
    MULT            shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80


state 151

    (34) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE . COLON Newline INDENT Corpo DEDENT

    COLON           shift and go to state 153


state 152

    (37) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT . NEWLINE

    NEWLINE         shift and go to state 154


state 153

    (34) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON . Newline INDENT Corpo DEDENT
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (7) Empty -> .

    NEWLINE         shift and go to state 14
    INDENT          reduce using rule 7 (Empty -> .)

    Newline                        shift and go to state 155
    Empty                          shift and go to state 15

state 154

    (37) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .

    NEWLINE         reduce using rule 37 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    ID              reduce using rule 37 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    IF              reduce using rule 37 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    CALL            reduce using rule 37 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    ASSERT          reduce using rule 37 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    PRINT           reduce using rule 37 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    WHILE           reduce using rule 37 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    DO              reduce using rule 37 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    ENDMARKER       reduce using rule 37 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    DEDENT          reduce using rule 37 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    ELSE            reduce using rule 37 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)


state 155

    (34) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline . INDENT Corpo DEDENT

    INDENT          shift and go to state 156


state 156

    (34) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT . Corpo DEDENT
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (8) Newline -> . NEWLINE
    (9) Newline -> . Empty
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (7) Empty -> .
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    NEWLINE         shift and go to state 14
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    DEDENT          reduce using rule 7 (Empty -> .)
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

  ! ID              [ reduce using rule 7 (Empty -> .) ]
  ! IF              [ reduce using rule 7 (Empty -> .) ]
  ! CALL            [ reduce using rule 7 (Empty -> .) ]
  ! ASSERT          [ reduce using rule 7 (Empty -> .) ]
  ! PRINT           [ reduce using rule 7 (Empty -> .) ]
  ! WHILE           [ reduce using rule 7 (Empty -> .) ]
  ! DO              [ reduce using rule 7 (Empty -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 157
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    Empty                          shift and go to state 15
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 157

    (34) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo . DEDENT
    (5) Corpo -> Corpo . Proc Newline
    (25) Proc -> . Atrib
    (26) Proc -> . Print
    (27) Proc -> . If
    (28) Proc -> . Cycle
    (29) Proc -> . Call
    (30) Proc -> . Assert
    (48) Atrib -> . ID ATRIB Expr
    (49) Atrib -> . ID ATRIB Input
    (50) Atrib -> . ID INC
    (51) Atrib -> . ID DEC
    (52) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (53) Print -> . NonFormatted
    (33) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (34) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (35) Cycle -> . While
    (36) Cycle -> . DoWhile
    (31) Call -> . CALL
    (32) Assert -> . ASSERT LCPARENT Cond RCPARENT
    (54) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (38) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (37) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

    DEDENT          shift and go to state 158
    ID              shift and go to state 17
    IF              shift and go to state 20
    CALL            shift and go to state 23
    ASSERT          shift and go to state 24
    PRINT           shift and go to state 26
    WHILE           shift and go to state 27
    DO              shift and go to state 28

    Proc                           shift and go to state 30
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Assert                         shift and go to state 13
    NonFormatted                   shift and go to state 19
    While                          shift and go to state 21
    DoWhile                        shift and go to state 22

state 158

    (34) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .

    NEWLINE         reduce using rule 34 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    ID              reduce using rule 34 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    IF              reduce using rule 34 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    CALL            reduce using rule 34 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    ASSERT          reduce using rule 34 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    PRINT           reduce using rule 34 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    WHILE           reduce using rule 34 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    DO              reduce using rule 34 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    ENDMARKER       reduce using rule 34 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    DEDENT          reduce using rule 34 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    ELSE            reduce using rule 34 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for CALL in state 0 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for DO in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for CALL in state 4 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 4 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 4 resolved as shift
WARNING: shift/reduce conflict for DO in state 4 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 5 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 7 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 30 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 32 resolved as shift
WARNING: shift/reduce conflict for ID in state 98 resolved as shift
WARNING: shift/reduce conflict for IF in state 98 resolved as shift
WARNING: shift/reduce conflict for CALL in state 98 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 98 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 98 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 98 resolved as shift
WARNING: shift/reduce conflict for DO in state 98 resolved as shift
WARNING: shift/reduce conflict for ID in state 117 resolved as shift
WARNING: shift/reduce conflict for IF in state 117 resolved as shift
WARNING: shift/reduce conflict for CALL in state 117 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 117 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 117 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 117 resolved as shift
WARNING: shift/reduce conflict for DO in state 117 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 120 resolved as shift
WARNING: shift/reduce conflict for ID in state 127 resolved as shift
WARNING: shift/reduce conflict for IF in state 127 resolved as shift
WARNING: shift/reduce conflict for CALL in state 127 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 127 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 127 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 127 resolved as shift
WARNING: shift/reduce conflict for DO in state 127 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for IF in state 133 resolved as shift
WARNING: shift/reduce conflict for CALL in state 133 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 133 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 133 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 133 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 133 resolved as shift
WARNING: shift/reduce conflict for DO in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 136 resolved as shift
WARNING: shift/reduce conflict for IF in state 136 resolved as shift
WARNING: shift/reduce conflict for CALL in state 136 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 136 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 136 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 136 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 136 resolved as shift
WARNING: shift/reduce conflict for DO in state 136 resolved as shift
WARNING: shift/reduce conflict for ID in state 141 resolved as shift
WARNING: shift/reduce conflict for IF in state 141 resolved as shift
WARNING: shift/reduce conflict for CALL in state 141 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 141 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 141 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 141 resolved as shift
WARNING: shift/reduce conflict for DO in state 141 resolved as shift
WARNING: shift/reduce conflict for ID in state 143 resolved as shift
WARNING: shift/reduce conflict for IF in state 143 resolved as shift
WARNING: shift/reduce conflict for CALL in state 143 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 143 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 143 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 143 resolved as shift
WARNING: shift/reduce conflict for DO in state 143 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 147 resolved as shift
WARNING: shift/reduce conflict for DEDENT in state 147 resolved as shift
WARNING: shift/reduce conflict for DEDENT in state 148 resolved as shift
WARNING: shift/reduce conflict for ID in state 156 resolved as shift
WARNING: shift/reduce conflict for IF in state 156 resolved as shift
WARNING: shift/reduce conflict for CALL in state 156 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 156 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 156 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 156 resolved as shift
WARNING: shift/reduce conflict for DO in state 156 resolved as shift
