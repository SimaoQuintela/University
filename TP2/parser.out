Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LSQBRACKET
    RSQBRACKET
    WS

Grammar

Rule 0     S' -> ProgramaInit
Rule 1     ProgramaInit -> Programa ENDMARKER
Rule 2     Programa -> Corpo
Rule 3     Programa -> Decls Corpo
Rule 4     Corpo -> Proc Newline
Rule 5     Corpo -> Corpo Proc Newline
Rule 6     Corpo -> Newline
Rule 7     Newline -> <empty>
Rule 8     Newline -> NEWLINE
Rule 9     Dedent -> Dedent DEDENT
Rule 10    Dedent -> <empty>
Rule 11    Decls -> Decl Newline
Rule 12    Decls -> Decls Decl Newline
Rule 13    Decl -> INTDec ID
Rule 14    Decl -> INTDec ID ATRIB NUM
Rule 15    Decl -> INTDec ID ATRIB Input
Rule 16    Decl -> Def
Rule 17    Def -> DEF ID COLON Newline INDENT Corpo DEDENT
Rule 18    Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT
Rule 19    Proc -> Atrib
Rule 20    Proc -> Print
Rule 21    Proc -> If
Rule 22    Proc -> Cycle
Rule 23    Cycle -> DoWhile
Rule 24    Cycle -> While
Rule 25    Proc -> Call
Rule 26    Call -> CALL
Rule 27    If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
Rule 28    If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
Rule 29    DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
Rule 30    While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
Rule 31    Cond -> Expr GT Expr
Rule 32    Cond -> Expr LT Expr
Rule 33    Cond -> Expr GEQ Expr
Rule 34    Cond -> Expr LEQ Expr
Rule 35    Cond -> Expr EQUIV Expr
Rule 36    Cond -> Expr NEQ Expr
Rule 37    Cond -> Cond OR Cond
Rule 38    Cond -> Expr AND Expr
Rule 39    Cond -> NOT Cond
Rule 40    Atrib -> ID ATRIB Expr
Rule 41    Atrib -> ID ATRIB Input
Rule 42    Atrib -> ID INC
Rule 43    Atrib -> ID DEC
Rule 44    Print -> NonFormatted
Rule 45    NonFormatted -> PRINT LCPARENT Argument RCPARENT
Rule 46    Argument -> String
Rule 47    Argument -> Var
Rule 48    Argument -> Expr
Rule 49    Expr -> Var
Rule 50    Expr -> ExprInc
Rule 51    Expr -> NUM
Rule 52    Expr -> Expr SUM Expr
Rule 53    Expr -> Expr SUB Expr
Rule 54    Expr -> Expr MULT Expr
Rule 55    Expr -> Expr DIV Expr
Rule 56    Expr -> Expr MOD Expr
Rule 57    ExprInc -> ID INC
Rule 58    Expr -> ID DEC
Rule 59    Var -> ID
Rule 60    Input -> INPUT LCPARENT String RCPARENT
Rule 61    String -> QUOTE STRING QUOTE
Rule 62    String -> <empty>

Terminals, with rules where they appear

AND                  : 38
ATRIB                : 14 15 40 41
CALL                 : 26
COLON                : 17 18 27 28 28 29 30
DEC                  : 43 58
DEDENT               : 9 17 18 28
DEF                  : 17 18
DIV                  : 55
DO                   : 29
ELSE                 : 28
ENDMARKER            : 1
EQUIV                : 35
GEQ                  : 33
GT                   : 31
ID                   : 13 14 15 17 18 40 41 42 43 57 58 59
IF                   : 27 28
INC                  : 42 57
INDENT               : 17 18 27 28 28 29 30
INPUT                : 60
INTDec               : 13 14 15
LCPARENT             : 27 28 29 30 45 60
LEQ                  : 34
LSQBRACKET           : 
LT                   : 32
MOD                  : 56
MULT                 : 54
NEQ                  : 36
NEWLINE              : 8 29
NOT                  : 39
NUM                  : 14 51
OR                   : 37
PRINT                : 45
QUOTE                : 61 61
RCPARENT             : 27 28 29 30 45 60
RSQBRACKET           : 
STRING               : 61
SUB                  : 53
SUM                  : 52
WHILE                : 29 30
WS                   : 
error                : 

Nonterminals, with rules where they appear

Argument             : 45
Atrib                : 19
Call                 : 25
Cond                 : 27 28 29 30 37 37 39
Corpo                : 2 3 5 17 18 27 28 28 29 30
Cycle                : 22
Decl                 : 11 12
Decls                : 3 12 18
Dedent               : 9 27 28 29 30
Def                  : 16
DoWhile              : 23
Expr                 : 31 31 32 32 33 33 34 34 35 35 36 36 38 38 40 48 52 52 53 53 54 54 55 55 56 56
ExprInc              : 50
If                   : 21
Input                : 15 41
Newline              : 4 5 6 11 12 17 18 27 28 28 29 30
NonFormatted         : 44
Print                : 20
Proc                 : 4 5
Programa             : 1
ProgramaInit         : 0
String               : 46 60
Var                  : 47 49
While                : 24

Parsing method: LALR

state 0

    (0) S' -> . ProgramaInit
    (1) ProgramaInit -> . Programa ENDMARKER
    (2) Programa -> . Corpo
    (3) Programa -> . Decls Corpo
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (11) Decls -> . Decl Newline
    (12) Decls -> . Decls Decl Newline
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (13) Decl -> . INTDec ID
    (14) Decl -> . INTDec ID ATRIB NUM
    (15) Decl -> . INTDec ID ATRIB Input
    (16) Decl -> . Def
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (17) Def -> . DEF ID COLON Newline INDENT Corpo DEDENT
    (18) Def -> . DEF ID COLON Newline INDENT Decls Corpo DEDENT
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ENDMARKER       reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13
    INTDec          shift and go to state 14
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    DEF             shift and go to state 22
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! CALL            [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! WHILE           [ reduce using rule 7 (Newline -> .) ]

    ProgramaInit                   shift and go to state 1
    Programa                       shift and go to state 2
    Corpo                          shift and go to state 3
    Decls                          shift and go to state 4
    Proc                           shift and go to state 5
    Newline                        shift and go to state 6
    Decl                           shift and go to state 7
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Def                            shift and go to state 16
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 1

    (0) S' -> ProgramaInit .



state 2

    (1) ProgramaInit -> Programa . ENDMARKER

    ENDMARKER       shift and go to state 26


state 3

    (2) Programa -> Corpo .
    (5) Corpo -> Corpo . Proc Newline
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

    ENDMARKER       reduce using rule 2 (Programa -> Corpo .)
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

    Proc                           shift and go to state 27
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 4

    (3) Programa -> Decls . Corpo
    (12) Decls -> Decls . Decl Newline
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (13) Decl -> . INTDec ID
    (14) Decl -> . INTDec ID ATRIB NUM
    (15) Decl -> . INTDec ID ATRIB Input
    (16) Decl -> . Def
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (17) Def -> . DEF ID COLON Newline INDENT Corpo DEDENT
    (18) Def -> . DEF ID COLON Newline INDENT Decls Corpo DEDENT
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    INTDec          shift and go to state 14
    ENDMARKER       reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13
    DEF             shift and go to state 22
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! CALL            [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! WHILE           [ reduce using rule 7 (Newline -> .) ]

    Corpo                          shift and go to state 28
    Decl                           shift and go to state 29
    Newline                        shift and go to state 6
    Proc                           shift and go to state 5
    Def                            shift and go to state 16
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 5

    (4) Corpo -> Proc . Newline
    (7) Newline -> .
    (8) Newline -> . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    ID              reduce using rule 7 (Newline -> .)
    IF              reduce using rule 7 (Newline -> .)
    CALL            reduce using rule 7 (Newline -> .)
    PRINT           reduce using rule 7 (Newline -> .)
    DO              reduce using rule 7 (Newline -> .)
    WHILE           reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    DEDENT          reduce using rule 7 (Newline -> .)
    ELSE            reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13

  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 30

state 6

    (6) Corpo -> Newline .

    ID              reduce using rule 6 (Corpo -> Newline .)
    IF              reduce using rule 6 (Corpo -> Newline .)
    CALL            reduce using rule 6 (Corpo -> Newline .)
    PRINT           reduce using rule 6 (Corpo -> Newline .)
    DO              reduce using rule 6 (Corpo -> Newline .)
    WHILE           reduce using rule 6 (Corpo -> Newline .)
    ENDMARKER       reduce using rule 6 (Corpo -> Newline .)
    DEDENT          reduce using rule 6 (Corpo -> Newline .)
    ELSE            reduce using rule 6 (Corpo -> Newline .)
    NEWLINE         reduce using rule 6 (Corpo -> Newline .)


state 7

    (11) Decls -> Decl . Newline
    (7) Newline -> .
    (8) Newline -> . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    INTDec          reduce using rule 7 (Newline -> .)
    DEF             reduce using rule 7 (Newline -> .)
    ID              reduce using rule 7 (Newline -> .)
    IF              reduce using rule 7 (Newline -> .)
    CALL            reduce using rule 7 (Newline -> .)
    PRINT           reduce using rule 7 (Newline -> .)
    DO              reduce using rule 7 (Newline -> .)
    WHILE           reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    DEDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13

  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 31

state 8

    (19) Proc -> Atrib .

    NEWLINE         reduce using rule 19 (Proc -> Atrib .)
    ID              reduce using rule 19 (Proc -> Atrib .)
    IF              reduce using rule 19 (Proc -> Atrib .)
    CALL            reduce using rule 19 (Proc -> Atrib .)
    PRINT           reduce using rule 19 (Proc -> Atrib .)
    DO              reduce using rule 19 (Proc -> Atrib .)
    WHILE           reduce using rule 19 (Proc -> Atrib .)
    ENDMARKER       reduce using rule 19 (Proc -> Atrib .)
    DEDENT          reduce using rule 19 (Proc -> Atrib .)
    ELSE            reduce using rule 19 (Proc -> Atrib .)


state 9

    (20) Proc -> Print .

    NEWLINE         reduce using rule 20 (Proc -> Print .)
    ID              reduce using rule 20 (Proc -> Print .)
    IF              reduce using rule 20 (Proc -> Print .)
    CALL            reduce using rule 20 (Proc -> Print .)
    PRINT           reduce using rule 20 (Proc -> Print .)
    DO              reduce using rule 20 (Proc -> Print .)
    WHILE           reduce using rule 20 (Proc -> Print .)
    ENDMARKER       reduce using rule 20 (Proc -> Print .)
    DEDENT          reduce using rule 20 (Proc -> Print .)
    ELSE            reduce using rule 20 (Proc -> Print .)


state 10

    (21) Proc -> If .

    NEWLINE         reduce using rule 21 (Proc -> If .)
    ID              reduce using rule 21 (Proc -> If .)
    IF              reduce using rule 21 (Proc -> If .)
    CALL            reduce using rule 21 (Proc -> If .)
    PRINT           reduce using rule 21 (Proc -> If .)
    DO              reduce using rule 21 (Proc -> If .)
    WHILE           reduce using rule 21 (Proc -> If .)
    ENDMARKER       reduce using rule 21 (Proc -> If .)
    DEDENT          reduce using rule 21 (Proc -> If .)
    ELSE            reduce using rule 21 (Proc -> If .)


state 11

    (22) Proc -> Cycle .

    NEWLINE         reduce using rule 22 (Proc -> Cycle .)
    ID              reduce using rule 22 (Proc -> Cycle .)
    IF              reduce using rule 22 (Proc -> Cycle .)
    CALL            reduce using rule 22 (Proc -> Cycle .)
    PRINT           reduce using rule 22 (Proc -> Cycle .)
    DO              reduce using rule 22 (Proc -> Cycle .)
    WHILE           reduce using rule 22 (Proc -> Cycle .)
    ENDMARKER       reduce using rule 22 (Proc -> Cycle .)
    DEDENT          reduce using rule 22 (Proc -> Cycle .)
    ELSE            reduce using rule 22 (Proc -> Cycle .)


state 12

    (25) Proc -> Call .

    NEWLINE         reduce using rule 25 (Proc -> Call .)
    ID              reduce using rule 25 (Proc -> Call .)
    IF              reduce using rule 25 (Proc -> Call .)
    CALL            reduce using rule 25 (Proc -> Call .)
    PRINT           reduce using rule 25 (Proc -> Call .)
    DO              reduce using rule 25 (Proc -> Call .)
    WHILE           reduce using rule 25 (Proc -> Call .)
    ENDMARKER       reduce using rule 25 (Proc -> Call .)
    DEDENT          reduce using rule 25 (Proc -> Call .)
    ELSE            reduce using rule 25 (Proc -> Call .)


state 13

    (8) Newline -> NEWLINE .

    ID              reduce using rule 8 (Newline -> NEWLINE .)
    IF              reduce using rule 8 (Newline -> NEWLINE .)
    CALL            reduce using rule 8 (Newline -> NEWLINE .)
    PRINT           reduce using rule 8 (Newline -> NEWLINE .)
    DO              reduce using rule 8 (Newline -> NEWLINE .)
    WHILE           reduce using rule 8 (Newline -> NEWLINE .)
    ENDMARKER       reduce using rule 8 (Newline -> NEWLINE .)
    DEDENT          reduce using rule 8 (Newline -> NEWLINE .)
    ELSE            reduce using rule 8 (Newline -> NEWLINE .)
    NEWLINE         reduce using rule 8 (Newline -> NEWLINE .)
    INTDec          reduce using rule 8 (Newline -> NEWLINE .)
    DEF             reduce using rule 8 (Newline -> NEWLINE .)
    INDENT          reduce using rule 8 (Newline -> NEWLINE .)


state 14

    (13) Decl -> INTDec . ID
    (14) Decl -> INTDec . ID ATRIB NUM
    (15) Decl -> INTDec . ID ATRIB Input

    ID              shift and go to state 32


state 15

    (40) Atrib -> ID . ATRIB Expr
    (41) Atrib -> ID . ATRIB Input
    (42) Atrib -> ID . INC
    (43) Atrib -> ID . DEC

    ATRIB           shift and go to state 33
    INC             shift and go to state 34
    DEC             shift and go to state 35


state 16

    (16) Decl -> Def .

    NEWLINE         reduce using rule 16 (Decl -> Def .)
    INTDec          reduce using rule 16 (Decl -> Def .)
    DEF             reduce using rule 16 (Decl -> Def .)
    ID              reduce using rule 16 (Decl -> Def .)
    IF              reduce using rule 16 (Decl -> Def .)
    CALL            reduce using rule 16 (Decl -> Def .)
    PRINT           reduce using rule 16 (Decl -> Def .)
    DO              reduce using rule 16 (Decl -> Def .)
    WHILE           reduce using rule 16 (Decl -> Def .)
    ENDMARKER       reduce using rule 16 (Decl -> Def .)
    DEDENT          reduce using rule 16 (Decl -> Def .)


state 17

    (44) Print -> NonFormatted .

    NEWLINE         reduce using rule 44 (Print -> NonFormatted .)
    ID              reduce using rule 44 (Print -> NonFormatted .)
    IF              reduce using rule 44 (Print -> NonFormatted .)
    CALL            reduce using rule 44 (Print -> NonFormatted .)
    PRINT           reduce using rule 44 (Print -> NonFormatted .)
    DO              reduce using rule 44 (Print -> NonFormatted .)
    WHILE           reduce using rule 44 (Print -> NonFormatted .)
    ENDMARKER       reduce using rule 44 (Print -> NonFormatted .)
    DEDENT          reduce using rule 44 (Print -> NonFormatted .)
    ELSE            reduce using rule 44 (Print -> NonFormatted .)


state 18

    (27) If -> IF . LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> IF . LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT

    LCPARENT        shift and go to state 36


state 19

    (23) Cycle -> DoWhile .

    NEWLINE         reduce using rule 23 (Cycle -> DoWhile .)
    ID              reduce using rule 23 (Cycle -> DoWhile .)
    IF              reduce using rule 23 (Cycle -> DoWhile .)
    CALL            reduce using rule 23 (Cycle -> DoWhile .)
    PRINT           reduce using rule 23 (Cycle -> DoWhile .)
    DO              reduce using rule 23 (Cycle -> DoWhile .)
    WHILE           reduce using rule 23 (Cycle -> DoWhile .)
    ENDMARKER       reduce using rule 23 (Cycle -> DoWhile .)
    DEDENT          reduce using rule 23 (Cycle -> DoWhile .)
    ELSE            reduce using rule 23 (Cycle -> DoWhile .)


state 20

    (24) Cycle -> While .

    NEWLINE         reduce using rule 24 (Cycle -> While .)
    ID              reduce using rule 24 (Cycle -> While .)
    IF              reduce using rule 24 (Cycle -> While .)
    CALL            reduce using rule 24 (Cycle -> While .)
    PRINT           reduce using rule 24 (Cycle -> While .)
    DO              reduce using rule 24 (Cycle -> While .)
    WHILE           reduce using rule 24 (Cycle -> While .)
    ENDMARKER       reduce using rule 24 (Cycle -> While .)
    DEDENT          reduce using rule 24 (Cycle -> While .)
    ELSE            reduce using rule 24 (Cycle -> While .)


state 21

    (26) Call -> CALL .

    NEWLINE         reduce using rule 26 (Call -> CALL .)
    ID              reduce using rule 26 (Call -> CALL .)
    IF              reduce using rule 26 (Call -> CALL .)
    CALL            reduce using rule 26 (Call -> CALL .)
    PRINT           reduce using rule 26 (Call -> CALL .)
    DO              reduce using rule 26 (Call -> CALL .)
    WHILE           reduce using rule 26 (Call -> CALL .)
    ENDMARKER       reduce using rule 26 (Call -> CALL .)
    DEDENT          reduce using rule 26 (Call -> CALL .)
    ELSE            reduce using rule 26 (Call -> CALL .)


state 22

    (17) Def -> DEF . ID COLON Newline INDENT Corpo DEDENT
    (18) Def -> DEF . ID COLON Newline INDENT Decls Corpo DEDENT

    ID              shift and go to state 37


state 23

    (45) NonFormatted -> PRINT . LCPARENT Argument RCPARENT

    LCPARENT        shift and go to state 38


state 24

    (29) DoWhile -> DO . COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

    COLON           shift and go to state 39


state 25

    (30) While -> WHILE . LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

    LCPARENT        shift and go to state 40


state 26

    (1) ProgramaInit -> Programa ENDMARKER .

    $end            reduce using rule 1 (ProgramaInit -> Programa ENDMARKER .)


state 27

    (5) Corpo -> Corpo Proc . Newline
    (7) Newline -> .
    (8) Newline -> . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    ID              reduce using rule 7 (Newline -> .)
    IF              reduce using rule 7 (Newline -> .)
    CALL            reduce using rule 7 (Newline -> .)
    PRINT           reduce using rule 7 (Newline -> .)
    DO              reduce using rule 7 (Newline -> .)
    WHILE           reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    DEDENT          reduce using rule 7 (Newline -> .)
    ELSE            reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13

  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 41

state 28

    (3) Programa -> Decls Corpo .
    (5) Corpo -> Corpo . Proc Newline
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

    ENDMARKER       reduce using rule 3 (Programa -> Decls Corpo .)
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

    Proc                           shift and go to state 27
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 29

    (12) Decls -> Decls Decl . Newline
    (7) Newline -> .
    (8) Newline -> . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    INTDec          reduce using rule 7 (Newline -> .)
    DEF             reduce using rule 7 (Newline -> .)
    ID              reduce using rule 7 (Newline -> .)
    IF              reduce using rule 7 (Newline -> .)
    CALL            reduce using rule 7 (Newline -> .)
    PRINT           reduce using rule 7 (Newline -> .)
    DO              reduce using rule 7 (Newline -> .)
    WHILE           reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    DEDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13

  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 42

state 30

    (4) Corpo -> Proc Newline .

    ID              reduce using rule 4 (Corpo -> Proc Newline .)
    IF              reduce using rule 4 (Corpo -> Proc Newline .)
    CALL            reduce using rule 4 (Corpo -> Proc Newline .)
    PRINT           reduce using rule 4 (Corpo -> Proc Newline .)
    DO              reduce using rule 4 (Corpo -> Proc Newline .)
    WHILE           reduce using rule 4 (Corpo -> Proc Newline .)
    ENDMARKER       reduce using rule 4 (Corpo -> Proc Newline .)
    DEDENT          reduce using rule 4 (Corpo -> Proc Newline .)
    ELSE            reduce using rule 4 (Corpo -> Proc Newline .)
    NEWLINE         reduce using rule 4 (Corpo -> Proc Newline .)


state 31

    (11) Decls -> Decl Newline .

    INTDec          reduce using rule 11 (Decls -> Decl Newline .)
    NEWLINE         reduce using rule 11 (Decls -> Decl Newline .)
    DEF             reduce using rule 11 (Decls -> Decl Newline .)
    ID              reduce using rule 11 (Decls -> Decl Newline .)
    IF              reduce using rule 11 (Decls -> Decl Newline .)
    CALL            reduce using rule 11 (Decls -> Decl Newline .)
    PRINT           reduce using rule 11 (Decls -> Decl Newline .)
    DO              reduce using rule 11 (Decls -> Decl Newline .)
    WHILE           reduce using rule 11 (Decls -> Decl Newline .)
    ENDMARKER       reduce using rule 11 (Decls -> Decl Newline .)
    DEDENT          reduce using rule 11 (Decls -> Decl Newline .)


state 32

    (13) Decl -> INTDec ID .
    (14) Decl -> INTDec ID . ATRIB NUM
    (15) Decl -> INTDec ID . ATRIB Input

    NEWLINE         reduce using rule 13 (Decl -> INTDec ID .)
    INTDec          reduce using rule 13 (Decl -> INTDec ID .)
    DEF             reduce using rule 13 (Decl -> INTDec ID .)
    ID              reduce using rule 13 (Decl -> INTDec ID .)
    IF              reduce using rule 13 (Decl -> INTDec ID .)
    CALL            reduce using rule 13 (Decl -> INTDec ID .)
    PRINT           reduce using rule 13 (Decl -> INTDec ID .)
    DO              reduce using rule 13 (Decl -> INTDec ID .)
    WHILE           reduce using rule 13 (Decl -> INTDec ID .)
    ENDMARKER       reduce using rule 13 (Decl -> INTDec ID .)
    DEDENT          reduce using rule 13 (Decl -> INTDec ID .)
    ATRIB           shift and go to state 43


state 33

    (40) Atrib -> ID ATRIB . Expr
    (41) Atrib -> ID ATRIB . Input
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (60) Input -> . INPUT LCPARENT String RCPARENT
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NUM             shift and go to state 49
    ID              shift and go to state 44
    INPUT           shift and go to state 50

    Expr                           shift and go to state 45
    Input                          shift and go to state 46
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 34

    (42) Atrib -> ID INC .

    NEWLINE         reduce using rule 42 (Atrib -> ID INC .)
    ID              reduce using rule 42 (Atrib -> ID INC .)
    IF              reduce using rule 42 (Atrib -> ID INC .)
    CALL            reduce using rule 42 (Atrib -> ID INC .)
    PRINT           reduce using rule 42 (Atrib -> ID INC .)
    DO              reduce using rule 42 (Atrib -> ID INC .)
    WHILE           reduce using rule 42 (Atrib -> ID INC .)
    ENDMARKER       reduce using rule 42 (Atrib -> ID INC .)
    DEDENT          reduce using rule 42 (Atrib -> ID INC .)
    ELSE            reduce using rule 42 (Atrib -> ID INC .)


state 35

    (43) Atrib -> ID DEC .

    NEWLINE         reduce using rule 43 (Atrib -> ID DEC .)
    ID              reduce using rule 43 (Atrib -> ID DEC .)
    IF              reduce using rule 43 (Atrib -> ID DEC .)
    CALL            reduce using rule 43 (Atrib -> ID DEC .)
    PRINT           reduce using rule 43 (Atrib -> ID DEC .)
    DO              reduce using rule 43 (Atrib -> ID DEC .)
    WHILE           reduce using rule 43 (Atrib -> ID DEC .)
    ENDMARKER       reduce using rule 43 (Atrib -> ID DEC .)
    DEDENT          reduce using rule 43 (Atrib -> ID DEC .)
    ELSE            reduce using rule 43 (Atrib -> ID DEC .)


state 36

    (27) If -> IF LCPARENT . Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> IF LCPARENT . Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (31) Cond -> . Expr GT Expr
    (32) Cond -> . Expr LT Expr
    (33) Cond -> . Expr GEQ Expr
    (34) Cond -> . Expr LEQ Expr
    (35) Cond -> . Expr EQUIV Expr
    (36) Cond -> . Expr NEQ Expr
    (37) Cond -> . Cond OR Cond
    (38) Cond -> . Expr AND Expr
    (39) Cond -> . NOT Cond
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NOT             shift and go to state 53
    NUM             shift and go to state 49
    ID              shift and go to state 44

    Cond                           shift and go to state 51
    Expr                           shift and go to state 52
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 37

    (17) Def -> DEF ID . COLON Newline INDENT Corpo DEDENT
    (18) Def -> DEF ID . COLON Newline INDENT Decls Corpo DEDENT

    COLON           shift and go to state 54


state 38

    (45) NonFormatted -> PRINT LCPARENT . Argument RCPARENT
    (46) Argument -> . String
    (47) Argument -> . Var
    (48) Argument -> . Expr
    (61) String -> . QUOTE STRING QUOTE
    (62) String -> .
    (59) Var -> . ID
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (57) ExprInc -> . ID INC

    QUOTE           shift and go to state 59
    RCPARENT        reduce using rule 62 (String -> .)
    ID              shift and go to state 60
    NUM             shift and go to state 49

    Argument                       shift and go to state 55
    String                         shift and go to state 56
    Var                            shift and go to state 57
    Expr                           shift and go to state 58
    ExprInc                        shift and go to state 48

state 39

    (29) DoWhile -> DO COLON . Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (7) Newline -> .
    (8) Newline -> . NEWLINE

    INDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13

    Newline                        shift and go to state 61

state 40

    (30) While -> WHILE LCPARENT . Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (31) Cond -> . Expr GT Expr
    (32) Cond -> . Expr LT Expr
    (33) Cond -> . Expr GEQ Expr
    (34) Cond -> . Expr LEQ Expr
    (35) Cond -> . Expr EQUIV Expr
    (36) Cond -> . Expr NEQ Expr
    (37) Cond -> . Cond OR Cond
    (38) Cond -> . Expr AND Expr
    (39) Cond -> . NOT Cond
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NOT             shift and go to state 53
    NUM             shift and go to state 49
    ID              shift and go to state 44

    Cond                           shift and go to state 62
    Expr                           shift and go to state 52
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 41

    (5) Corpo -> Corpo Proc Newline .

    ID              reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    IF              reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    CALL            reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    PRINT           reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    DO              reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    WHILE           reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    ENDMARKER       reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    DEDENT          reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    ELSE            reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    NEWLINE         reduce using rule 5 (Corpo -> Corpo Proc Newline .)


state 42

    (12) Decls -> Decls Decl Newline .

    INTDec          reduce using rule 12 (Decls -> Decls Decl Newline .)
    NEWLINE         reduce using rule 12 (Decls -> Decls Decl Newline .)
    DEF             reduce using rule 12 (Decls -> Decls Decl Newline .)
    ID              reduce using rule 12 (Decls -> Decls Decl Newline .)
    IF              reduce using rule 12 (Decls -> Decls Decl Newline .)
    CALL            reduce using rule 12 (Decls -> Decls Decl Newline .)
    PRINT           reduce using rule 12 (Decls -> Decls Decl Newline .)
    DO              reduce using rule 12 (Decls -> Decls Decl Newline .)
    WHILE           reduce using rule 12 (Decls -> Decls Decl Newline .)
    ENDMARKER       reduce using rule 12 (Decls -> Decls Decl Newline .)
    DEDENT          reduce using rule 12 (Decls -> Decls Decl Newline .)


state 43

    (14) Decl -> INTDec ID ATRIB . NUM
    (15) Decl -> INTDec ID ATRIB . Input
    (60) Input -> . INPUT LCPARENT String RCPARENT

    NUM             shift and go to state 63
    INPUT           shift and go to state 50

    Input                          shift and go to state 64

state 44

    (58) Expr -> ID . DEC
    (59) Var -> ID .
    (57) ExprInc -> ID . INC

    DEC             shift and go to state 65
    SUM             reduce using rule 59 (Var -> ID .)
    SUB             reduce using rule 59 (Var -> ID .)
    MULT            reduce using rule 59 (Var -> ID .)
    DIV             reduce using rule 59 (Var -> ID .)
    MOD             reduce using rule 59 (Var -> ID .)
    NEWLINE         reduce using rule 59 (Var -> ID .)
    ID              reduce using rule 59 (Var -> ID .)
    IF              reduce using rule 59 (Var -> ID .)
    CALL            reduce using rule 59 (Var -> ID .)
    PRINT           reduce using rule 59 (Var -> ID .)
    DO              reduce using rule 59 (Var -> ID .)
    WHILE           reduce using rule 59 (Var -> ID .)
    ENDMARKER       reduce using rule 59 (Var -> ID .)
    DEDENT          reduce using rule 59 (Var -> ID .)
    ELSE            reduce using rule 59 (Var -> ID .)
    GT              reduce using rule 59 (Var -> ID .)
    LT              reduce using rule 59 (Var -> ID .)
    GEQ             reduce using rule 59 (Var -> ID .)
    LEQ             reduce using rule 59 (Var -> ID .)
    EQUIV           reduce using rule 59 (Var -> ID .)
    NEQ             reduce using rule 59 (Var -> ID .)
    AND             reduce using rule 59 (Var -> ID .)
    RCPARENT        reduce using rule 59 (Var -> ID .)
    OR              reduce using rule 59 (Var -> ID .)
    INC             shift and go to state 66


state 45

    (40) Atrib -> ID ATRIB Expr .
    (52) Expr -> Expr . SUM Expr
    (53) Expr -> Expr . SUB Expr
    (54) Expr -> Expr . MULT Expr
    (55) Expr -> Expr . DIV Expr
    (56) Expr -> Expr . MOD Expr

    NEWLINE         reduce using rule 40 (Atrib -> ID ATRIB Expr .)
    ID              reduce using rule 40 (Atrib -> ID ATRIB Expr .)
    IF              reduce using rule 40 (Atrib -> ID ATRIB Expr .)
    CALL            reduce using rule 40 (Atrib -> ID ATRIB Expr .)
    PRINT           reduce using rule 40 (Atrib -> ID ATRIB Expr .)
    DO              reduce using rule 40 (Atrib -> ID ATRIB Expr .)
    WHILE           reduce using rule 40 (Atrib -> ID ATRIB Expr .)
    ENDMARKER       reduce using rule 40 (Atrib -> ID ATRIB Expr .)
    DEDENT          reduce using rule 40 (Atrib -> ID ATRIB Expr .)
    ELSE            reduce using rule 40 (Atrib -> ID ATRIB Expr .)
    SUM             shift and go to state 67
    SUB             shift and go to state 68
    MULT            shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71


state 46

    (41) Atrib -> ID ATRIB Input .

    NEWLINE         reduce using rule 41 (Atrib -> ID ATRIB Input .)
    ID              reduce using rule 41 (Atrib -> ID ATRIB Input .)
    IF              reduce using rule 41 (Atrib -> ID ATRIB Input .)
    CALL            reduce using rule 41 (Atrib -> ID ATRIB Input .)
    PRINT           reduce using rule 41 (Atrib -> ID ATRIB Input .)
    DO              reduce using rule 41 (Atrib -> ID ATRIB Input .)
    WHILE           reduce using rule 41 (Atrib -> ID ATRIB Input .)
    ENDMARKER       reduce using rule 41 (Atrib -> ID ATRIB Input .)
    DEDENT          reduce using rule 41 (Atrib -> ID ATRIB Input .)
    ELSE            reduce using rule 41 (Atrib -> ID ATRIB Input .)


state 47

    (49) Expr -> Var .

    SUM             reduce using rule 49 (Expr -> Var .)
    SUB             reduce using rule 49 (Expr -> Var .)
    MULT            reduce using rule 49 (Expr -> Var .)
    DIV             reduce using rule 49 (Expr -> Var .)
    MOD             reduce using rule 49 (Expr -> Var .)
    NEWLINE         reduce using rule 49 (Expr -> Var .)
    ID              reduce using rule 49 (Expr -> Var .)
    IF              reduce using rule 49 (Expr -> Var .)
    CALL            reduce using rule 49 (Expr -> Var .)
    PRINT           reduce using rule 49 (Expr -> Var .)
    DO              reduce using rule 49 (Expr -> Var .)
    WHILE           reduce using rule 49 (Expr -> Var .)
    ENDMARKER       reduce using rule 49 (Expr -> Var .)
    DEDENT          reduce using rule 49 (Expr -> Var .)
    ELSE            reduce using rule 49 (Expr -> Var .)
    GT              reduce using rule 49 (Expr -> Var .)
    LT              reduce using rule 49 (Expr -> Var .)
    GEQ             reduce using rule 49 (Expr -> Var .)
    LEQ             reduce using rule 49 (Expr -> Var .)
    EQUIV           reduce using rule 49 (Expr -> Var .)
    NEQ             reduce using rule 49 (Expr -> Var .)
    AND             reduce using rule 49 (Expr -> Var .)
    RCPARENT        reduce using rule 49 (Expr -> Var .)
    OR              reduce using rule 49 (Expr -> Var .)


state 48

    (50) Expr -> ExprInc .

    SUM             reduce using rule 50 (Expr -> ExprInc .)
    SUB             reduce using rule 50 (Expr -> ExprInc .)
    MULT            reduce using rule 50 (Expr -> ExprInc .)
    DIV             reduce using rule 50 (Expr -> ExprInc .)
    MOD             reduce using rule 50 (Expr -> ExprInc .)
    NEWLINE         reduce using rule 50 (Expr -> ExprInc .)
    ID              reduce using rule 50 (Expr -> ExprInc .)
    IF              reduce using rule 50 (Expr -> ExprInc .)
    CALL            reduce using rule 50 (Expr -> ExprInc .)
    PRINT           reduce using rule 50 (Expr -> ExprInc .)
    DO              reduce using rule 50 (Expr -> ExprInc .)
    WHILE           reduce using rule 50 (Expr -> ExprInc .)
    ENDMARKER       reduce using rule 50 (Expr -> ExprInc .)
    DEDENT          reduce using rule 50 (Expr -> ExprInc .)
    ELSE            reduce using rule 50 (Expr -> ExprInc .)
    GT              reduce using rule 50 (Expr -> ExprInc .)
    LT              reduce using rule 50 (Expr -> ExprInc .)
    GEQ             reduce using rule 50 (Expr -> ExprInc .)
    LEQ             reduce using rule 50 (Expr -> ExprInc .)
    EQUIV           reduce using rule 50 (Expr -> ExprInc .)
    NEQ             reduce using rule 50 (Expr -> ExprInc .)
    AND             reduce using rule 50 (Expr -> ExprInc .)
    RCPARENT        reduce using rule 50 (Expr -> ExprInc .)
    OR              reduce using rule 50 (Expr -> ExprInc .)


state 49

    (51) Expr -> NUM .

    SUM             reduce using rule 51 (Expr -> NUM .)
    SUB             reduce using rule 51 (Expr -> NUM .)
    MULT            reduce using rule 51 (Expr -> NUM .)
    DIV             reduce using rule 51 (Expr -> NUM .)
    MOD             reduce using rule 51 (Expr -> NUM .)
    NEWLINE         reduce using rule 51 (Expr -> NUM .)
    ID              reduce using rule 51 (Expr -> NUM .)
    IF              reduce using rule 51 (Expr -> NUM .)
    CALL            reduce using rule 51 (Expr -> NUM .)
    PRINT           reduce using rule 51 (Expr -> NUM .)
    DO              reduce using rule 51 (Expr -> NUM .)
    WHILE           reduce using rule 51 (Expr -> NUM .)
    ENDMARKER       reduce using rule 51 (Expr -> NUM .)
    DEDENT          reduce using rule 51 (Expr -> NUM .)
    ELSE            reduce using rule 51 (Expr -> NUM .)
    GT              reduce using rule 51 (Expr -> NUM .)
    LT              reduce using rule 51 (Expr -> NUM .)
    GEQ             reduce using rule 51 (Expr -> NUM .)
    LEQ             reduce using rule 51 (Expr -> NUM .)
    EQUIV           reduce using rule 51 (Expr -> NUM .)
    NEQ             reduce using rule 51 (Expr -> NUM .)
    AND             reduce using rule 51 (Expr -> NUM .)
    RCPARENT        reduce using rule 51 (Expr -> NUM .)
    OR              reduce using rule 51 (Expr -> NUM .)


state 50

    (60) Input -> INPUT . LCPARENT String RCPARENT

    LCPARENT        shift and go to state 72


state 51

    (27) If -> IF LCPARENT Cond . RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> IF LCPARENT Cond . RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (37) Cond -> Cond . OR Cond

    RCPARENT        shift and go to state 73
    OR              shift and go to state 74


state 52

    (31) Cond -> Expr . GT Expr
    (32) Cond -> Expr . LT Expr
    (33) Cond -> Expr . GEQ Expr
    (34) Cond -> Expr . LEQ Expr
    (35) Cond -> Expr . EQUIV Expr
    (36) Cond -> Expr . NEQ Expr
    (38) Cond -> Expr . AND Expr
    (52) Expr -> Expr . SUM Expr
    (53) Expr -> Expr . SUB Expr
    (54) Expr -> Expr . MULT Expr
    (55) Expr -> Expr . DIV Expr
    (56) Expr -> Expr . MOD Expr

    GT              shift and go to state 75
    LT              shift and go to state 76
    GEQ             shift and go to state 77
    LEQ             shift and go to state 78
    EQUIV           shift and go to state 79
    NEQ             shift and go to state 80
    AND             shift and go to state 81
    SUM             shift and go to state 67
    SUB             shift and go to state 68
    MULT            shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71


state 53

    (39) Cond -> NOT . Cond
    (31) Cond -> . Expr GT Expr
    (32) Cond -> . Expr LT Expr
    (33) Cond -> . Expr GEQ Expr
    (34) Cond -> . Expr LEQ Expr
    (35) Cond -> . Expr EQUIV Expr
    (36) Cond -> . Expr NEQ Expr
    (37) Cond -> . Cond OR Cond
    (38) Cond -> . Expr AND Expr
    (39) Cond -> . NOT Cond
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NOT             shift and go to state 53
    NUM             shift and go to state 49
    ID              shift and go to state 44

    Cond                           shift and go to state 82
    Expr                           shift and go to state 52
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 54

    (17) Def -> DEF ID COLON . Newline INDENT Corpo DEDENT
    (18) Def -> DEF ID COLON . Newline INDENT Decls Corpo DEDENT
    (7) Newline -> .
    (8) Newline -> . NEWLINE

    INDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13

    Newline                        shift and go to state 83

state 55

    (45) NonFormatted -> PRINT LCPARENT Argument . RCPARENT

    RCPARENT        shift and go to state 84


state 56

    (46) Argument -> String .

    RCPARENT        reduce using rule 46 (Argument -> String .)


state 57

    (47) Argument -> Var .
    (49) Expr -> Var .

  ! reduce/reduce conflict for RCPARENT resolved using rule 47 (Argument -> Var .)
    RCPARENT        reduce using rule 47 (Argument -> Var .)
    SUM             reduce using rule 49 (Expr -> Var .)
    SUB             reduce using rule 49 (Expr -> Var .)
    MULT            reduce using rule 49 (Expr -> Var .)
    DIV             reduce using rule 49 (Expr -> Var .)
    MOD             reduce using rule 49 (Expr -> Var .)

  ! RCPARENT        [ reduce using rule 49 (Expr -> Var .) ]


state 58

    (48) Argument -> Expr .
    (52) Expr -> Expr . SUM Expr
    (53) Expr -> Expr . SUB Expr
    (54) Expr -> Expr . MULT Expr
    (55) Expr -> Expr . DIV Expr
    (56) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 48 (Argument -> Expr .)
    SUM             shift and go to state 67
    SUB             shift and go to state 68
    MULT            shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71


state 59

    (61) String -> QUOTE . STRING QUOTE

    STRING          shift and go to state 85


state 60

    (59) Var -> ID .
    (58) Expr -> ID . DEC
    (57) ExprInc -> ID . INC

    RCPARENT        reduce using rule 59 (Var -> ID .)
    SUM             reduce using rule 59 (Var -> ID .)
    SUB             reduce using rule 59 (Var -> ID .)
    MULT            reduce using rule 59 (Var -> ID .)
    DIV             reduce using rule 59 (Var -> ID .)
    MOD             reduce using rule 59 (Var -> ID .)
    DEC             shift and go to state 65
    INC             shift and go to state 66


state 61

    (29) DoWhile -> DO COLON Newline . INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

    INDENT          shift and go to state 86


state 62

    (30) While -> WHILE LCPARENT Cond . RCPARENT COLON Newline INDENT Corpo Dedent
    (37) Cond -> Cond . OR Cond

    RCPARENT        shift and go to state 87
    OR              shift and go to state 74


state 63

    (14) Decl -> INTDec ID ATRIB NUM .

    NEWLINE         reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    INTDec          reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    DEF             reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    ID              reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    IF              reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    CALL            reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    PRINT           reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    DO              reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    WHILE           reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    ENDMARKER       reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    DEDENT          reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)


state 64

    (15) Decl -> INTDec ID ATRIB Input .

    NEWLINE         reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    INTDec          reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    DEF             reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    ID              reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    IF              reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    CALL            reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    PRINT           reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    DO              reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    WHILE           reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    ENDMARKER       reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    DEDENT          reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)


state 65

    (58) Expr -> ID DEC .

    SUM             reduce using rule 58 (Expr -> ID DEC .)
    SUB             reduce using rule 58 (Expr -> ID DEC .)
    MULT            reduce using rule 58 (Expr -> ID DEC .)
    DIV             reduce using rule 58 (Expr -> ID DEC .)
    MOD             reduce using rule 58 (Expr -> ID DEC .)
    NEWLINE         reduce using rule 58 (Expr -> ID DEC .)
    ID              reduce using rule 58 (Expr -> ID DEC .)
    IF              reduce using rule 58 (Expr -> ID DEC .)
    CALL            reduce using rule 58 (Expr -> ID DEC .)
    PRINT           reduce using rule 58 (Expr -> ID DEC .)
    DO              reduce using rule 58 (Expr -> ID DEC .)
    WHILE           reduce using rule 58 (Expr -> ID DEC .)
    ENDMARKER       reduce using rule 58 (Expr -> ID DEC .)
    DEDENT          reduce using rule 58 (Expr -> ID DEC .)
    ELSE            reduce using rule 58 (Expr -> ID DEC .)
    GT              reduce using rule 58 (Expr -> ID DEC .)
    LT              reduce using rule 58 (Expr -> ID DEC .)
    GEQ             reduce using rule 58 (Expr -> ID DEC .)
    LEQ             reduce using rule 58 (Expr -> ID DEC .)
    EQUIV           reduce using rule 58 (Expr -> ID DEC .)
    NEQ             reduce using rule 58 (Expr -> ID DEC .)
    AND             reduce using rule 58 (Expr -> ID DEC .)
    RCPARENT        reduce using rule 58 (Expr -> ID DEC .)
    OR              reduce using rule 58 (Expr -> ID DEC .)


state 66

    (57) ExprInc -> ID INC .

    SUM             reduce using rule 57 (ExprInc -> ID INC .)
    SUB             reduce using rule 57 (ExprInc -> ID INC .)
    MULT            reduce using rule 57 (ExprInc -> ID INC .)
    DIV             reduce using rule 57 (ExprInc -> ID INC .)
    MOD             reduce using rule 57 (ExprInc -> ID INC .)
    NEWLINE         reduce using rule 57 (ExprInc -> ID INC .)
    ID              reduce using rule 57 (ExprInc -> ID INC .)
    IF              reduce using rule 57 (ExprInc -> ID INC .)
    CALL            reduce using rule 57 (ExprInc -> ID INC .)
    PRINT           reduce using rule 57 (ExprInc -> ID INC .)
    DO              reduce using rule 57 (ExprInc -> ID INC .)
    WHILE           reduce using rule 57 (ExprInc -> ID INC .)
    ENDMARKER       reduce using rule 57 (ExprInc -> ID INC .)
    DEDENT          reduce using rule 57 (ExprInc -> ID INC .)
    ELSE            reduce using rule 57 (ExprInc -> ID INC .)
    GT              reduce using rule 57 (ExprInc -> ID INC .)
    LT              reduce using rule 57 (ExprInc -> ID INC .)
    GEQ             reduce using rule 57 (ExprInc -> ID INC .)
    LEQ             reduce using rule 57 (ExprInc -> ID INC .)
    EQUIV           reduce using rule 57 (ExprInc -> ID INC .)
    NEQ             reduce using rule 57 (ExprInc -> ID INC .)
    AND             reduce using rule 57 (ExprInc -> ID INC .)
    RCPARENT        reduce using rule 57 (ExprInc -> ID INC .)
    OR              reduce using rule 57 (ExprInc -> ID INC .)


state 67

    (52) Expr -> Expr SUM . Expr
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NUM             shift and go to state 49
    ID              shift and go to state 44

    Expr                           shift and go to state 88
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 68

    (53) Expr -> Expr SUB . Expr
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NUM             shift and go to state 49
    ID              shift and go to state 44

    Expr                           shift and go to state 89
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 69

    (54) Expr -> Expr MULT . Expr
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NUM             shift and go to state 49
    ID              shift and go to state 44

    Expr                           shift and go to state 90
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 70

    (55) Expr -> Expr DIV . Expr
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NUM             shift and go to state 49
    ID              shift and go to state 44

    Expr                           shift and go to state 91
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 71

    (56) Expr -> Expr MOD . Expr
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NUM             shift and go to state 49
    ID              shift and go to state 44

    Expr                           shift and go to state 92
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 72

    (60) Input -> INPUT LCPARENT . String RCPARENT
    (61) String -> . QUOTE STRING QUOTE
    (62) String -> .

    QUOTE           shift and go to state 59
    RCPARENT        reduce using rule 62 (String -> .)

    String                         shift and go to state 93

state 73

    (27) If -> IF LCPARENT Cond RCPARENT . COLON Newline INDENT Corpo Dedent
    (28) If -> IF LCPARENT Cond RCPARENT . COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT

    COLON           shift and go to state 94


state 74

    (37) Cond -> Cond OR . Cond
    (31) Cond -> . Expr GT Expr
    (32) Cond -> . Expr LT Expr
    (33) Cond -> . Expr GEQ Expr
    (34) Cond -> . Expr LEQ Expr
    (35) Cond -> . Expr EQUIV Expr
    (36) Cond -> . Expr NEQ Expr
    (37) Cond -> . Cond OR Cond
    (38) Cond -> . Expr AND Expr
    (39) Cond -> . NOT Cond
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NOT             shift and go to state 53
    NUM             shift and go to state 49
    ID              shift and go to state 44

    Cond                           shift and go to state 95
    Expr                           shift and go to state 52
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 75

    (31) Cond -> Expr GT . Expr
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NUM             shift and go to state 49
    ID              shift and go to state 44

    Expr                           shift and go to state 96
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 76

    (32) Cond -> Expr LT . Expr
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NUM             shift and go to state 49
    ID              shift and go to state 44

    Expr                           shift and go to state 97
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 77

    (33) Cond -> Expr GEQ . Expr
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NUM             shift and go to state 49
    ID              shift and go to state 44

    Expr                           shift and go to state 98
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 78

    (34) Cond -> Expr LEQ . Expr
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NUM             shift and go to state 49
    ID              shift and go to state 44

    Expr                           shift and go to state 99
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 79

    (35) Cond -> Expr EQUIV . Expr
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NUM             shift and go to state 49
    ID              shift and go to state 44

    Expr                           shift and go to state 100
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 80

    (36) Cond -> Expr NEQ . Expr
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NUM             shift and go to state 49
    ID              shift and go to state 44

    Expr                           shift and go to state 101
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 81

    (38) Cond -> Expr AND . Expr
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NUM             shift and go to state 49
    ID              shift and go to state 44

    Expr                           shift and go to state 102
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 82

    (39) Cond -> NOT Cond .
    (37) Cond -> Cond . OR Cond

  ! shift/reduce conflict for OR resolved as shift
    RCPARENT        reduce using rule 39 (Cond -> NOT Cond .)
    OR              shift and go to state 74

  ! OR              [ reduce using rule 39 (Cond -> NOT Cond .) ]


state 83

    (17) Def -> DEF ID COLON Newline . INDENT Corpo DEDENT
    (18) Def -> DEF ID COLON Newline . INDENT Decls Corpo DEDENT

    INDENT          shift and go to state 103


state 84

    (45) NonFormatted -> PRINT LCPARENT Argument RCPARENT .

    NEWLINE         reduce using rule 45 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    ID              reduce using rule 45 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    IF              reduce using rule 45 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    CALL            reduce using rule 45 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    PRINT           reduce using rule 45 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    DO              reduce using rule 45 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    WHILE           reduce using rule 45 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    ENDMARKER       reduce using rule 45 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    DEDENT          reduce using rule 45 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    ELSE            reduce using rule 45 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)


state 85

    (61) String -> QUOTE STRING . QUOTE

    QUOTE           shift and go to state 104


state 86

    (29) DoWhile -> DO COLON Newline INDENT . Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    DEDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! CALL            [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! WHILE           [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 105
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 87

    (30) While -> WHILE LCPARENT Cond RCPARENT . COLON Newline INDENT Corpo Dedent

    COLON           shift and go to state 106


state 88

    (52) Expr -> Expr SUM Expr .
    (52) Expr -> Expr . SUM Expr
    (53) Expr -> Expr . SUB Expr
    (54) Expr -> Expr . MULT Expr
    (55) Expr -> Expr . DIV Expr
    (56) Expr -> Expr . MOD Expr

    SUM             reduce using rule 52 (Expr -> Expr SUM Expr .)
    SUB             reduce using rule 52 (Expr -> Expr SUM Expr .)
    NEWLINE         reduce using rule 52 (Expr -> Expr SUM Expr .)
    ID              reduce using rule 52 (Expr -> Expr SUM Expr .)
    IF              reduce using rule 52 (Expr -> Expr SUM Expr .)
    CALL            reduce using rule 52 (Expr -> Expr SUM Expr .)
    PRINT           reduce using rule 52 (Expr -> Expr SUM Expr .)
    DO              reduce using rule 52 (Expr -> Expr SUM Expr .)
    WHILE           reduce using rule 52 (Expr -> Expr SUM Expr .)
    ENDMARKER       reduce using rule 52 (Expr -> Expr SUM Expr .)
    DEDENT          reduce using rule 52 (Expr -> Expr SUM Expr .)
    ELSE            reduce using rule 52 (Expr -> Expr SUM Expr .)
    GT              reduce using rule 52 (Expr -> Expr SUM Expr .)
    LT              reduce using rule 52 (Expr -> Expr SUM Expr .)
    GEQ             reduce using rule 52 (Expr -> Expr SUM Expr .)
    LEQ             reduce using rule 52 (Expr -> Expr SUM Expr .)
    EQUIV           reduce using rule 52 (Expr -> Expr SUM Expr .)
    NEQ             reduce using rule 52 (Expr -> Expr SUM Expr .)
    AND             reduce using rule 52 (Expr -> Expr SUM Expr .)
    RCPARENT        reduce using rule 52 (Expr -> Expr SUM Expr .)
    OR              reduce using rule 52 (Expr -> Expr SUM Expr .)
    MULT            shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71

  ! MULT            [ reduce using rule 52 (Expr -> Expr SUM Expr .) ]
  ! DIV             [ reduce using rule 52 (Expr -> Expr SUM Expr .) ]
  ! MOD             [ reduce using rule 52 (Expr -> Expr SUM Expr .) ]
  ! SUM             [ shift and go to state 67 ]
  ! SUB             [ shift and go to state 68 ]


state 89

    (53) Expr -> Expr SUB Expr .
    (52) Expr -> Expr . SUM Expr
    (53) Expr -> Expr . SUB Expr
    (54) Expr -> Expr . MULT Expr
    (55) Expr -> Expr . DIV Expr
    (56) Expr -> Expr . MOD Expr

    SUM             reduce using rule 53 (Expr -> Expr SUB Expr .)
    SUB             reduce using rule 53 (Expr -> Expr SUB Expr .)
    NEWLINE         reduce using rule 53 (Expr -> Expr SUB Expr .)
    ID              reduce using rule 53 (Expr -> Expr SUB Expr .)
    IF              reduce using rule 53 (Expr -> Expr SUB Expr .)
    CALL            reduce using rule 53 (Expr -> Expr SUB Expr .)
    PRINT           reduce using rule 53 (Expr -> Expr SUB Expr .)
    DO              reduce using rule 53 (Expr -> Expr SUB Expr .)
    WHILE           reduce using rule 53 (Expr -> Expr SUB Expr .)
    ENDMARKER       reduce using rule 53 (Expr -> Expr SUB Expr .)
    DEDENT          reduce using rule 53 (Expr -> Expr SUB Expr .)
    ELSE            reduce using rule 53 (Expr -> Expr SUB Expr .)
    GT              reduce using rule 53 (Expr -> Expr SUB Expr .)
    LT              reduce using rule 53 (Expr -> Expr SUB Expr .)
    GEQ             reduce using rule 53 (Expr -> Expr SUB Expr .)
    LEQ             reduce using rule 53 (Expr -> Expr SUB Expr .)
    EQUIV           reduce using rule 53 (Expr -> Expr SUB Expr .)
    NEQ             reduce using rule 53 (Expr -> Expr SUB Expr .)
    AND             reduce using rule 53 (Expr -> Expr SUB Expr .)
    RCPARENT        reduce using rule 53 (Expr -> Expr SUB Expr .)
    OR              reduce using rule 53 (Expr -> Expr SUB Expr .)
    MULT            shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71

  ! MULT            [ reduce using rule 53 (Expr -> Expr SUB Expr .) ]
  ! DIV             [ reduce using rule 53 (Expr -> Expr SUB Expr .) ]
  ! MOD             [ reduce using rule 53 (Expr -> Expr SUB Expr .) ]
  ! SUM             [ shift and go to state 67 ]
  ! SUB             [ shift and go to state 68 ]


state 90

    (54) Expr -> Expr MULT Expr .
    (52) Expr -> Expr . SUM Expr
    (53) Expr -> Expr . SUB Expr
    (54) Expr -> Expr . MULT Expr
    (55) Expr -> Expr . DIV Expr
    (56) Expr -> Expr . MOD Expr

    SUM             reduce using rule 54 (Expr -> Expr MULT Expr .)
    SUB             reduce using rule 54 (Expr -> Expr MULT Expr .)
    MULT            reduce using rule 54 (Expr -> Expr MULT Expr .)
    DIV             reduce using rule 54 (Expr -> Expr MULT Expr .)
    MOD             reduce using rule 54 (Expr -> Expr MULT Expr .)
    NEWLINE         reduce using rule 54 (Expr -> Expr MULT Expr .)
    ID              reduce using rule 54 (Expr -> Expr MULT Expr .)
    IF              reduce using rule 54 (Expr -> Expr MULT Expr .)
    CALL            reduce using rule 54 (Expr -> Expr MULT Expr .)
    PRINT           reduce using rule 54 (Expr -> Expr MULT Expr .)
    DO              reduce using rule 54 (Expr -> Expr MULT Expr .)
    WHILE           reduce using rule 54 (Expr -> Expr MULT Expr .)
    ENDMARKER       reduce using rule 54 (Expr -> Expr MULT Expr .)
    DEDENT          reduce using rule 54 (Expr -> Expr MULT Expr .)
    ELSE            reduce using rule 54 (Expr -> Expr MULT Expr .)
    GT              reduce using rule 54 (Expr -> Expr MULT Expr .)
    LT              reduce using rule 54 (Expr -> Expr MULT Expr .)
    GEQ             reduce using rule 54 (Expr -> Expr MULT Expr .)
    LEQ             reduce using rule 54 (Expr -> Expr MULT Expr .)
    EQUIV           reduce using rule 54 (Expr -> Expr MULT Expr .)
    NEQ             reduce using rule 54 (Expr -> Expr MULT Expr .)
    AND             reduce using rule 54 (Expr -> Expr MULT Expr .)
    RCPARENT        reduce using rule 54 (Expr -> Expr MULT Expr .)
    OR              reduce using rule 54 (Expr -> Expr MULT Expr .)

  ! SUM             [ shift and go to state 67 ]
  ! SUB             [ shift and go to state 68 ]
  ! MULT            [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! MOD             [ shift and go to state 71 ]


state 91

    (55) Expr -> Expr DIV Expr .
    (52) Expr -> Expr . SUM Expr
    (53) Expr -> Expr . SUB Expr
    (54) Expr -> Expr . MULT Expr
    (55) Expr -> Expr . DIV Expr
    (56) Expr -> Expr . MOD Expr

    SUM             reduce using rule 55 (Expr -> Expr DIV Expr .)
    SUB             reduce using rule 55 (Expr -> Expr DIV Expr .)
    MULT            reduce using rule 55 (Expr -> Expr DIV Expr .)
    DIV             reduce using rule 55 (Expr -> Expr DIV Expr .)
    MOD             reduce using rule 55 (Expr -> Expr DIV Expr .)
    NEWLINE         reduce using rule 55 (Expr -> Expr DIV Expr .)
    ID              reduce using rule 55 (Expr -> Expr DIV Expr .)
    IF              reduce using rule 55 (Expr -> Expr DIV Expr .)
    CALL            reduce using rule 55 (Expr -> Expr DIV Expr .)
    PRINT           reduce using rule 55 (Expr -> Expr DIV Expr .)
    DO              reduce using rule 55 (Expr -> Expr DIV Expr .)
    WHILE           reduce using rule 55 (Expr -> Expr DIV Expr .)
    ENDMARKER       reduce using rule 55 (Expr -> Expr DIV Expr .)
    DEDENT          reduce using rule 55 (Expr -> Expr DIV Expr .)
    ELSE            reduce using rule 55 (Expr -> Expr DIV Expr .)
    GT              reduce using rule 55 (Expr -> Expr DIV Expr .)
    LT              reduce using rule 55 (Expr -> Expr DIV Expr .)
    GEQ             reduce using rule 55 (Expr -> Expr DIV Expr .)
    LEQ             reduce using rule 55 (Expr -> Expr DIV Expr .)
    EQUIV           reduce using rule 55 (Expr -> Expr DIV Expr .)
    NEQ             reduce using rule 55 (Expr -> Expr DIV Expr .)
    AND             reduce using rule 55 (Expr -> Expr DIV Expr .)
    RCPARENT        reduce using rule 55 (Expr -> Expr DIV Expr .)
    OR              reduce using rule 55 (Expr -> Expr DIV Expr .)

  ! SUM             [ shift and go to state 67 ]
  ! SUB             [ shift and go to state 68 ]
  ! MULT            [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! MOD             [ shift and go to state 71 ]


state 92

    (56) Expr -> Expr MOD Expr .
    (52) Expr -> Expr . SUM Expr
    (53) Expr -> Expr . SUB Expr
    (54) Expr -> Expr . MULT Expr
    (55) Expr -> Expr . DIV Expr
    (56) Expr -> Expr . MOD Expr

    SUM             reduce using rule 56 (Expr -> Expr MOD Expr .)
    SUB             reduce using rule 56 (Expr -> Expr MOD Expr .)
    MULT            reduce using rule 56 (Expr -> Expr MOD Expr .)
    DIV             reduce using rule 56 (Expr -> Expr MOD Expr .)
    MOD             reduce using rule 56 (Expr -> Expr MOD Expr .)
    NEWLINE         reduce using rule 56 (Expr -> Expr MOD Expr .)
    ID              reduce using rule 56 (Expr -> Expr MOD Expr .)
    IF              reduce using rule 56 (Expr -> Expr MOD Expr .)
    CALL            reduce using rule 56 (Expr -> Expr MOD Expr .)
    PRINT           reduce using rule 56 (Expr -> Expr MOD Expr .)
    DO              reduce using rule 56 (Expr -> Expr MOD Expr .)
    WHILE           reduce using rule 56 (Expr -> Expr MOD Expr .)
    ENDMARKER       reduce using rule 56 (Expr -> Expr MOD Expr .)
    DEDENT          reduce using rule 56 (Expr -> Expr MOD Expr .)
    ELSE            reduce using rule 56 (Expr -> Expr MOD Expr .)
    GT              reduce using rule 56 (Expr -> Expr MOD Expr .)
    LT              reduce using rule 56 (Expr -> Expr MOD Expr .)
    GEQ             reduce using rule 56 (Expr -> Expr MOD Expr .)
    LEQ             reduce using rule 56 (Expr -> Expr MOD Expr .)
    EQUIV           reduce using rule 56 (Expr -> Expr MOD Expr .)
    NEQ             reduce using rule 56 (Expr -> Expr MOD Expr .)
    AND             reduce using rule 56 (Expr -> Expr MOD Expr .)
    RCPARENT        reduce using rule 56 (Expr -> Expr MOD Expr .)
    OR              reduce using rule 56 (Expr -> Expr MOD Expr .)

  ! SUM             [ shift and go to state 67 ]
  ! SUB             [ shift and go to state 68 ]
  ! MULT            [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! MOD             [ shift and go to state 71 ]


state 93

    (60) Input -> INPUT LCPARENT String . RCPARENT

    RCPARENT        shift and go to state 107


state 94

    (27) If -> IF LCPARENT Cond RCPARENT COLON . Newline INDENT Corpo Dedent
    (28) If -> IF LCPARENT Cond RCPARENT COLON . Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (7) Newline -> .
    (8) Newline -> . NEWLINE

    INDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13

    Newline                        shift and go to state 108

state 95

    (37) Cond -> Cond OR Cond .
    (37) Cond -> Cond . OR Cond

  ! shift/reduce conflict for OR resolved as shift
    RCPARENT        reduce using rule 37 (Cond -> Cond OR Cond .)
    OR              shift and go to state 74

  ! OR              [ reduce using rule 37 (Cond -> Cond OR Cond .) ]


state 96

    (31) Cond -> Expr GT Expr .
    (52) Expr -> Expr . SUM Expr
    (53) Expr -> Expr . SUB Expr
    (54) Expr -> Expr . MULT Expr
    (55) Expr -> Expr . DIV Expr
    (56) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 31 (Cond -> Expr GT Expr .)
    OR              reduce using rule 31 (Cond -> Expr GT Expr .)
    SUM             shift and go to state 67
    SUB             shift and go to state 68
    MULT            shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71


state 97

    (32) Cond -> Expr LT Expr .
    (52) Expr -> Expr . SUM Expr
    (53) Expr -> Expr . SUB Expr
    (54) Expr -> Expr . MULT Expr
    (55) Expr -> Expr . DIV Expr
    (56) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 32 (Cond -> Expr LT Expr .)
    OR              reduce using rule 32 (Cond -> Expr LT Expr .)
    SUM             shift and go to state 67
    SUB             shift and go to state 68
    MULT            shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71


state 98

    (33) Cond -> Expr GEQ Expr .
    (52) Expr -> Expr . SUM Expr
    (53) Expr -> Expr . SUB Expr
    (54) Expr -> Expr . MULT Expr
    (55) Expr -> Expr . DIV Expr
    (56) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 33 (Cond -> Expr GEQ Expr .)
    OR              reduce using rule 33 (Cond -> Expr GEQ Expr .)
    SUM             shift and go to state 67
    SUB             shift and go to state 68
    MULT            shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71


state 99

    (34) Cond -> Expr LEQ Expr .
    (52) Expr -> Expr . SUM Expr
    (53) Expr -> Expr . SUB Expr
    (54) Expr -> Expr . MULT Expr
    (55) Expr -> Expr . DIV Expr
    (56) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 34 (Cond -> Expr LEQ Expr .)
    OR              reduce using rule 34 (Cond -> Expr LEQ Expr .)
    SUM             shift and go to state 67
    SUB             shift and go to state 68
    MULT            shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71


state 100

    (35) Cond -> Expr EQUIV Expr .
    (52) Expr -> Expr . SUM Expr
    (53) Expr -> Expr . SUB Expr
    (54) Expr -> Expr . MULT Expr
    (55) Expr -> Expr . DIV Expr
    (56) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 35 (Cond -> Expr EQUIV Expr .)
    OR              reduce using rule 35 (Cond -> Expr EQUIV Expr .)
    SUM             shift and go to state 67
    SUB             shift and go to state 68
    MULT            shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71


state 101

    (36) Cond -> Expr NEQ Expr .
    (52) Expr -> Expr . SUM Expr
    (53) Expr -> Expr . SUB Expr
    (54) Expr -> Expr . MULT Expr
    (55) Expr -> Expr . DIV Expr
    (56) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 36 (Cond -> Expr NEQ Expr .)
    OR              reduce using rule 36 (Cond -> Expr NEQ Expr .)
    SUM             shift and go to state 67
    SUB             shift and go to state 68
    MULT            shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71


state 102

    (38) Cond -> Expr AND Expr .
    (52) Expr -> Expr . SUM Expr
    (53) Expr -> Expr . SUB Expr
    (54) Expr -> Expr . MULT Expr
    (55) Expr -> Expr . DIV Expr
    (56) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 38 (Cond -> Expr AND Expr .)
    OR              reduce using rule 38 (Cond -> Expr AND Expr .)
    SUM             shift and go to state 67
    SUB             shift and go to state 68
    MULT            shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71


state 103

    (17) Def -> DEF ID COLON Newline INDENT . Corpo DEDENT
    (18) Def -> DEF ID COLON Newline INDENT . Decls Corpo DEDENT
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (11) Decls -> . Decl Newline
    (12) Decls -> . Decls Decl Newline
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (13) Decl -> . INTDec ID
    (14) Decl -> . INTDec ID ATRIB NUM
    (15) Decl -> . INTDec ID ATRIB Input
    (16) Decl -> . Def
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (17) Def -> . DEF ID COLON Newline INDENT Corpo DEDENT
    (18) Def -> . DEF ID COLON Newline INDENT Decls Corpo DEDENT
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    DEDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13
    INTDec          shift and go to state 14
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    DEF             shift and go to state 22
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! CALL            [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! WHILE           [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 109
    Decls                          shift and go to state 110
    Proc                           shift and go to state 5
    Decl                           shift and go to state 7
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    Def                            shift and go to state 16
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 104

    (61) String -> QUOTE STRING QUOTE .

    RCPARENT        reduce using rule 61 (String -> QUOTE STRING QUOTE .)


state 105

    (29) DoWhile -> DO COLON Newline INDENT Corpo . Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (5) Corpo -> Corpo . Proc Newline
    (9) Dedent -> . Dedent DEDENT
    (10) Dedent -> .
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

  ! shift/reduce conflict for WHILE resolved as shift
    DEDENT          reduce using rule 10 (Dedent -> .)
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

  ! WHILE           [ reduce using rule 10 (Dedent -> .) ]

    Dedent                         shift and go to state 111
    Proc                           shift and go to state 27
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 106

    (30) While -> WHILE LCPARENT Cond RCPARENT COLON . Newline INDENT Corpo Dedent
    (7) Newline -> .
    (8) Newline -> . NEWLINE

    INDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13

    Newline                        shift and go to state 112

state 107

    (60) Input -> INPUT LCPARENT String RCPARENT .

    NEWLINE         reduce using rule 60 (Input -> INPUT LCPARENT String RCPARENT .)
    ID              reduce using rule 60 (Input -> INPUT LCPARENT String RCPARENT .)
    IF              reduce using rule 60 (Input -> INPUT LCPARENT String RCPARENT .)
    CALL            reduce using rule 60 (Input -> INPUT LCPARENT String RCPARENT .)
    PRINT           reduce using rule 60 (Input -> INPUT LCPARENT String RCPARENT .)
    DO              reduce using rule 60 (Input -> INPUT LCPARENT String RCPARENT .)
    WHILE           reduce using rule 60 (Input -> INPUT LCPARENT String RCPARENT .)
    ENDMARKER       reduce using rule 60 (Input -> INPUT LCPARENT String RCPARENT .)
    DEDENT          reduce using rule 60 (Input -> INPUT LCPARENT String RCPARENT .)
    ELSE            reduce using rule 60 (Input -> INPUT LCPARENT String RCPARENT .)
    INTDec          reduce using rule 60 (Input -> INPUT LCPARENT String RCPARENT .)
    DEF             reduce using rule 60 (Input -> INPUT LCPARENT String RCPARENT .)


state 108

    (27) If -> IF LCPARENT Cond RCPARENT COLON Newline . INDENT Corpo Dedent
    (28) If -> IF LCPARENT Cond RCPARENT COLON Newline . INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT

    INDENT          shift and go to state 113


state 109

    (17) Def -> DEF ID COLON Newline INDENT Corpo . DEDENT
    (5) Corpo -> Corpo . Proc Newline
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

    DEDENT          shift and go to state 114
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

    Proc                           shift and go to state 27
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 110

    (18) Def -> DEF ID COLON Newline INDENT Decls . Corpo DEDENT
    (12) Decls -> Decls . Decl Newline
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (13) Decl -> . INTDec ID
    (14) Decl -> . INTDec ID ATRIB NUM
    (15) Decl -> . INTDec ID ATRIB Input
    (16) Decl -> . Def
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (17) Def -> . DEF ID COLON Newline INDENT Corpo DEDENT
    (18) Def -> . DEF ID COLON Newline INDENT Decls Corpo DEDENT
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    INTDec          shift and go to state 14
    DEDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13
    DEF             shift and go to state 22
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! CALL            [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! WHILE           [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 115
    Decl                           shift and go to state 29
    Proc                           shift and go to state 5
    Def                            shift and go to state 16
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 111

    (29) DoWhile -> DO COLON Newline INDENT Corpo Dedent . WHILE LCPARENT Cond RCPARENT NEWLINE
    (9) Dedent -> Dedent . DEDENT

    WHILE           shift and go to state 116
    DEDENT          shift and go to state 117


state 112

    (30) While -> WHILE LCPARENT Cond RCPARENT COLON Newline . INDENT Corpo Dedent

    INDENT          shift and go to state 118


state 113

    (27) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT . Corpo Dedent
    (28) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT . Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ELSE            reduce using rule 7 (Newline -> .)
    DEDENT          reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! CALL            [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! WHILE           [ reduce using rule 7 (Newline -> .) ]
  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 119
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 114

    (17) Def -> DEF ID COLON Newline INDENT Corpo DEDENT .

    NEWLINE         reduce using rule 17 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    INTDec          reduce using rule 17 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    DEF             reduce using rule 17 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    ID              reduce using rule 17 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    IF              reduce using rule 17 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    CALL            reduce using rule 17 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    PRINT           reduce using rule 17 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    DO              reduce using rule 17 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    WHILE           reduce using rule 17 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    ENDMARKER       reduce using rule 17 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)
    DEDENT          reduce using rule 17 (Def -> DEF ID COLON Newline INDENT Corpo DEDENT .)


state 115

    (18) Def -> DEF ID COLON Newline INDENT Decls Corpo . DEDENT
    (5) Corpo -> Corpo . Proc Newline
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

    DEDENT          shift and go to state 120
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

    Proc                           shift and go to state 27
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 116

    (29) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE . LCPARENT Cond RCPARENT NEWLINE

    LCPARENT        shift and go to state 121


state 117

    (9) Dedent -> Dedent DEDENT .

    WHILE           reduce using rule 9 (Dedent -> Dedent DEDENT .)
    DEDENT          reduce using rule 9 (Dedent -> Dedent DEDENT .)
    ELSE            reduce using rule 9 (Dedent -> Dedent DEDENT .)
    NEWLINE         reduce using rule 9 (Dedent -> Dedent DEDENT .)
    ID              reduce using rule 9 (Dedent -> Dedent DEDENT .)
    IF              reduce using rule 9 (Dedent -> Dedent DEDENT .)
    CALL            reduce using rule 9 (Dedent -> Dedent DEDENT .)
    PRINT           reduce using rule 9 (Dedent -> Dedent DEDENT .)
    DO              reduce using rule 9 (Dedent -> Dedent DEDENT .)
    ENDMARKER       reduce using rule 9 (Dedent -> Dedent DEDENT .)


state 118

    (30) While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT . Corpo Dedent
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ELSE            reduce using rule 7 (Newline -> .)
    DEDENT          reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! CALL            [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! WHILE           [ reduce using rule 7 (Newline -> .) ]
  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 122
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 119

    (27) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo . Dedent
    (28) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo . Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (5) Corpo -> Corpo . Proc Newline
    (9) Dedent -> . Dedent DEDENT
    (10) Dedent -> .
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ELSE            reduce using rule 10 (Dedent -> .)
    DEDENT          reduce using rule 10 (Dedent -> .)
    NEWLINE         reduce using rule 10 (Dedent -> .)
    ENDMARKER       reduce using rule 10 (Dedent -> .)
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

  ! ID              [ reduce using rule 10 (Dedent -> .) ]
  ! IF              [ reduce using rule 10 (Dedent -> .) ]
  ! CALL            [ reduce using rule 10 (Dedent -> .) ]
  ! PRINT           [ reduce using rule 10 (Dedent -> .) ]
  ! DO              [ reduce using rule 10 (Dedent -> .) ]
  ! WHILE           [ reduce using rule 10 (Dedent -> .) ]

    Dedent                         shift and go to state 123
    Proc                           shift and go to state 27
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 120

    (18) Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .

    NEWLINE         reduce using rule 18 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    INTDec          reduce using rule 18 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    DEF             reduce using rule 18 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    ID              reduce using rule 18 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    IF              reduce using rule 18 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    CALL            reduce using rule 18 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    PRINT           reduce using rule 18 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    DO              reduce using rule 18 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    WHILE           reduce using rule 18 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    ENDMARKER       reduce using rule 18 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)
    DEDENT          reduce using rule 18 (Def -> DEF ID COLON Newline INDENT Decls Corpo DEDENT .)


state 121

    (29) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT . Cond RCPARENT NEWLINE
    (31) Cond -> . Expr GT Expr
    (32) Cond -> . Expr LT Expr
    (33) Cond -> . Expr GEQ Expr
    (34) Cond -> . Expr LEQ Expr
    (35) Cond -> . Expr EQUIV Expr
    (36) Cond -> . Expr NEQ Expr
    (37) Cond -> . Cond OR Cond
    (38) Cond -> . Expr AND Expr
    (39) Cond -> . NOT Cond
    (49) Expr -> . Var
    (50) Expr -> . ExprInc
    (51) Expr -> . NUM
    (52) Expr -> . Expr SUM Expr
    (53) Expr -> . Expr SUB Expr
    (54) Expr -> . Expr MULT Expr
    (55) Expr -> . Expr DIV Expr
    (56) Expr -> . Expr MOD Expr
    (58) Expr -> . ID DEC
    (59) Var -> . ID
    (57) ExprInc -> . ID INC

    NOT             shift and go to state 53
    NUM             shift and go to state 49
    ID              shift and go to state 44

    Cond                           shift and go to state 124
    Expr                           shift and go to state 52
    Var                            shift and go to state 47
    ExprInc                        shift and go to state 48

state 122

    (30) While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo . Dedent
    (5) Corpo -> Corpo . Proc Newline
    (9) Dedent -> . Dedent DEDENT
    (10) Dedent -> .
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    DEDENT          reduce using rule 10 (Dedent -> .)
    NEWLINE         reduce using rule 10 (Dedent -> .)
    ENDMARKER       reduce using rule 10 (Dedent -> .)
    ELSE            reduce using rule 10 (Dedent -> .)
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

  ! ID              [ reduce using rule 10 (Dedent -> .) ]
  ! IF              [ reduce using rule 10 (Dedent -> .) ]
  ! CALL            [ reduce using rule 10 (Dedent -> .) ]
  ! PRINT           [ reduce using rule 10 (Dedent -> .) ]
  ! DO              [ reduce using rule 10 (Dedent -> .) ]
  ! WHILE           [ reduce using rule 10 (Dedent -> .) ]

    Dedent                         shift and go to state 125
    Proc                           shift and go to state 27
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 123

    (27) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .
    (28) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent . ELSE COLON Newline INDENT Corpo DEDENT
    (9) Dedent -> Dedent . DEDENT

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for DEDENT resolved as shift
    NEWLINE         reduce using rule 27 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ID              reduce using rule 27 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    IF              reduce using rule 27 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    CALL            reduce using rule 27 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    PRINT           reduce using rule 27 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    DO              reduce using rule 27 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    WHILE           reduce using rule 27 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ENDMARKER       reduce using rule 27 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ELSE            shift and go to state 126
    DEDENT          shift and go to state 117

  ! DEDENT          [ reduce using rule 27 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .) ]
  ! ELSE            [ reduce using rule 27 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .) ]


state 124

    (29) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond . RCPARENT NEWLINE
    (37) Cond -> Cond . OR Cond

    RCPARENT        shift and go to state 127
    OR              shift and go to state 74


state 125

    (30) While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .
    (9) Dedent -> Dedent . DEDENT

  ! shift/reduce conflict for DEDENT resolved as shift
    NEWLINE         reduce using rule 30 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ID              reduce using rule 30 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    IF              reduce using rule 30 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    CALL            reduce using rule 30 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    PRINT           reduce using rule 30 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    DO              reduce using rule 30 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    WHILE           reduce using rule 30 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ENDMARKER       reduce using rule 30 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ELSE            reduce using rule 30 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    DEDENT          shift and go to state 117

  ! DEDENT          [ reduce using rule 30 (While -> WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .) ]


state 126

    (28) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE . COLON Newline INDENT Corpo DEDENT

    COLON           shift and go to state 128


state 127

    (29) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT . NEWLINE

    NEWLINE         shift and go to state 129


state 128

    (28) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON . Newline INDENT Corpo DEDENT
    (7) Newline -> .
    (8) Newline -> . NEWLINE

    INDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13

    Newline                        shift and go to state 130

state 129

    (29) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .

    NEWLINE         reduce using rule 29 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    ID              reduce using rule 29 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    IF              reduce using rule 29 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    CALL            reduce using rule 29 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    PRINT           reduce using rule 29 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    DO              reduce using rule 29 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    WHILE           reduce using rule 29 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    ENDMARKER       reduce using rule 29 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    DEDENT          reduce using rule 29 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    ELSE            reduce using rule 29 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)


state 130

    (28) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline . INDENT Corpo DEDENT

    INDENT          shift and go to state 131


state 131

    (28) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT . Corpo DEDENT
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    DEDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 13
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! CALL            [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! WHILE           [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 132
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 132

    (28) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo . DEDENT
    (5) Corpo -> Corpo . Proc Newline
    (19) Proc -> . Atrib
    (20) Proc -> . Print
    (21) Proc -> . If
    (22) Proc -> . Cycle
    (25) Proc -> . Call
    (40) Atrib -> . ID ATRIB Expr
    (41) Atrib -> . ID ATRIB Input
    (42) Atrib -> . ID INC
    (43) Atrib -> . ID DEC
    (44) Print -> . NonFormatted
    (27) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (28) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cycle -> . DoWhile
    (24) Cycle -> . While
    (26) Call -> . CALL
    (45) NonFormatted -> . PRINT LCPARENT Argument RCPARENT
    (29) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (30) While -> . WHILE LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent

    DEDENT          shift and go to state 133
    ID              shift and go to state 15
    IF              shift and go to state 18
    CALL            shift and go to state 21
    PRINT           shift and go to state 23
    DO              shift and go to state 24
    WHILE           shift and go to state 25

    Proc                           shift and go to state 27
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    Cycle                          shift and go to state 11
    Call                           shift and go to state 12
    NonFormatted                   shift and go to state 17
    DoWhile                        shift and go to state 19
    While                          shift and go to state 20

state 133

    (28) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .

    NEWLINE         reduce using rule 28 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    ID              reduce using rule 28 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    IF              reduce using rule 28 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    CALL            reduce using rule 28 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    PRINT           reduce using rule 28 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    DO              reduce using rule 28 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    WHILE           reduce using rule 28 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    ENDMARKER       reduce using rule 28 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    DEDENT          reduce using rule 28 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    ELSE            reduce using rule 28 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for CALL in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for DO in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for CALL in state 4 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for DO in state 4 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 4 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 5 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 7 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 27 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 29 resolved as shift
WARNING: shift/reduce conflict for OR in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 86 resolved as shift
WARNING: shift/reduce conflict for IF in state 86 resolved as shift
WARNING: shift/reduce conflict for CALL in state 86 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 86 resolved as shift
WARNING: shift/reduce conflict for DO in state 86 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 86 resolved as shift
WARNING: shift/reduce conflict for OR in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 103 resolved as shift
WARNING: shift/reduce conflict for IF in state 103 resolved as shift
WARNING: shift/reduce conflict for CALL in state 103 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 103 resolved as shift
WARNING: shift/reduce conflict for DO in state 103 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 103 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 110 resolved as shift
WARNING: shift/reduce conflict for IF in state 110 resolved as shift
WARNING: shift/reduce conflict for CALL in state 110 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 110 resolved as shift
WARNING: shift/reduce conflict for DO in state 110 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 110 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 113 resolved as shift
WARNING: shift/reduce conflict for ID in state 113 resolved as shift
WARNING: shift/reduce conflict for IF in state 113 resolved as shift
WARNING: shift/reduce conflict for CALL in state 113 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 113 resolved as shift
WARNING: shift/reduce conflict for DO in state 113 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 113 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 118 resolved as shift
WARNING: shift/reduce conflict for ID in state 118 resolved as shift
WARNING: shift/reduce conflict for IF in state 118 resolved as shift
WARNING: shift/reduce conflict for CALL in state 118 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 118 resolved as shift
WARNING: shift/reduce conflict for DO in state 118 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 118 resolved as shift
WARNING: shift/reduce conflict for ID in state 119 resolved as shift
WARNING: shift/reduce conflict for IF in state 119 resolved as shift
WARNING: shift/reduce conflict for CALL in state 119 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 119 resolved as shift
WARNING: shift/reduce conflict for DO in state 119 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 119 resolved as shift
WARNING: shift/reduce conflict for ID in state 122 resolved as shift
WARNING: shift/reduce conflict for IF in state 122 resolved as shift
WARNING: shift/reduce conflict for CALL in state 122 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 122 resolved as shift
WARNING: shift/reduce conflict for DO in state 122 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 122 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 123 resolved as shift
WARNING: shift/reduce conflict for DEDENT in state 123 resolved as shift
WARNING: shift/reduce conflict for DEDENT in state 125 resolved as shift
WARNING: shift/reduce conflict for ID in state 131 resolved as shift
WARNING: shift/reduce conflict for IF in state 131 resolved as shift
WARNING: shift/reduce conflict for CALL in state 131 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 131 resolved as shift
WARNING: shift/reduce conflict for DO in state 131 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 131 resolved as shift
WARNING: reduce/reduce conflict in state 57 resolved using rule (Argument -> Var)
WARNING: rejected rule (Expr -> Var) in state 57
