Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELIF
    WS

Grammar

Rule 0     S' -> ProgramaInit
Rule 1     ProgramaInit -> Programa ENDMARKER
Rule 2     Programa -> Corpo
Rule 3     Programa -> Decls Corpo
Rule 4     Corpo -> Proc Newline
Rule 5     Corpo -> Corpo Proc Newline
Rule 6     Corpo -> Newline
Rule 7     Newline -> <empty>
Rule 8     Newline -> NEWLINE
Rule 9     Dedent -> Dedent DEDENT
Rule 10    Dedent -> <empty>
Rule 11    Decls -> Decl Newline
Rule 12    Decls -> Decls Decl Newline
Rule 13    Decl -> INTDec ID
Rule 14    Decl -> INTDec ID ATRIB NUM
Rule 15    Decl -> INTDec ID ATRIB Input
Rule 16    Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues
Rule 17    Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET
Rule 18    ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET
Rule 19    ArrayIntValues -> ArrayIntValues , Expr
Rule 20    ArrayIntValues -> Expr
Rule 21    Proc -> Atrib
Rule 22    Proc -> Print
Rule 23    Proc -> If
Rule 24    Proc -> DoWhile
Rule 25    If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
Rule 26    If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
Rule 27    DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
Rule 28    Cond -> Expr GT Expr
Rule 29    Cond -> Expr LT Expr
Rule 30    Cond -> Expr GEQ Expr
Rule 31    Cond -> Expr LEQ Expr
Rule 32    Cond -> Expr EQUIV Expr
Rule 33    Cond -> Expr NEQ Expr
Rule 34    Cond -> Cond OR Cond
Rule 35    Cond -> Expr AND Expr
Rule 36    Cond -> NOT Cond
Rule 37    Atrib -> ID ATRIB Expr
Rule 38    Atrib -> ID ATRIB Input
Rule 39    Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
Rule 40    Print -> NonFormatted
Rule 41    NonFormatted -> PRINT LCPARENT Argument RCPARENT
Rule 42    Argument -> String
Rule 43    Argument -> Var
Rule 44    Argument -> Expr
Rule 45    Expr -> Var
Rule 46    Expr -> NUM
Rule 47    Expr -> Expr SUM Expr
Rule 48    Expr -> Expr SUB Expr
Rule 49    Expr -> Expr MULT Expr
Rule 50    Expr -> Expr DIV Expr
Rule 51    Expr -> Expr MOD Expr
Rule 52    Expr -> ID INC
Rule 53    Expr -> ID DEC
Rule 54    Var -> ID
Rule 55    Var -> ID LSQBRACKET Expr RSQBRACKET
Rule 56    Input -> INPUT LCPARENT String RCPARENT
Rule 57    String -> QUOTE STRING QUOTE
Rule 58    String -> <empty>

Terminals, with rules where they appear

,                    : 19
AND                  : 35
ATRIB                : 14 15 16 37 38 39
COLON                : 25 26 26 27
DEC                  : 53
DEDENT               : 9 26
DIV                  : 50
DO                   : 27
ELIF                 : 
ELSE                 : 26
ENDMARKER            : 1
EQUIV                : 32
GEQ                  : 30
GT                   : 28
ID                   : 13 14 15 16 17 37 38 39 52 53 54 55
IF                   : 25 26
INC                  : 52
INDENT               : 25 26 26 27
INPUT                : 56
INTDec               : 13 14 15 16 17
LCPARENT             : 25 26 27 41 56
LCURLBRACKET         : 18
LEQ                  : 31
LSQBRACKET           : 16 17 39 55
LT                   : 29
MOD                  : 51
MULT                 : 49
NEQ                  : 33
NEWLINE              : 8 27
NOT                  : 36
NUM                  : 14 16 17 46
OR                   : 34
PRINT                : 41
QUOTE                : 57 57
RCPARENT             : 25 26 27 41 56
RCURLBRACKET         : 18
RSQBRACKET           : 16 17 39 55
STRING               : 57
SUB                  : 48
SUM                  : 47
WHILE                : 27
WS                   : 
error                : 

Nonterminals, with rules where they appear

Argument             : 41
ArrayIntValues       : 18 19
ArrayValues          : 16
Atrib                : 21
Cond                 : 25 26 27 34 34 36
Corpo                : 2 3 5 25 26 26 27
Decl                 : 11 12
Decls                : 3 12
Dedent               : 9 25 26 27
DoWhile              : 24
Expr                 : 19 20 28 28 29 29 30 30 31 31 32 32 33 33 35 35 37 39 39 44 47 47 48 48 49 49 50 50 51 51 55
If                   : 23
Input                : 15 38
Newline              : 4 5 6 11 12 25 26 26 27
NonFormatted         : 40
Print                : 22
Proc                 : 4 5
Programa             : 1
ProgramaInit         : 0
String               : 42 56
Var                  : 43 45

Parsing method: LALR

state 0

    (0) S' -> . ProgramaInit
    (1) ProgramaInit -> . Programa ENDMARKER
    (2) Programa -> . Corpo
    (3) Programa -> . Decls Corpo
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (11) Decls -> . Decl Newline
    (12) Decls -> . Decls Decl Newline
    (21) Proc -> . Atrib
    (22) Proc -> . Print
    (23) Proc -> . If
    (24) Proc -> . DoWhile
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (13) Decl -> . INTDec ID
    (14) Decl -> . INTDec ID ATRIB NUM
    (15) Decl -> . INTDec ID ATRIB Input
    (16) Decl -> . INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues
    (17) Decl -> . INTDec ID LSQBRACKET NUM RSQBRACKET
    (37) Atrib -> . ID ATRIB Expr
    (38) Atrib -> . ID ATRIB Input
    (39) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (40) Print -> . NonFormatted
    (25) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (26) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (27) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (41) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    ENDMARKER       reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12
    INTDec          shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]

    ProgramaInit                   shift and go to state 1
    Programa                       shift and go to state 2
    Corpo                          shift and go to state 3
    Decls                          shift and go to state 4
    Proc                           shift and go to state 5
    Newline                        shift and go to state 6
    Decl                           shift and go to state 7
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 1

    (0) S' -> ProgramaInit .



state 2

    (1) ProgramaInit -> Programa . ENDMARKER

    ENDMARKER       shift and go to state 19


state 3

    (2) Programa -> Corpo .
    (5) Corpo -> Corpo . Proc Newline
    (21) Proc -> . Atrib
    (22) Proc -> . Print
    (23) Proc -> . If
    (24) Proc -> . DoWhile
    (37) Atrib -> . ID ATRIB Expr
    (38) Atrib -> . ID ATRIB Input
    (39) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (40) Print -> . NonFormatted
    (25) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (26) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (27) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (41) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

    ENDMARKER       reduce using rule 2 (Programa -> Corpo .)
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

    Proc                           shift and go to state 20
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 4

    (3) Programa -> Decls . Corpo
    (12) Decls -> Decls . Decl Newline
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (13) Decl -> . INTDec ID
    (14) Decl -> . INTDec ID ATRIB NUM
    (15) Decl -> . INTDec ID ATRIB Input
    (16) Decl -> . INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues
    (17) Decl -> . INTDec ID LSQBRACKET NUM RSQBRACKET
    (21) Proc -> . Atrib
    (22) Proc -> . Print
    (23) Proc -> . If
    (24) Proc -> . DoWhile
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (37) Atrib -> . ID ATRIB Expr
    (38) Atrib -> . ID ATRIB Input
    (39) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (40) Print -> . NonFormatted
    (25) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (26) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (27) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (41) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    INTDec          shift and go to state 13
    ENDMARKER       reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]

    Corpo                          shift and go to state 21
    Decl                           shift and go to state 22
    Newline                        shift and go to state 6
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 5

    (4) Corpo -> Proc . Newline
    (7) Newline -> .
    (8) Newline -> . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    ID              reduce using rule 7 (Newline -> .)
    IF              reduce using rule 7 (Newline -> .)
    DO              reduce using rule 7 (Newline -> .)
    PRINT           reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    WHILE           reduce using rule 7 (Newline -> .)
    DEDENT          reduce using rule 7 (Newline -> .)
    ELSE            reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12

  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 23

state 6

    (6) Corpo -> Newline .

    ID              reduce using rule 6 (Corpo -> Newline .)
    IF              reduce using rule 6 (Corpo -> Newline .)
    DO              reduce using rule 6 (Corpo -> Newline .)
    PRINT           reduce using rule 6 (Corpo -> Newline .)
    ENDMARKER       reduce using rule 6 (Corpo -> Newline .)
    WHILE           reduce using rule 6 (Corpo -> Newline .)
    DEDENT          reduce using rule 6 (Corpo -> Newline .)
    ELSE            reduce using rule 6 (Corpo -> Newline .)
    NEWLINE         reduce using rule 6 (Corpo -> Newline .)


state 7

    (11) Decls -> Decl . Newline
    (7) Newline -> .
    (8) Newline -> . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    INTDec          reduce using rule 7 (Newline -> .)
    ID              reduce using rule 7 (Newline -> .)
    IF              reduce using rule 7 (Newline -> .)
    DO              reduce using rule 7 (Newline -> .)
    PRINT           reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12

  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 24

state 8

    (21) Proc -> Atrib .

    NEWLINE         reduce using rule 21 (Proc -> Atrib .)
    ID              reduce using rule 21 (Proc -> Atrib .)
    IF              reduce using rule 21 (Proc -> Atrib .)
    DO              reduce using rule 21 (Proc -> Atrib .)
    PRINT           reduce using rule 21 (Proc -> Atrib .)
    ENDMARKER       reduce using rule 21 (Proc -> Atrib .)
    WHILE           reduce using rule 21 (Proc -> Atrib .)
    DEDENT          reduce using rule 21 (Proc -> Atrib .)
    ELSE            reduce using rule 21 (Proc -> Atrib .)


state 9

    (22) Proc -> Print .

    NEWLINE         reduce using rule 22 (Proc -> Print .)
    ID              reduce using rule 22 (Proc -> Print .)
    IF              reduce using rule 22 (Proc -> Print .)
    DO              reduce using rule 22 (Proc -> Print .)
    PRINT           reduce using rule 22 (Proc -> Print .)
    ENDMARKER       reduce using rule 22 (Proc -> Print .)
    WHILE           reduce using rule 22 (Proc -> Print .)
    DEDENT          reduce using rule 22 (Proc -> Print .)
    ELSE            reduce using rule 22 (Proc -> Print .)


state 10

    (23) Proc -> If .

    NEWLINE         reduce using rule 23 (Proc -> If .)
    ID              reduce using rule 23 (Proc -> If .)
    IF              reduce using rule 23 (Proc -> If .)
    DO              reduce using rule 23 (Proc -> If .)
    PRINT           reduce using rule 23 (Proc -> If .)
    ENDMARKER       reduce using rule 23 (Proc -> If .)
    WHILE           reduce using rule 23 (Proc -> If .)
    DEDENT          reduce using rule 23 (Proc -> If .)
    ELSE            reduce using rule 23 (Proc -> If .)


state 11

    (24) Proc -> DoWhile .

    NEWLINE         reduce using rule 24 (Proc -> DoWhile .)
    ID              reduce using rule 24 (Proc -> DoWhile .)
    IF              reduce using rule 24 (Proc -> DoWhile .)
    DO              reduce using rule 24 (Proc -> DoWhile .)
    PRINT           reduce using rule 24 (Proc -> DoWhile .)
    ENDMARKER       reduce using rule 24 (Proc -> DoWhile .)
    WHILE           reduce using rule 24 (Proc -> DoWhile .)
    DEDENT          reduce using rule 24 (Proc -> DoWhile .)
    ELSE            reduce using rule 24 (Proc -> DoWhile .)


state 12

    (8) Newline -> NEWLINE .

    ID              reduce using rule 8 (Newline -> NEWLINE .)
    IF              reduce using rule 8 (Newline -> NEWLINE .)
    DO              reduce using rule 8 (Newline -> NEWLINE .)
    PRINT           reduce using rule 8 (Newline -> NEWLINE .)
    ENDMARKER       reduce using rule 8 (Newline -> NEWLINE .)
    WHILE           reduce using rule 8 (Newline -> NEWLINE .)
    DEDENT          reduce using rule 8 (Newline -> NEWLINE .)
    ELSE            reduce using rule 8 (Newline -> NEWLINE .)
    NEWLINE         reduce using rule 8 (Newline -> NEWLINE .)
    INTDec          reduce using rule 8 (Newline -> NEWLINE .)
    INDENT          reduce using rule 8 (Newline -> NEWLINE .)


state 13

    (13) Decl -> INTDec . ID
    (14) Decl -> INTDec . ID ATRIB NUM
    (15) Decl -> INTDec . ID ATRIB Input
    (16) Decl -> INTDec . ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues
    (17) Decl -> INTDec . ID LSQBRACKET NUM RSQBRACKET

    ID              shift and go to state 25


state 14

    (37) Atrib -> ID . ATRIB Expr
    (38) Atrib -> ID . ATRIB Input
    (39) Atrib -> ID . LSQBRACKET Expr RSQBRACKET ATRIB Expr

    ATRIB           shift and go to state 26
    LSQBRACKET      shift and go to state 27


state 15

    (40) Print -> NonFormatted .

    NEWLINE         reduce using rule 40 (Print -> NonFormatted .)
    ID              reduce using rule 40 (Print -> NonFormatted .)
    IF              reduce using rule 40 (Print -> NonFormatted .)
    DO              reduce using rule 40 (Print -> NonFormatted .)
    PRINT           reduce using rule 40 (Print -> NonFormatted .)
    ENDMARKER       reduce using rule 40 (Print -> NonFormatted .)
    WHILE           reduce using rule 40 (Print -> NonFormatted .)
    DEDENT          reduce using rule 40 (Print -> NonFormatted .)
    ELSE            reduce using rule 40 (Print -> NonFormatted .)


state 16

    (25) If -> IF . LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (26) If -> IF . LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT

    LCPARENT        shift and go to state 28


state 17

    (27) DoWhile -> DO . COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

    COLON           shift and go to state 29


state 18

    (41) NonFormatted -> PRINT . LCPARENT Argument RCPARENT

    LCPARENT        shift and go to state 30


state 19

    (1) ProgramaInit -> Programa ENDMARKER .

    $end            reduce using rule 1 (ProgramaInit -> Programa ENDMARKER .)


state 20

    (5) Corpo -> Corpo Proc . Newline
    (7) Newline -> .
    (8) Newline -> . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    ID              reduce using rule 7 (Newline -> .)
    IF              reduce using rule 7 (Newline -> .)
    DO              reduce using rule 7 (Newline -> .)
    PRINT           reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    WHILE           reduce using rule 7 (Newline -> .)
    DEDENT          reduce using rule 7 (Newline -> .)
    ELSE            reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12

  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 31

state 21

    (3) Programa -> Decls Corpo .
    (5) Corpo -> Corpo . Proc Newline
    (21) Proc -> . Atrib
    (22) Proc -> . Print
    (23) Proc -> . If
    (24) Proc -> . DoWhile
    (37) Atrib -> . ID ATRIB Expr
    (38) Atrib -> . ID ATRIB Input
    (39) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (40) Print -> . NonFormatted
    (25) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (26) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (27) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (41) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

    ENDMARKER       reduce using rule 3 (Programa -> Decls Corpo .)
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

    Proc                           shift and go to state 20
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 22

    (12) Decls -> Decls Decl . Newline
    (7) Newline -> .
    (8) Newline -> . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    INTDec          reduce using rule 7 (Newline -> .)
    ID              reduce using rule 7 (Newline -> .)
    IF              reduce using rule 7 (Newline -> .)
    DO              reduce using rule 7 (Newline -> .)
    PRINT           reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12

  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 32

state 23

    (4) Corpo -> Proc Newline .

    ID              reduce using rule 4 (Corpo -> Proc Newline .)
    IF              reduce using rule 4 (Corpo -> Proc Newline .)
    DO              reduce using rule 4 (Corpo -> Proc Newline .)
    PRINT           reduce using rule 4 (Corpo -> Proc Newline .)
    ENDMARKER       reduce using rule 4 (Corpo -> Proc Newline .)
    WHILE           reduce using rule 4 (Corpo -> Proc Newline .)
    DEDENT          reduce using rule 4 (Corpo -> Proc Newline .)
    ELSE            reduce using rule 4 (Corpo -> Proc Newline .)
    NEWLINE         reduce using rule 4 (Corpo -> Proc Newline .)


state 24

    (11) Decls -> Decl Newline .

    INTDec          reduce using rule 11 (Decls -> Decl Newline .)
    NEWLINE         reduce using rule 11 (Decls -> Decl Newline .)
    ID              reduce using rule 11 (Decls -> Decl Newline .)
    IF              reduce using rule 11 (Decls -> Decl Newline .)
    DO              reduce using rule 11 (Decls -> Decl Newline .)
    PRINT           reduce using rule 11 (Decls -> Decl Newline .)
    ENDMARKER       reduce using rule 11 (Decls -> Decl Newline .)


state 25

    (13) Decl -> INTDec ID .
    (14) Decl -> INTDec ID . ATRIB NUM
    (15) Decl -> INTDec ID . ATRIB Input
    (16) Decl -> INTDec ID . LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues
    (17) Decl -> INTDec ID . LSQBRACKET NUM RSQBRACKET

    NEWLINE         reduce using rule 13 (Decl -> INTDec ID .)
    INTDec          reduce using rule 13 (Decl -> INTDec ID .)
    ID              reduce using rule 13 (Decl -> INTDec ID .)
    IF              reduce using rule 13 (Decl -> INTDec ID .)
    DO              reduce using rule 13 (Decl -> INTDec ID .)
    PRINT           reduce using rule 13 (Decl -> INTDec ID .)
    ENDMARKER       reduce using rule 13 (Decl -> INTDec ID .)
    ATRIB           shift and go to state 33
    LSQBRACKET      shift and go to state 34


state 26

    (37) Atrib -> ID ATRIB . Expr
    (38) Atrib -> ID ATRIB . Input
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (56) Input -> . INPUT LCPARENT String RCPARENT
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35
    INPUT           shift and go to state 40

    Expr                           shift and go to state 36
    Input                          shift and go to state 37
    Var                            shift and go to state 38

state 27

    (39) Atrib -> ID LSQBRACKET . Expr RSQBRACKET ATRIB Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 41
    Var                            shift and go to state 38

state 28

    (25) If -> IF LCPARENT . Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (26) If -> IF LCPARENT . Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (28) Cond -> . Expr GT Expr
    (29) Cond -> . Expr LT Expr
    (30) Cond -> . Expr GEQ Expr
    (31) Cond -> . Expr LEQ Expr
    (32) Cond -> . Expr EQUIV Expr
    (33) Cond -> . Expr NEQ Expr
    (34) Cond -> . Cond OR Cond
    (35) Cond -> . Expr AND Expr
    (36) Cond -> . NOT Cond
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NOT             shift and go to state 44
    NUM             shift and go to state 39
    ID              shift and go to state 35

    Cond                           shift and go to state 42
    Expr                           shift and go to state 43
    Var                            shift and go to state 38

state 29

    (27) DoWhile -> DO COLON . Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (7) Newline -> .
    (8) Newline -> . NEWLINE

    INDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12

    Newline                        shift and go to state 45

state 30

    (41) NonFormatted -> PRINT LCPARENT . Argument RCPARENT
    (42) Argument -> . String
    (43) Argument -> . Var
    (44) Argument -> . Expr
    (57) String -> . QUOTE STRING QUOTE
    (58) String -> .
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC

    QUOTE           shift and go to state 50
    RCPARENT        reduce using rule 58 (String -> .)
    ID              shift and go to state 51
    NUM             shift and go to state 39

    Argument                       shift and go to state 46
    String                         shift and go to state 47
    Var                            shift and go to state 48
    Expr                           shift and go to state 49

state 31

    (5) Corpo -> Corpo Proc Newline .

    ID              reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    IF              reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    DO              reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    PRINT           reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    ENDMARKER       reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    WHILE           reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    DEDENT          reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    ELSE            reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    NEWLINE         reduce using rule 5 (Corpo -> Corpo Proc Newline .)


state 32

    (12) Decls -> Decls Decl Newline .

    INTDec          reduce using rule 12 (Decls -> Decls Decl Newline .)
    NEWLINE         reduce using rule 12 (Decls -> Decls Decl Newline .)
    ID              reduce using rule 12 (Decls -> Decls Decl Newline .)
    IF              reduce using rule 12 (Decls -> Decls Decl Newline .)
    DO              reduce using rule 12 (Decls -> Decls Decl Newline .)
    PRINT           reduce using rule 12 (Decls -> Decls Decl Newline .)
    ENDMARKER       reduce using rule 12 (Decls -> Decls Decl Newline .)


state 33

    (14) Decl -> INTDec ID ATRIB . NUM
    (15) Decl -> INTDec ID ATRIB . Input
    (56) Input -> . INPUT LCPARENT String RCPARENT

    NUM             shift and go to state 52
    INPUT           shift and go to state 40

    Input                          shift and go to state 53

state 34

    (16) Decl -> INTDec ID LSQBRACKET . NUM RSQBRACKET ATRIB ArrayValues
    (17) Decl -> INTDec ID LSQBRACKET . NUM RSQBRACKET

    NUM             shift and go to state 54


state 35

    (52) Expr -> ID . INC
    (53) Expr -> ID . DEC
    (54) Var -> ID .
    (55) Var -> ID . LSQBRACKET Expr RSQBRACKET

    INC             shift and go to state 55
    DEC             shift and go to state 56
    SUM             reduce using rule 54 (Var -> ID .)
    SUB             reduce using rule 54 (Var -> ID .)
    MULT            reduce using rule 54 (Var -> ID .)
    DIV             reduce using rule 54 (Var -> ID .)
    MOD             reduce using rule 54 (Var -> ID .)
    NEWLINE         reduce using rule 54 (Var -> ID .)
    ID              reduce using rule 54 (Var -> ID .)
    IF              reduce using rule 54 (Var -> ID .)
    DO              reduce using rule 54 (Var -> ID .)
    PRINT           reduce using rule 54 (Var -> ID .)
    ENDMARKER       reduce using rule 54 (Var -> ID .)
    WHILE           reduce using rule 54 (Var -> ID .)
    DEDENT          reduce using rule 54 (Var -> ID .)
    ELSE            reduce using rule 54 (Var -> ID .)
    RSQBRACKET      reduce using rule 54 (Var -> ID .)
    GT              reduce using rule 54 (Var -> ID .)
    LT              reduce using rule 54 (Var -> ID .)
    GEQ             reduce using rule 54 (Var -> ID .)
    LEQ             reduce using rule 54 (Var -> ID .)
    EQUIV           reduce using rule 54 (Var -> ID .)
    NEQ             reduce using rule 54 (Var -> ID .)
    AND             reduce using rule 54 (Var -> ID .)
    RCPARENT        reduce using rule 54 (Var -> ID .)
    OR              reduce using rule 54 (Var -> ID .)
    RCURLBRACKET    reduce using rule 54 (Var -> ID .)
    ,               reduce using rule 54 (Var -> ID .)
    LSQBRACKET      shift and go to state 57


state 36

    (37) Atrib -> ID ATRIB Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    NEWLINE         reduce using rule 37 (Atrib -> ID ATRIB Expr .)
    ID              reduce using rule 37 (Atrib -> ID ATRIB Expr .)
    IF              reduce using rule 37 (Atrib -> ID ATRIB Expr .)
    DO              reduce using rule 37 (Atrib -> ID ATRIB Expr .)
    PRINT           reduce using rule 37 (Atrib -> ID ATRIB Expr .)
    ENDMARKER       reduce using rule 37 (Atrib -> ID ATRIB Expr .)
    WHILE           reduce using rule 37 (Atrib -> ID ATRIB Expr .)
    DEDENT          reduce using rule 37 (Atrib -> ID ATRIB Expr .)
    ELSE            reduce using rule 37 (Atrib -> ID ATRIB Expr .)
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62


state 37

    (38) Atrib -> ID ATRIB Input .

    NEWLINE         reduce using rule 38 (Atrib -> ID ATRIB Input .)
    ID              reduce using rule 38 (Atrib -> ID ATRIB Input .)
    IF              reduce using rule 38 (Atrib -> ID ATRIB Input .)
    DO              reduce using rule 38 (Atrib -> ID ATRIB Input .)
    PRINT           reduce using rule 38 (Atrib -> ID ATRIB Input .)
    ENDMARKER       reduce using rule 38 (Atrib -> ID ATRIB Input .)
    WHILE           reduce using rule 38 (Atrib -> ID ATRIB Input .)
    DEDENT          reduce using rule 38 (Atrib -> ID ATRIB Input .)
    ELSE            reduce using rule 38 (Atrib -> ID ATRIB Input .)


state 38

    (45) Expr -> Var .

    SUM             reduce using rule 45 (Expr -> Var .)
    SUB             reduce using rule 45 (Expr -> Var .)
    MULT            reduce using rule 45 (Expr -> Var .)
    DIV             reduce using rule 45 (Expr -> Var .)
    MOD             reduce using rule 45 (Expr -> Var .)
    NEWLINE         reduce using rule 45 (Expr -> Var .)
    ID              reduce using rule 45 (Expr -> Var .)
    IF              reduce using rule 45 (Expr -> Var .)
    DO              reduce using rule 45 (Expr -> Var .)
    PRINT           reduce using rule 45 (Expr -> Var .)
    ENDMARKER       reduce using rule 45 (Expr -> Var .)
    WHILE           reduce using rule 45 (Expr -> Var .)
    DEDENT          reduce using rule 45 (Expr -> Var .)
    ELSE            reduce using rule 45 (Expr -> Var .)
    RSQBRACKET      reduce using rule 45 (Expr -> Var .)
    GT              reduce using rule 45 (Expr -> Var .)
    LT              reduce using rule 45 (Expr -> Var .)
    GEQ             reduce using rule 45 (Expr -> Var .)
    LEQ             reduce using rule 45 (Expr -> Var .)
    EQUIV           reduce using rule 45 (Expr -> Var .)
    NEQ             reduce using rule 45 (Expr -> Var .)
    AND             reduce using rule 45 (Expr -> Var .)
    RCPARENT        reduce using rule 45 (Expr -> Var .)
    OR              reduce using rule 45 (Expr -> Var .)
    RCURLBRACKET    reduce using rule 45 (Expr -> Var .)
    ,               reduce using rule 45 (Expr -> Var .)


state 39

    (46) Expr -> NUM .

    SUM             reduce using rule 46 (Expr -> NUM .)
    SUB             reduce using rule 46 (Expr -> NUM .)
    MULT            reduce using rule 46 (Expr -> NUM .)
    DIV             reduce using rule 46 (Expr -> NUM .)
    MOD             reduce using rule 46 (Expr -> NUM .)
    NEWLINE         reduce using rule 46 (Expr -> NUM .)
    ID              reduce using rule 46 (Expr -> NUM .)
    IF              reduce using rule 46 (Expr -> NUM .)
    DO              reduce using rule 46 (Expr -> NUM .)
    PRINT           reduce using rule 46 (Expr -> NUM .)
    ENDMARKER       reduce using rule 46 (Expr -> NUM .)
    WHILE           reduce using rule 46 (Expr -> NUM .)
    DEDENT          reduce using rule 46 (Expr -> NUM .)
    ELSE            reduce using rule 46 (Expr -> NUM .)
    RSQBRACKET      reduce using rule 46 (Expr -> NUM .)
    GT              reduce using rule 46 (Expr -> NUM .)
    LT              reduce using rule 46 (Expr -> NUM .)
    GEQ             reduce using rule 46 (Expr -> NUM .)
    LEQ             reduce using rule 46 (Expr -> NUM .)
    EQUIV           reduce using rule 46 (Expr -> NUM .)
    NEQ             reduce using rule 46 (Expr -> NUM .)
    AND             reduce using rule 46 (Expr -> NUM .)
    RCPARENT        reduce using rule 46 (Expr -> NUM .)
    OR              reduce using rule 46 (Expr -> NUM .)
    RCURLBRACKET    reduce using rule 46 (Expr -> NUM .)
    ,               reduce using rule 46 (Expr -> NUM .)


state 40

    (56) Input -> INPUT . LCPARENT String RCPARENT

    LCPARENT        shift and go to state 63


state 41

    (39) Atrib -> ID LSQBRACKET Expr . RSQBRACKET ATRIB Expr
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    RSQBRACKET      shift and go to state 64
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62


state 42

    (25) If -> IF LCPARENT Cond . RCPARENT COLON Newline INDENT Corpo Dedent
    (26) If -> IF LCPARENT Cond . RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (34) Cond -> Cond . OR Cond

    RCPARENT        shift and go to state 65
    OR              shift and go to state 66


state 43

    (28) Cond -> Expr . GT Expr
    (29) Cond -> Expr . LT Expr
    (30) Cond -> Expr . GEQ Expr
    (31) Cond -> Expr . LEQ Expr
    (32) Cond -> Expr . EQUIV Expr
    (33) Cond -> Expr . NEQ Expr
    (35) Cond -> Expr . AND Expr
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    GT              shift and go to state 67
    LT              shift and go to state 68
    GEQ             shift and go to state 69
    LEQ             shift and go to state 70
    EQUIV           shift and go to state 71
    NEQ             shift and go to state 72
    AND             shift and go to state 73
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62


state 44

    (36) Cond -> NOT . Cond
    (28) Cond -> . Expr GT Expr
    (29) Cond -> . Expr LT Expr
    (30) Cond -> . Expr GEQ Expr
    (31) Cond -> . Expr LEQ Expr
    (32) Cond -> . Expr EQUIV Expr
    (33) Cond -> . Expr NEQ Expr
    (34) Cond -> . Cond OR Cond
    (35) Cond -> . Expr AND Expr
    (36) Cond -> . NOT Cond
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NOT             shift and go to state 44
    NUM             shift and go to state 39
    ID              shift and go to state 35

    Cond                           shift and go to state 74
    Expr                           shift and go to state 43
    Var                            shift and go to state 38

state 45

    (27) DoWhile -> DO COLON Newline . INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

    INDENT          shift and go to state 75


state 46

    (41) NonFormatted -> PRINT LCPARENT Argument . RCPARENT

    RCPARENT        shift and go to state 76


state 47

    (42) Argument -> String .

    RCPARENT        reduce using rule 42 (Argument -> String .)


state 48

    (43) Argument -> Var .
    (45) Expr -> Var .

  ! reduce/reduce conflict for RCPARENT resolved using rule 43 (Argument -> Var .)
    RCPARENT        reduce using rule 43 (Argument -> Var .)
    SUM             reduce using rule 45 (Expr -> Var .)
    SUB             reduce using rule 45 (Expr -> Var .)
    MULT            reduce using rule 45 (Expr -> Var .)
    DIV             reduce using rule 45 (Expr -> Var .)
    MOD             reduce using rule 45 (Expr -> Var .)

  ! RCPARENT        [ reduce using rule 45 (Expr -> Var .) ]


state 49

    (44) Argument -> Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 44 (Argument -> Expr .)
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62


state 50

    (57) String -> QUOTE . STRING QUOTE

    STRING          shift and go to state 77


state 51

    (54) Var -> ID .
    (55) Var -> ID . LSQBRACKET Expr RSQBRACKET
    (52) Expr -> ID . INC
    (53) Expr -> ID . DEC

    RCPARENT        reduce using rule 54 (Var -> ID .)
    SUM             reduce using rule 54 (Var -> ID .)
    SUB             reduce using rule 54 (Var -> ID .)
    MULT            reduce using rule 54 (Var -> ID .)
    DIV             reduce using rule 54 (Var -> ID .)
    MOD             reduce using rule 54 (Var -> ID .)
    LSQBRACKET      shift and go to state 57
    INC             shift and go to state 55
    DEC             shift and go to state 56


state 52

    (14) Decl -> INTDec ID ATRIB NUM .

    NEWLINE         reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    INTDec          reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    ID              reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    IF              reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    DO              reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    PRINT           reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    ENDMARKER       reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)


state 53

    (15) Decl -> INTDec ID ATRIB Input .

    NEWLINE         reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    INTDec          reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    ID              reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    IF              reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    DO              reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    PRINT           reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    ENDMARKER       reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)


state 54

    (16) Decl -> INTDec ID LSQBRACKET NUM . RSQBRACKET ATRIB ArrayValues
    (17) Decl -> INTDec ID LSQBRACKET NUM . RSQBRACKET

    RSQBRACKET      shift and go to state 78


state 55

    (52) Expr -> ID INC .

    SUM             reduce using rule 52 (Expr -> ID INC .)
    SUB             reduce using rule 52 (Expr -> ID INC .)
    MULT            reduce using rule 52 (Expr -> ID INC .)
    DIV             reduce using rule 52 (Expr -> ID INC .)
    MOD             reduce using rule 52 (Expr -> ID INC .)
    NEWLINE         reduce using rule 52 (Expr -> ID INC .)
    ID              reduce using rule 52 (Expr -> ID INC .)
    IF              reduce using rule 52 (Expr -> ID INC .)
    DO              reduce using rule 52 (Expr -> ID INC .)
    PRINT           reduce using rule 52 (Expr -> ID INC .)
    ENDMARKER       reduce using rule 52 (Expr -> ID INC .)
    WHILE           reduce using rule 52 (Expr -> ID INC .)
    DEDENT          reduce using rule 52 (Expr -> ID INC .)
    ELSE            reduce using rule 52 (Expr -> ID INC .)
    RSQBRACKET      reduce using rule 52 (Expr -> ID INC .)
    GT              reduce using rule 52 (Expr -> ID INC .)
    LT              reduce using rule 52 (Expr -> ID INC .)
    GEQ             reduce using rule 52 (Expr -> ID INC .)
    LEQ             reduce using rule 52 (Expr -> ID INC .)
    EQUIV           reduce using rule 52 (Expr -> ID INC .)
    NEQ             reduce using rule 52 (Expr -> ID INC .)
    AND             reduce using rule 52 (Expr -> ID INC .)
    RCPARENT        reduce using rule 52 (Expr -> ID INC .)
    OR              reduce using rule 52 (Expr -> ID INC .)
    RCURLBRACKET    reduce using rule 52 (Expr -> ID INC .)
    ,               reduce using rule 52 (Expr -> ID INC .)


state 56

    (53) Expr -> ID DEC .

    SUM             reduce using rule 53 (Expr -> ID DEC .)
    SUB             reduce using rule 53 (Expr -> ID DEC .)
    MULT            reduce using rule 53 (Expr -> ID DEC .)
    DIV             reduce using rule 53 (Expr -> ID DEC .)
    MOD             reduce using rule 53 (Expr -> ID DEC .)
    NEWLINE         reduce using rule 53 (Expr -> ID DEC .)
    ID              reduce using rule 53 (Expr -> ID DEC .)
    IF              reduce using rule 53 (Expr -> ID DEC .)
    DO              reduce using rule 53 (Expr -> ID DEC .)
    PRINT           reduce using rule 53 (Expr -> ID DEC .)
    ENDMARKER       reduce using rule 53 (Expr -> ID DEC .)
    WHILE           reduce using rule 53 (Expr -> ID DEC .)
    DEDENT          reduce using rule 53 (Expr -> ID DEC .)
    ELSE            reduce using rule 53 (Expr -> ID DEC .)
    RSQBRACKET      reduce using rule 53 (Expr -> ID DEC .)
    GT              reduce using rule 53 (Expr -> ID DEC .)
    LT              reduce using rule 53 (Expr -> ID DEC .)
    GEQ             reduce using rule 53 (Expr -> ID DEC .)
    LEQ             reduce using rule 53 (Expr -> ID DEC .)
    EQUIV           reduce using rule 53 (Expr -> ID DEC .)
    NEQ             reduce using rule 53 (Expr -> ID DEC .)
    AND             reduce using rule 53 (Expr -> ID DEC .)
    RCPARENT        reduce using rule 53 (Expr -> ID DEC .)
    OR              reduce using rule 53 (Expr -> ID DEC .)
    RCURLBRACKET    reduce using rule 53 (Expr -> ID DEC .)
    ,               reduce using rule 53 (Expr -> ID DEC .)


state 57

    (55) Var -> ID LSQBRACKET . Expr RSQBRACKET
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 79
    Var                            shift and go to state 38

state 58

    (47) Expr -> Expr SUM . Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 80
    Var                            shift and go to state 38

state 59

    (48) Expr -> Expr SUB . Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 81
    Var                            shift and go to state 38

state 60

    (49) Expr -> Expr MULT . Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 82
    Var                            shift and go to state 38

state 61

    (50) Expr -> Expr DIV . Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 83
    Var                            shift and go to state 38

state 62

    (51) Expr -> Expr MOD . Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 84
    Var                            shift and go to state 38

state 63

    (56) Input -> INPUT LCPARENT . String RCPARENT
    (57) String -> . QUOTE STRING QUOTE
    (58) String -> .

    QUOTE           shift and go to state 50
    RCPARENT        reduce using rule 58 (String -> .)

    String                         shift and go to state 85

state 64

    (39) Atrib -> ID LSQBRACKET Expr RSQBRACKET . ATRIB Expr

    ATRIB           shift and go to state 86


state 65

    (25) If -> IF LCPARENT Cond RCPARENT . COLON Newline INDENT Corpo Dedent
    (26) If -> IF LCPARENT Cond RCPARENT . COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT

    COLON           shift and go to state 87


state 66

    (34) Cond -> Cond OR . Cond
    (28) Cond -> . Expr GT Expr
    (29) Cond -> . Expr LT Expr
    (30) Cond -> . Expr GEQ Expr
    (31) Cond -> . Expr LEQ Expr
    (32) Cond -> . Expr EQUIV Expr
    (33) Cond -> . Expr NEQ Expr
    (34) Cond -> . Cond OR Cond
    (35) Cond -> . Expr AND Expr
    (36) Cond -> . NOT Cond
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NOT             shift and go to state 44
    NUM             shift and go to state 39
    ID              shift and go to state 35

    Cond                           shift and go to state 88
    Expr                           shift and go to state 43
    Var                            shift and go to state 38

state 67

    (28) Cond -> Expr GT . Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 89
    Var                            shift and go to state 38

state 68

    (29) Cond -> Expr LT . Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 90
    Var                            shift and go to state 38

state 69

    (30) Cond -> Expr GEQ . Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 91
    Var                            shift and go to state 38

state 70

    (31) Cond -> Expr LEQ . Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 92
    Var                            shift and go to state 38

state 71

    (32) Cond -> Expr EQUIV . Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 93
    Var                            shift and go to state 38

state 72

    (33) Cond -> Expr NEQ . Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 94
    Var                            shift and go to state 38

state 73

    (35) Cond -> Expr AND . Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 95
    Var                            shift and go to state 38

state 74

    (36) Cond -> NOT Cond .
    (34) Cond -> Cond . OR Cond

  ! shift/reduce conflict for OR resolved as shift
    RCPARENT        reduce using rule 36 (Cond -> NOT Cond .)
    OR              shift and go to state 66

  ! OR              [ reduce using rule 36 (Cond -> NOT Cond .) ]


state 75

    (27) DoWhile -> DO COLON Newline INDENT . Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (21) Proc -> . Atrib
    (22) Proc -> . Print
    (23) Proc -> . If
    (24) Proc -> . DoWhile
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (37) Atrib -> . ID ATRIB Expr
    (38) Atrib -> . ID ATRIB Input
    (39) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (40) Print -> . NonFormatted
    (25) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (26) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (27) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (41) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    WHILE           reduce using rule 7 (Newline -> .)
    DEDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 96
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 76

    (41) NonFormatted -> PRINT LCPARENT Argument RCPARENT .

    NEWLINE         reduce using rule 41 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    ID              reduce using rule 41 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    IF              reduce using rule 41 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    DO              reduce using rule 41 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    PRINT           reduce using rule 41 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    ENDMARKER       reduce using rule 41 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    WHILE           reduce using rule 41 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    DEDENT          reduce using rule 41 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    ELSE            reduce using rule 41 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)


state 77

    (57) String -> QUOTE STRING . QUOTE

    QUOTE           shift and go to state 97


state 78

    (16) Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET . ATRIB ArrayValues
    (17) Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .

    ATRIB           shift and go to state 98
    NEWLINE         reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    INTDec          reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    ID              reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    IF              reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    DO              reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    PRINT           reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)
    ENDMARKER       reduce using rule 17 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET .)


state 79

    (55) Var -> ID LSQBRACKET Expr . RSQBRACKET
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    RSQBRACKET      shift and go to state 99
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62


state 80

    (47) Expr -> Expr SUM Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    SUM             reduce using rule 47 (Expr -> Expr SUM Expr .)
    SUB             reduce using rule 47 (Expr -> Expr SUM Expr .)
    MOD             reduce using rule 47 (Expr -> Expr SUM Expr .)
    NEWLINE         reduce using rule 47 (Expr -> Expr SUM Expr .)
    ID              reduce using rule 47 (Expr -> Expr SUM Expr .)
    IF              reduce using rule 47 (Expr -> Expr SUM Expr .)
    DO              reduce using rule 47 (Expr -> Expr SUM Expr .)
    PRINT           reduce using rule 47 (Expr -> Expr SUM Expr .)
    ENDMARKER       reduce using rule 47 (Expr -> Expr SUM Expr .)
    WHILE           reduce using rule 47 (Expr -> Expr SUM Expr .)
    DEDENT          reduce using rule 47 (Expr -> Expr SUM Expr .)
    ELSE            reduce using rule 47 (Expr -> Expr SUM Expr .)
    RSQBRACKET      reduce using rule 47 (Expr -> Expr SUM Expr .)
    GT              reduce using rule 47 (Expr -> Expr SUM Expr .)
    LT              reduce using rule 47 (Expr -> Expr SUM Expr .)
    GEQ             reduce using rule 47 (Expr -> Expr SUM Expr .)
    LEQ             reduce using rule 47 (Expr -> Expr SUM Expr .)
    EQUIV           reduce using rule 47 (Expr -> Expr SUM Expr .)
    NEQ             reduce using rule 47 (Expr -> Expr SUM Expr .)
    AND             reduce using rule 47 (Expr -> Expr SUM Expr .)
    RCPARENT        reduce using rule 47 (Expr -> Expr SUM Expr .)
    OR              reduce using rule 47 (Expr -> Expr SUM Expr .)
    RCURLBRACKET    reduce using rule 47 (Expr -> Expr SUM Expr .)
    ,               reduce using rule 47 (Expr -> Expr SUM Expr .)
    MULT            shift and go to state 60
    DIV             shift and go to state 61

  ! MULT            [ reduce using rule 47 (Expr -> Expr SUM Expr .) ]
  ! DIV             [ reduce using rule 47 (Expr -> Expr SUM Expr .) ]
  ! SUM             [ shift and go to state 58 ]
  ! SUB             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 62 ]


state 81

    (48) Expr -> Expr SUB Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    SUM             reduce using rule 48 (Expr -> Expr SUB Expr .)
    SUB             reduce using rule 48 (Expr -> Expr SUB Expr .)
    MOD             reduce using rule 48 (Expr -> Expr SUB Expr .)
    NEWLINE         reduce using rule 48 (Expr -> Expr SUB Expr .)
    ID              reduce using rule 48 (Expr -> Expr SUB Expr .)
    IF              reduce using rule 48 (Expr -> Expr SUB Expr .)
    DO              reduce using rule 48 (Expr -> Expr SUB Expr .)
    PRINT           reduce using rule 48 (Expr -> Expr SUB Expr .)
    ENDMARKER       reduce using rule 48 (Expr -> Expr SUB Expr .)
    WHILE           reduce using rule 48 (Expr -> Expr SUB Expr .)
    DEDENT          reduce using rule 48 (Expr -> Expr SUB Expr .)
    ELSE            reduce using rule 48 (Expr -> Expr SUB Expr .)
    RSQBRACKET      reduce using rule 48 (Expr -> Expr SUB Expr .)
    GT              reduce using rule 48 (Expr -> Expr SUB Expr .)
    LT              reduce using rule 48 (Expr -> Expr SUB Expr .)
    GEQ             reduce using rule 48 (Expr -> Expr SUB Expr .)
    LEQ             reduce using rule 48 (Expr -> Expr SUB Expr .)
    EQUIV           reduce using rule 48 (Expr -> Expr SUB Expr .)
    NEQ             reduce using rule 48 (Expr -> Expr SUB Expr .)
    AND             reduce using rule 48 (Expr -> Expr SUB Expr .)
    RCPARENT        reduce using rule 48 (Expr -> Expr SUB Expr .)
    OR              reduce using rule 48 (Expr -> Expr SUB Expr .)
    RCURLBRACKET    reduce using rule 48 (Expr -> Expr SUB Expr .)
    ,               reduce using rule 48 (Expr -> Expr SUB Expr .)
    MULT            shift and go to state 60
    DIV             shift and go to state 61

  ! MULT            [ reduce using rule 48 (Expr -> Expr SUB Expr .) ]
  ! DIV             [ reduce using rule 48 (Expr -> Expr SUB Expr .) ]
  ! SUM             [ shift and go to state 58 ]
  ! SUB             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 62 ]


state 82

    (49) Expr -> Expr MULT Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    SUM             reduce using rule 49 (Expr -> Expr MULT Expr .)
    SUB             reduce using rule 49 (Expr -> Expr MULT Expr .)
    MULT            reduce using rule 49 (Expr -> Expr MULT Expr .)
    DIV             reduce using rule 49 (Expr -> Expr MULT Expr .)
    MOD             reduce using rule 49 (Expr -> Expr MULT Expr .)
    NEWLINE         reduce using rule 49 (Expr -> Expr MULT Expr .)
    ID              reduce using rule 49 (Expr -> Expr MULT Expr .)
    IF              reduce using rule 49 (Expr -> Expr MULT Expr .)
    DO              reduce using rule 49 (Expr -> Expr MULT Expr .)
    PRINT           reduce using rule 49 (Expr -> Expr MULT Expr .)
    ENDMARKER       reduce using rule 49 (Expr -> Expr MULT Expr .)
    WHILE           reduce using rule 49 (Expr -> Expr MULT Expr .)
    DEDENT          reduce using rule 49 (Expr -> Expr MULT Expr .)
    ELSE            reduce using rule 49 (Expr -> Expr MULT Expr .)
    RSQBRACKET      reduce using rule 49 (Expr -> Expr MULT Expr .)
    GT              reduce using rule 49 (Expr -> Expr MULT Expr .)
    LT              reduce using rule 49 (Expr -> Expr MULT Expr .)
    GEQ             reduce using rule 49 (Expr -> Expr MULT Expr .)
    LEQ             reduce using rule 49 (Expr -> Expr MULT Expr .)
    EQUIV           reduce using rule 49 (Expr -> Expr MULT Expr .)
    NEQ             reduce using rule 49 (Expr -> Expr MULT Expr .)
    AND             reduce using rule 49 (Expr -> Expr MULT Expr .)
    RCPARENT        reduce using rule 49 (Expr -> Expr MULT Expr .)
    OR              reduce using rule 49 (Expr -> Expr MULT Expr .)
    RCURLBRACKET    reduce using rule 49 (Expr -> Expr MULT Expr .)
    ,               reduce using rule 49 (Expr -> Expr MULT Expr .)

  ! SUM             [ shift and go to state 58 ]
  ! SUB             [ shift and go to state 59 ]
  ! MULT            [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]


state 83

    (50) Expr -> Expr DIV Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    SUM             reduce using rule 50 (Expr -> Expr DIV Expr .)
    SUB             reduce using rule 50 (Expr -> Expr DIV Expr .)
    MULT            reduce using rule 50 (Expr -> Expr DIV Expr .)
    DIV             reduce using rule 50 (Expr -> Expr DIV Expr .)
    MOD             reduce using rule 50 (Expr -> Expr DIV Expr .)
    NEWLINE         reduce using rule 50 (Expr -> Expr DIV Expr .)
    ID              reduce using rule 50 (Expr -> Expr DIV Expr .)
    IF              reduce using rule 50 (Expr -> Expr DIV Expr .)
    DO              reduce using rule 50 (Expr -> Expr DIV Expr .)
    PRINT           reduce using rule 50 (Expr -> Expr DIV Expr .)
    ENDMARKER       reduce using rule 50 (Expr -> Expr DIV Expr .)
    WHILE           reduce using rule 50 (Expr -> Expr DIV Expr .)
    DEDENT          reduce using rule 50 (Expr -> Expr DIV Expr .)
    ELSE            reduce using rule 50 (Expr -> Expr DIV Expr .)
    RSQBRACKET      reduce using rule 50 (Expr -> Expr DIV Expr .)
    GT              reduce using rule 50 (Expr -> Expr DIV Expr .)
    LT              reduce using rule 50 (Expr -> Expr DIV Expr .)
    GEQ             reduce using rule 50 (Expr -> Expr DIV Expr .)
    LEQ             reduce using rule 50 (Expr -> Expr DIV Expr .)
    EQUIV           reduce using rule 50 (Expr -> Expr DIV Expr .)
    NEQ             reduce using rule 50 (Expr -> Expr DIV Expr .)
    AND             reduce using rule 50 (Expr -> Expr DIV Expr .)
    RCPARENT        reduce using rule 50 (Expr -> Expr DIV Expr .)
    OR              reduce using rule 50 (Expr -> Expr DIV Expr .)
    RCURLBRACKET    reduce using rule 50 (Expr -> Expr DIV Expr .)
    ,               reduce using rule 50 (Expr -> Expr DIV Expr .)

  ! SUM             [ shift and go to state 58 ]
  ! SUB             [ shift and go to state 59 ]
  ! MULT            [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]


state 84

    (51) Expr -> Expr MOD Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    NEWLINE         reduce using rule 51 (Expr -> Expr MOD Expr .)
    ID              reduce using rule 51 (Expr -> Expr MOD Expr .)
    IF              reduce using rule 51 (Expr -> Expr MOD Expr .)
    DO              reduce using rule 51 (Expr -> Expr MOD Expr .)
    PRINT           reduce using rule 51 (Expr -> Expr MOD Expr .)
    ENDMARKER       reduce using rule 51 (Expr -> Expr MOD Expr .)
    WHILE           reduce using rule 51 (Expr -> Expr MOD Expr .)
    DEDENT          reduce using rule 51 (Expr -> Expr MOD Expr .)
    ELSE            reduce using rule 51 (Expr -> Expr MOD Expr .)
    RSQBRACKET      reduce using rule 51 (Expr -> Expr MOD Expr .)
    GT              reduce using rule 51 (Expr -> Expr MOD Expr .)
    LT              reduce using rule 51 (Expr -> Expr MOD Expr .)
    GEQ             reduce using rule 51 (Expr -> Expr MOD Expr .)
    LEQ             reduce using rule 51 (Expr -> Expr MOD Expr .)
    EQUIV           reduce using rule 51 (Expr -> Expr MOD Expr .)
    NEQ             reduce using rule 51 (Expr -> Expr MOD Expr .)
    AND             reduce using rule 51 (Expr -> Expr MOD Expr .)
    RCPARENT        reduce using rule 51 (Expr -> Expr MOD Expr .)
    OR              reduce using rule 51 (Expr -> Expr MOD Expr .)
    RCURLBRACKET    reduce using rule 51 (Expr -> Expr MOD Expr .)
    ,               reduce using rule 51 (Expr -> Expr MOD Expr .)
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62

  ! SUM             [ reduce using rule 51 (Expr -> Expr MOD Expr .) ]
  ! SUB             [ reduce using rule 51 (Expr -> Expr MOD Expr .) ]
  ! MULT            [ reduce using rule 51 (Expr -> Expr MOD Expr .) ]
  ! DIV             [ reduce using rule 51 (Expr -> Expr MOD Expr .) ]
  ! MOD             [ reduce using rule 51 (Expr -> Expr MOD Expr .) ]


state 85

    (56) Input -> INPUT LCPARENT String . RCPARENT

    RCPARENT        shift and go to state 100


state 86

    (39) Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB . Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 101
    Var                            shift and go to state 38

state 87

    (25) If -> IF LCPARENT Cond RCPARENT COLON . Newline INDENT Corpo Dedent
    (26) If -> IF LCPARENT Cond RCPARENT COLON . Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (7) Newline -> .
    (8) Newline -> . NEWLINE

    INDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12

    Newline                        shift and go to state 102

state 88

    (34) Cond -> Cond OR Cond .
    (34) Cond -> Cond . OR Cond

  ! shift/reduce conflict for OR resolved as shift
    RCPARENT        reduce using rule 34 (Cond -> Cond OR Cond .)
    OR              shift and go to state 66

  ! OR              [ reduce using rule 34 (Cond -> Cond OR Cond .) ]


state 89

    (28) Cond -> Expr GT Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 28 (Cond -> Expr GT Expr .)
    OR              reduce using rule 28 (Cond -> Expr GT Expr .)
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62


state 90

    (29) Cond -> Expr LT Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 29 (Cond -> Expr LT Expr .)
    OR              reduce using rule 29 (Cond -> Expr LT Expr .)
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62


state 91

    (30) Cond -> Expr GEQ Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 30 (Cond -> Expr GEQ Expr .)
    OR              reduce using rule 30 (Cond -> Expr GEQ Expr .)
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62


state 92

    (31) Cond -> Expr LEQ Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 31 (Cond -> Expr LEQ Expr .)
    OR              reduce using rule 31 (Cond -> Expr LEQ Expr .)
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62


state 93

    (32) Cond -> Expr EQUIV Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 32 (Cond -> Expr EQUIV Expr .)
    OR              reduce using rule 32 (Cond -> Expr EQUIV Expr .)
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62


state 94

    (33) Cond -> Expr NEQ Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 33 (Cond -> Expr NEQ Expr .)
    OR              reduce using rule 33 (Cond -> Expr NEQ Expr .)
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62


state 95

    (35) Cond -> Expr AND Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 35 (Cond -> Expr AND Expr .)
    OR              reduce using rule 35 (Cond -> Expr AND Expr .)
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62


state 96

    (27) DoWhile -> DO COLON Newline INDENT Corpo . Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (5) Corpo -> Corpo . Proc Newline
    (9) Dedent -> . Dedent DEDENT
    (10) Dedent -> .
    (21) Proc -> . Atrib
    (22) Proc -> . Print
    (23) Proc -> . If
    (24) Proc -> . DoWhile
    (37) Atrib -> . ID ATRIB Expr
    (38) Atrib -> . ID ATRIB Input
    (39) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (40) Print -> . NonFormatted
    (25) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (26) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (27) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (41) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

    WHILE           reduce using rule 10 (Dedent -> .)
    DEDENT          reduce using rule 10 (Dedent -> .)
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

    Dedent                         shift and go to state 103
    Proc                           shift and go to state 20
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 97

    (57) String -> QUOTE STRING QUOTE .

    RCPARENT        reduce using rule 57 (String -> QUOTE STRING QUOTE .)


state 98

    (16) Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB . ArrayValues
    (18) ArrayValues -> . LCURLBRACKET ArrayIntValues RCURLBRACKET

    LCURLBRACKET    shift and go to state 105

    ArrayValues                    shift and go to state 104

state 99

    (55) Var -> ID LSQBRACKET Expr RSQBRACKET .

    SUM             reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    SUB             reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    MULT            reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    DIV             reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    MOD             reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    NEWLINE         reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    ID              reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    IF              reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    DO              reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    PRINT           reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    ENDMARKER       reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    WHILE           reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    DEDENT          reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    ELSE            reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    RSQBRACKET      reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    GT              reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    LT              reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    GEQ             reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    LEQ             reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    EQUIV           reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    NEQ             reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    AND             reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    RCPARENT        reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    OR              reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    RCURLBRACKET    reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)
    ,               reduce using rule 55 (Var -> ID LSQBRACKET Expr RSQBRACKET .)


state 100

    (56) Input -> INPUT LCPARENT String RCPARENT .

    NEWLINE         reduce using rule 56 (Input -> INPUT LCPARENT String RCPARENT .)
    ID              reduce using rule 56 (Input -> INPUT LCPARENT String RCPARENT .)
    IF              reduce using rule 56 (Input -> INPUT LCPARENT String RCPARENT .)
    DO              reduce using rule 56 (Input -> INPUT LCPARENT String RCPARENT .)
    PRINT           reduce using rule 56 (Input -> INPUT LCPARENT String RCPARENT .)
    ENDMARKER       reduce using rule 56 (Input -> INPUT LCPARENT String RCPARENT .)
    WHILE           reduce using rule 56 (Input -> INPUT LCPARENT String RCPARENT .)
    DEDENT          reduce using rule 56 (Input -> INPUT LCPARENT String RCPARENT .)
    ELSE            reduce using rule 56 (Input -> INPUT LCPARENT String RCPARENT .)
    INTDec          reduce using rule 56 (Input -> INPUT LCPARENT String RCPARENT .)


state 101

    (39) Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    NEWLINE         reduce using rule 39 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    ID              reduce using rule 39 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    IF              reduce using rule 39 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    DO              reduce using rule 39 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    PRINT           reduce using rule 39 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    ENDMARKER       reduce using rule 39 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    WHILE           reduce using rule 39 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    DEDENT          reduce using rule 39 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    ELSE            reduce using rule 39 (Atrib -> ID LSQBRACKET Expr RSQBRACKET ATRIB Expr .)
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62


state 102

    (25) If -> IF LCPARENT Cond RCPARENT COLON Newline . INDENT Corpo Dedent
    (26) If -> IF LCPARENT Cond RCPARENT COLON Newline . INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT

    INDENT          shift and go to state 106


state 103

    (27) DoWhile -> DO COLON Newline INDENT Corpo Dedent . WHILE LCPARENT Cond RCPARENT NEWLINE
    (9) Dedent -> Dedent . DEDENT

    WHILE           shift and go to state 107
    DEDENT          shift and go to state 108


state 104

    (16) Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .

    NEWLINE         reduce using rule 16 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    INTDec          reduce using rule 16 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    ID              reduce using rule 16 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    IF              reduce using rule 16 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    DO              reduce using rule 16 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    PRINT           reduce using rule 16 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)
    ENDMARKER       reduce using rule 16 (Decl -> INTDec ID LSQBRACKET NUM RSQBRACKET ATRIB ArrayValues .)


state 105

    (18) ArrayValues -> LCURLBRACKET . ArrayIntValues RCURLBRACKET
    (19) ArrayIntValues -> . ArrayIntValues , Expr
    (20) ArrayIntValues -> . Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    ArrayIntValues                 shift and go to state 109
    Expr                           shift and go to state 110
    Var                            shift and go to state 38

state 106

    (25) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT . Corpo Dedent
    (26) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT . Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (21) Proc -> . Atrib
    (22) Proc -> . Print
    (23) Proc -> . If
    (24) Proc -> . DoWhile
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (37) Atrib -> . ID ATRIB Expr
    (38) Atrib -> . ID ATRIB Input
    (39) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (40) Print -> . NonFormatted
    (25) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (26) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (27) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (41) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    ELSE            reduce using rule 7 (Newline -> .)
    DEDENT          reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    WHILE           reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]
  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 111
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 107

    (27) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE . LCPARENT Cond RCPARENT NEWLINE

    LCPARENT        shift and go to state 112


state 108

    (9) Dedent -> Dedent DEDENT .

    WHILE           reduce using rule 9 (Dedent -> Dedent DEDENT .)
    DEDENT          reduce using rule 9 (Dedent -> Dedent DEDENT .)
    ELSE            reduce using rule 9 (Dedent -> Dedent DEDENT .)
    NEWLINE         reduce using rule 9 (Dedent -> Dedent DEDENT .)
    ID              reduce using rule 9 (Dedent -> Dedent DEDENT .)
    IF              reduce using rule 9 (Dedent -> Dedent DEDENT .)
    DO              reduce using rule 9 (Dedent -> Dedent DEDENT .)
    PRINT           reduce using rule 9 (Dedent -> Dedent DEDENT .)
    ENDMARKER       reduce using rule 9 (Dedent -> Dedent DEDENT .)


state 109

    (18) ArrayValues -> LCURLBRACKET ArrayIntValues . RCURLBRACKET
    (19) ArrayIntValues -> ArrayIntValues . , Expr

    RCURLBRACKET    shift and go to state 113
    ,               shift and go to state 114


state 110

    (20) ArrayIntValues -> Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    RCURLBRACKET    reduce using rule 20 (ArrayIntValues -> Expr .)
    ,               reduce using rule 20 (ArrayIntValues -> Expr .)
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62


state 111

    (25) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo . Dedent
    (26) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo . Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (5) Corpo -> Corpo . Proc Newline
    (9) Dedent -> . Dedent DEDENT
    (10) Dedent -> .
    (21) Proc -> . Atrib
    (22) Proc -> . Print
    (23) Proc -> . If
    (24) Proc -> . DoWhile
    (37) Atrib -> . ID ATRIB Expr
    (38) Atrib -> . ID ATRIB Input
    (39) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (40) Print -> . NonFormatted
    (25) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (26) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (27) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (41) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    ELSE            reduce using rule 10 (Dedent -> .)
    DEDENT          reduce using rule 10 (Dedent -> .)
    NEWLINE         reduce using rule 10 (Dedent -> .)
    ENDMARKER       reduce using rule 10 (Dedent -> .)
    WHILE           reduce using rule 10 (Dedent -> .)
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

  ! ID              [ reduce using rule 10 (Dedent -> .) ]
  ! IF              [ reduce using rule 10 (Dedent -> .) ]
  ! DO              [ reduce using rule 10 (Dedent -> .) ]
  ! PRINT           [ reduce using rule 10 (Dedent -> .) ]

    Dedent                         shift and go to state 115
    Proc                           shift and go to state 20
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 112

    (27) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT . Cond RCPARENT NEWLINE
    (28) Cond -> . Expr GT Expr
    (29) Cond -> . Expr LT Expr
    (30) Cond -> . Expr GEQ Expr
    (31) Cond -> . Expr LEQ Expr
    (32) Cond -> . Expr EQUIV Expr
    (33) Cond -> . Expr NEQ Expr
    (34) Cond -> . Cond OR Cond
    (35) Cond -> . Expr AND Expr
    (36) Cond -> . NOT Cond
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NOT             shift and go to state 44
    NUM             shift and go to state 39
    ID              shift and go to state 35

    Cond                           shift and go to state 116
    Expr                           shift and go to state 43
    Var                            shift and go to state 38

state 113

    (18) ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .

    NEWLINE         reduce using rule 18 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    INTDec          reduce using rule 18 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    ID              reduce using rule 18 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    IF              reduce using rule 18 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    DO              reduce using rule 18 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    PRINT           reduce using rule 18 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)
    ENDMARKER       reduce using rule 18 (ArrayValues -> LCURLBRACKET ArrayIntValues RCURLBRACKET .)


state 114

    (19) ArrayIntValues -> ArrayIntValues , . Expr
    (45) Expr -> . Var
    (46) Expr -> . NUM
    (47) Expr -> . Expr SUM Expr
    (48) Expr -> . Expr SUB Expr
    (49) Expr -> . Expr MULT Expr
    (50) Expr -> . Expr DIV Expr
    (51) Expr -> . Expr MOD Expr
    (52) Expr -> . ID INC
    (53) Expr -> . ID DEC
    (54) Var -> . ID
    (55) Var -> . ID LSQBRACKET Expr RSQBRACKET

    NUM             shift and go to state 39
    ID              shift and go to state 35

    Expr                           shift and go to state 117
    Var                            shift and go to state 38

state 115

    (25) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .
    (26) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent . ELSE COLON Newline INDENT Corpo DEDENT
    (9) Dedent -> Dedent . DEDENT

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for DEDENT resolved as shift
    NEWLINE         reduce using rule 25 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ID              reduce using rule 25 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    IF              reduce using rule 25 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    DO              reduce using rule 25 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    PRINT           reduce using rule 25 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ENDMARKER       reduce using rule 25 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    WHILE           reduce using rule 25 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ELSE            shift and go to state 118
    DEDENT          shift and go to state 108

  ! DEDENT          [ reduce using rule 25 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .) ]
  ! ELSE            [ reduce using rule 25 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .) ]


state 116

    (27) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond . RCPARENT NEWLINE
    (34) Cond -> Cond . OR Cond

    RCPARENT        shift and go to state 119
    OR              shift and go to state 66


state 117

    (19) ArrayIntValues -> ArrayIntValues , Expr .
    (47) Expr -> Expr . SUM Expr
    (48) Expr -> Expr . SUB Expr
    (49) Expr -> Expr . MULT Expr
    (50) Expr -> Expr . DIV Expr
    (51) Expr -> Expr . MOD Expr

    RCURLBRACKET    reduce using rule 19 (ArrayIntValues -> ArrayIntValues , Expr .)
    ,               reduce using rule 19 (ArrayIntValues -> ArrayIntValues , Expr .)
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MULT            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62


state 118

    (26) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE . COLON Newline INDENT Corpo DEDENT

    COLON           shift and go to state 120


state 119

    (27) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT . NEWLINE

    NEWLINE         shift and go to state 121


state 120

    (26) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON . Newline INDENT Corpo DEDENT
    (7) Newline -> .
    (8) Newline -> . NEWLINE

    INDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12

    Newline                        shift and go to state 122

state 121

    (27) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .

    NEWLINE         reduce using rule 27 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    ID              reduce using rule 27 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    IF              reduce using rule 27 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    DO              reduce using rule 27 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    PRINT           reduce using rule 27 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    ENDMARKER       reduce using rule 27 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    WHILE           reduce using rule 27 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    DEDENT          reduce using rule 27 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    ELSE            reduce using rule 27 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)


state 122

    (26) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline . INDENT Corpo DEDENT

    INDENT          shift and go to state 123


state 123

    (26) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT . Corpo DEDENT
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (21) Proc -> . Atrib
    (22) Proc -> . Print
    (23) Proc -> . If
    (24) Proc -> . DoWhile
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (37) Atrib -> . ID ATRIB Expr
    (38) Atrib -> . ID ATRIB Input
    (39) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (40) Print -> . NonFormatted
    (25) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (26) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (27) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (41) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    DEDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 124
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 124

    (26) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo . DEDENT
    (5) Corpo -> Corpo . Proc Newline
    (21) Proc -> . Atrib
    (22) Proc -> . Print
    (23) Proc -> . If
    (24) Proc -> . DoWhile
    (37) Atrib -> . ID ATRIB Expr
    (38) Atrib -> . ID ATRIB Input
    (39) Atrib -> . ID LSQBRACKET Expr RSQBRACKET ATRIB Expr
    (40) Print -> . NonFormatted
    (25) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (26) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (27) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (41) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

    DEDENT          shift and go to state 125
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

    Proc                           shift and go to state 20
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 125

    (26) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .

    NEWLINE         reduce using rule 26 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    ID              reduce using rule 26 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    IF              reduce using rule 26 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    DO              reduce using rule 26 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    PRINT           reduce using rule 26 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    ENDMARKER       reduce using rule 26 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    WHILE           reduce using rule 26 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    DEDENT          reduce using rule 26 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    ELSE            reduce using rule 26 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for DO in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for DO in state 4 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 5 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 7 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 20 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 22 resolved as shift
WARNING: shift/reduce conflict for OR in state 74 resolved as shift
WARNING: shift/reduce conflict for ID in state 75 resolved as shift
WARNING: shift/reduce conflict for IF in state 75 resolved as shift
WARNING: shift/reduce conflict for DO in state 75 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 75 resolved as shift
WARNING: shift/reduce conflict for SUM in state 84 resolved as shift
WARNING: shift/reduce conflict for SUB in state 84 resolved as shift
WARNING: shift/reduce conflict for MULT in state 84 resolved as shift
WARNING: shift/reduce conflict for DIV in state 84 resolved as shift
WARNING: shift/reduce conflict for MOD in state 84 resolved as shift
WARNING: shift/reduce conflict for OR in state 88 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 106 resolved as shift
WARNING: shift/reduce conflict for ID in state 106 resolved as shift
WARNING: shift/reduce conflict for IF in state 106 resolved as shift
WARNING: shift/reduce conflict for DO in state 106 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 106 resolved as shift
WARNING: shift/reduce conflict for ID in state 111 resolved as shift
WARNING: shift/reduce conflict for IF in state 111 resolved as shift
WARNING: shift/reduce conflict for DO in state 111 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 111 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 115 resolved as shift
WARNING: shift/reduce conflict for DEDENT in state 115 resolved as shift
WARNING: shift/reduce conflict for ID in state 123 resolved as shift
WARNING: shift/reduce conflict for IF in state 123 resolved as shift
WARNING: shift/reduce conflict for DO in state 123 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 123 resolved as shift
WARNING: reduce/reduce conflict in state 48 resolved using rule (Argument -> Var)
WARNING: rejected rule (Expr -> Var) in state 48
