Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELIF
    LSQBRACKET
    RSQBRACKET
    WS

Grammar

Rule 0     S' -> ProgramaInit
Rule 1     ProgramaInit -> Programa ENDMARKER
Rule 2     Programa -> Corpo
Rule 3     Programa -> Decls Corpo
Rule 4     Corpo -> Proc Newline
Rule 5     Corpo -> Corpo Proc Newline
Rule 6     Corpo -> Newline
Rule 7     Newline -> <empty>
Rule 8     Newline -> NEWLINE
Rule 9     Dedent -> Dedent DEDENT
Rule 10    Dedent -> <empty>
Rule 11    Decls -> Decl Newline
Rule 12    Decls -> Decls Decl Newline
Rule 13    Decl -> INTDec ID
Rule 14    Decl -> INTDec ID ATRIB NUM
Rule 15    Decl -> INTDec ID ATRIB Input
Rule 16    Proc -> Atrib
Rule 17    Proc -> Print
Rule 18    Proc -> If
Rule 19    Proc -> DoWhile
Rule 20    If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
Rule 21    If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
Rule 22    DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
Rule 23    Cond -> Expr GT Expr
Rule 24    Cond -> Expr LT Expr
Rule 25    Cond -> Expr GEQ Expr
Rule 26    Cond -> Expr LEQ Expr
Rule 27    Cond -> Expr EQUIV Expr
Rule 28    Cond -> Expr NEQ Expr
Rule 29    Cond -> Cond OR Cond
Rule 30    Cond -> Expr AND Expr
Rule 31    Cond -> NOT Cond
Rule 32    Atrib -> ID ATRIB Expr
Rule 33    Atrib -> ID ATRIB Input
Rule 34    Print -> NonFormatted
Rule 35    NonFormatted -> PRINT LCPARENT Argument RCPARENT
Rule 36    Argument -> String
Rule 37    Argument -> Var
Rule 38    Argument -> Expr
Rule 39    Expr -> Var
Rule 40    Expr -> NUM
Rule 41    Expr -> Expr SUM Expr
Rule 42    Expr -> Expr SUB Expr
Rule 43    Expr -> Expr MULT Expr
Rule 44    Expr -> Expr DIV Expr
Rule 45    Expr -> Expr MOD Expr
Rule 46    Expr -> ID INC
Rule 47    Expr -> ID DEC
Rule 48    Var -> ID
Rule 49    Input -> INPUT LCPARENT String RCPARENT
Rule 50    String -> QUOTE STRING QUOTE
Rule 51    String -> <empty>

Terminals, with rules where they appear

AND                  : 30
ATRIB                : 14 15 32 33
COLON                : 20 21 21 22
DEC                  : 47
DEDENT               : 9 21
DIV                  : 44
DO                   : 22
ELIF                 : 
ELSE                 : 21
ENDMARKER            : 1
EQUIV                : 27
GEQ                  : 25
GT                   : 23
ID                   : 13 14 15 32 33 46 47 48
IF                   : 20 21
INC                  : 46
INDENT               : 20 21 21 22
INPUT                : 49
INTDec               : 13 14 15
LCPARENT             : 20 21 22 35 49
LEQ                  : 26
LSQBRACKET           : 
LT                   : 24
MOD                  : 45
MULT                 : 43
NEQ                  : 28
NEWLINE              : 8 22
NOT                  : 31
NUM                  : 14 40
OR                   : 29
PRINT                : 35
QUOTE                : 50 50
RCPARENT             : 20 21 22 35 49
RSQBRACKET           : 
STRING               : 50
SUB                  : 42
SUM                  : 41
WHILE                : 22
WS                   : 
error                : 

Nonterminals, with rules where they appear

Argument             : 35
Atrib                : 16
Cond                 : 20 21 22 29 29 31
Corpo                : 2 3 5 20 21 21 22
Decl                 : 11 12
Decls                : 3 12
Dedent               : 9 20 21 22
DoWhile              : 19
Expr                 : 23 23 24 24 25 25 26 26 27 27 28 28 30 30 32 38 41 41 42 42 43 43 44 44 45 45
If                   : 18
Input                : 15 33
Newline              : 4 5 6 11 12 20 21 21 22
NonFormatted         : 34
Print                : 17
Proc                 : 4 5
Programa             : 1
ProgramaInit         : 0
String               : 36 49
Var                  : 37 39

Parsing method: LALR

state 0

    (0) S' -> . ProgramaInit
    (1) ProgramaInit -> . Programa ENDMARKER
    (2) Programa -> . Corpo
    (3) Programa -> . Decls Corpo
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (11) Decls -> . Decl Newline
    (12) Decls -> . Decls Decl Newline
    (16) Proc -> . Atrib
    (17) Proc -> . Print
    (18) Proc -> . If
    (19) Proc -> . DoWhile
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (13) Decl -> . INTDec ID
    (14) Decl -> . INTDec ID ATRIB NUM
    (15) Decl -> . INTDec ID ATRIB Input
    (32) Atrib -> . ID ATRIB Expr
    (33) Atrib -> . ID ATRIB Input
    (34) Print -> . NonFormatted
    (20) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (21) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (22) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (35) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    ENDMARKER       reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12
    INTDec          shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]

    ProgramaInit                   shift and go to state 1
    Programa                       shift and go to state 2
    Corpo                          shift and go to state 3
    Decls                          shift and go to state 4
    Proc                           shift and go to state 5
    Newline                        shift and go to state 6
    Decl                           shift and go to state 7
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 1

    (0) S' -> ProgramaInit .



state 2

    (1) ProgramaInit -> Programa . ENDMARKER

    ENDMARKER       shift and go to state 19


state 3

    (2) Programa -> Corpo .
    (5) Corpo -> Corpo . Proc Newline
    (16) Proc -> . Atrib
    (17) Proc -> . Print
    (18) Proc -> . If
    (19) Proc -> . DoWhile
    (32) Atrib -> . ID ATRIB Expr
    (33) Atrib -> . ID ATRIB Input
    (34) Print -> . NonFormatted
    (20) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (21) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (22) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (35) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

    ENDMARKER       reduce using rule 2 (Programa -> Corpo .)
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

    Proc                           shift and go to state 20
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 4

    (3) Programa -> Decls . Corpo
    (12) Decls -> Decls . Decl Newline
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (13) Decl -> . INTDec ID
    (14) Decl -> . INTDec ID ATRIB NUM
    (15) Decl -> . INTDec ID ATRIB Input
    (16) Proc -> . Atrib
    (17) Proc -> . Print
    (18) Proc -> . If
    (19) Proc -> . DoWhile
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (32) Atrib -> . ID ATRIB Expr
    (33) Atrib -> . ID ATRIB Input
    (34) Print -> . NonFormatted
    (20) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (21) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (22) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (35) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    INTDec          shift and go to state 13
    ENDMARKER       reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]

    Corpo                          shift and go to state 21
    Decl                           shift and go to state 22
    Newline                        shift and go to state 6
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 5

    (4) Corpo -> Proc . Newline
    (7) Newline -> .
    (8) Newline -> . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    ID              reduce using rule 7 (Newline -> .)
    IF              reduce using rule 7 (Newline -> .)
    DO              reduce using rule 7 (Newline -> .)
    PRINT           reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    WHILE           reduce using rule 7 (Newline -> .)
    DEDENT          reduce using rule 7 (Newline -> .)
    ELSE            reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12

  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 23

state 6

    (6) Corpo -> Newline .

    ID              reduce using rule 6 (Corpo -> Newline .)
    IF              reduce using rule 6 (Corpo -> Newline .)
    DO              reduce using rule 6 (Corpo -> Newline .)
    PRINT           reduce using rule 6 (Corpo -> Newline .)
    ENDMARKER       reduce using rule 6 (Corpo -> Newline .)
    WHILE           reduce using rule 6 (Corpo -> Newline .)
    DEDENT          reduce using rule 6 (Corpo -> Newline .)
    ELSE            reduce using rule 6 (Corpo -> Newline .)
    NEWLINE         reduce using rule 6 (Corpo -> Newline .)


state 7

    (11) Decls -> Decl . Newline
    (7) Newline -> .
    (8) Newline -> . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    INTDec          reduce using rule 7 (Newline -> .)
    ID              reduce using rule 7 (Newline -> .)
    IF              reduce using rule 7 (Newline -> .)
    DO              reduce using rule 7 (Newline -> .)
    PRINT           reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12

  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 24

state 8

    (16) Proc -> Atrib .

    NEWLINE         reduce using rule 16 (Proc -> Atrib .)
    ID              reduce using rule 16 (Proc -> Atrib .)
    IF              reduce using rule 16 (Proc -> Atrib .)
    DO              reduce using rule 16 (Proc -> Atrib .)
    PRINT           reduce using rule 16 (Proc -> Atrib .)
    ENDMARKER       reduce using rule 16 (Proc -> Atrib .)
    WHILE           reduce using rule 16 (Proc -> Atrib .)
    DEDENT          reduce using rule 16 (Proc -> Atrib .)
    ELSE            reduce using rule 16 (Proc -> Atrib .)


state 9

    (17) Proc -> Print .

    NEWLINE         reduce using rule 17 (Proc -> Print .)
    ID              reduce using rule 17 (Proc -> Print .)
    IF              reduce using rule 17 (Proc -> Print .)
    DO              reduce using rule 17 (Proc -> Print .)
    PRINT           reduce using rule 17 (Proc -> Print .)
    ENDMARKER       reduce using rule 17 (Proc -> Print .)
    WHILE           reduce using rule 17 (Proc -> Print .)
    DEDENT          reduce using rule 17 (Proc -> Print .)
    ELSE            reduce using rule 17 (Proc -> Print .)


state 10

    (18) Proc -> If .

    NEWLINE         reduce using rule 18 (Proc -> If .)
    ID              reduce using rule 18 (Proc -> If .)
    IF              reduce using rule 18 (Proc -> If .)
    DO              reduce using rule 18 (Proc -> If .)
    PRINT           reduce using rule 18 (Proc -> If .)
    ENDMARKER       reduce using rule 18 (Proc -> If .)
    WHILE           reduce using rule 18 (Proc -> If .)
    DEDENT          reduce using rule 18 (Proc -> If .)
    ELSE            reduce using rule 18 (Proc -> If .)


state 11

    (19) Proc -> DoWhile .

    NEWLINE         reduce using rule 19 (Proc -> DoWhile .)
    ID              reduce using rule 19 (Proc -> DoWhile .)
    IF              reduce using rule 19 (Proc -> DoWhile .)
    DO              reduce using rule 19 (Proc -> DoWhile .)
    PRINT           reduce using rule 19 (Proc -> DoWhile .)
    ENDMARKER       reduce using rule 19 (Proc -> DoWhile .)
    WHILE           reduce using rule 19 (Proc -> DoWhile .)
    DEDENT          reduce using rule 19 (Proc -> DoWhile .)
    ELSE            reduce using rule 19 (Proc -> DoWhile .)


state 12

    (8) Newline -> NEWLINE .

    ID              reduce using rule 8 (Newline -> NEWLINE .)
    IF              reduce using rule 8 (Newline -> NEWLINE .)
    DO              reduce using rule 8 (Newline -> NEWLINE .)
    PRINT           reduce using rule 8 (Newline -> NEWLINE .)
    ENDMARKER       reduce using rule 8 (Newline -> NEWLINE .)
    WHILE           reduce using rule 8 (Newline -> NEWLINE .)
    DEDENT          reduce using rule 8 (Newline -> NEWLINE .)
    ELSE            reduce using rule 8 (Newline -> NEWLINE .)
    NEWLINE         reduce using rule 8 (Newline -> NEWLINE .)
    INTDec          reduce using rule 8 (Newline -> NEWLINE .)
    INDENT          reduce using rule 8 (Newline -> NEWLINE .)


state 13

    (13) Decl -> INTDec . ID
    (14) Decl -> INTDec . ID ATRIB NUM
    (15) Decl -> INTDec . ID ATRIB Input

    ID              shift and go to state 25


state 14

    (32) Atrib -> ID . ATRIB Expr
    (33) Atrib -> ID . ATRIB Input

    ATRIB           shift and go to state 26


state 15

    (34) Print -> NonFormatted .

    NEWLINE         reduce using rule 34 (Print -> NonFormatted .)
    ID              reduce using rule 34 (Print -> NonFormatted .)
    IF              reduce using rule 34 (Print -> NonFormatted .)
    DO              reduce using rule 34 (Print -> NonFormatted .)
    PRINT           reduce using rule 34 (Print -> NonFormatted .)
    ENDMARKER       reduce using rule 34 (Print -> NonFormatted .)
    WHILE           reduce using rule 34 (Print -> NonFormatted .)
    DEDENT          reduce using rule 34 (Print -> NonFormatted .)
    ELSE            reduce using rule 34 (Print -> NonFormatted .)


state 16

    (20) If -> IF . LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (21) If -> IF . LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT

    LCPARENT        shift and go to state 27


state 17

    (22) DoWhile -> DO . COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

    COLON           shift and go to state 28


state 18

    (35) NonFormatted -> PRINT . LCPARENT Argument RCPARENT

    LCPARENT        shift and go to state 29


state 19

    (1) ProgramaInit -> Programa ENDMARKER .

    $end            reduce using rule 1 (ProgramaInit -> Programa ENDMARKER .)


state 20

    (5) Corpo -> Corpo Proc . Newline
    (7) Newline -> .
    (8) Newline -> . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    ID              reduce using rule 7 (Newline -> .)
    IF              reduce using rule 7 (Newline -> .)
    DO              reduce using rule 7 (Newline -> .)
    PRINT           reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    WHILE           reduce using rule 7 (Newline -> .)
    DEDENT          reduce using rule 7 (Newline -> .)
    ELSE            reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12

  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 30

state 21

    (3) Programa -> Decls Corpo .
    (5) Corpo -> Corpo . Proc Newline
    (16) Proc -> . Atrib
    (17) Proc -> . Print
    (18) Proc -> . If
    (19) Proc -> . DoWhile
    (32) Atrib -> . ID ATRIB Expr
    (33) Atrib -> . ID ATRIB Input
    (34) Print -> . NonFormatted
    (20) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (21) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (22) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (35) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

    ENDMARKER       reduce using rule 3 (Programa -> Decls Corpo .)
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

    Proc                           shift and go to state 20
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 22

    (12) Decls -> Decls Decl . Newline
    (7) Newline -> .
    (8) Newline -> . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    INTDec          reduce using rule 7 (Newline -> .)
    ID              reduce using rule 7 (Newline -> .)
    IF              reduce using rule 7 (Newline -> .)
    DO              reduce using rule 7 (Newline -> .)
    PRINT           reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12

  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 31

state 23

    (4) Corpo -> Proc Newline .

    ID              reduce using rule 4 (Corpo -> Proc Newline .)
    IF              reduce using rule 4 (Corpo -> Proc Newline .)
    DO              reduce using rule 4 (Corpo -> Proc Newline .)
    PRINT           reduce using rule 4 (Corpo -> Proc Newline .)
    ENDMARKER       reduce using rule 4 (Corpo -> Proc Newline .)
    WHILE           reduce using rule 4 (Corpo -> Proc Newline .)
    DEDENT          reduce using rule 4 (Corpo -> Proc Newline .)
    ELSE            reduce using rule 4 (Corpo -> Proc Newline .)
    NEWLINE         reduce using rule 4 (Corpo -> Proc Newline .)


state 24

    (11) Decls -> Decl Newline .

    INTDec          reduce using rule 11 (Decls -> Decl Newline .)
    NEWLINE         reduce using rule 11 (Decls -> Decl Newline .)
    ID              reduce using rule 11 (Decls -> Decl Newline .)
    IF              reduce using rule 11 (Decls -> Decl Newline .)
    DO              reduce using rule 11 (Decls -> Decl Newline .)
    PRINT           reduce using rule 11 (Decls -> Decl Newline .)
    ENDMARKER       reduce using rule 11 (Decls -> Decl Newline .)


state 25

    (13) Decl -> INTDec ID .
    (14) Decl -> INTDec ID . ATRIB NUM
    (15) Decl -> INTDec ID . ATRIB Input

    NEWLINE         reduce using rule 13 (Decl -> INTDec ID .)
    INTDec          reduce using rule 13 (Decl -> INTDec ID .)
    ID              reduce using rule 13 (Decl -> INTDec ID .)
    IF              reduce using rule 13 (Decl -> INTDec ID .)
    DO              reduce using rule 13 (Decl -> INTDec ID .)
    PRINT           reduce using rule 13 (Decl -> INTDec ID .)
    ENDMARKER       reduce using rule 13 (Decl -> INTDec ID .)
    ATRIB           shift and go to state 32


state 26

    (32) Atrib -> ID ATRIB . Expr
    (33) Atrib -> ID ATRIB . Input
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (49) Input -> . INPUT LCPARENT String RCPARENT
    (48) Var -> . ID

    NUM             shift and go to state 37
    ID              shift and go to state 33
    INPUT           shift and go to state 38

    Expr                           shift and go to state 34
    Input                          shift and go to state 35
    Var                            shift and go to state 36

state 27

    (20) If -> IF LCPARENT . Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (21) If -> IF LCPARENT . Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (23) Cond -> . Expr GT Expr
    (24) Cond -> . Expr LT Expr
    (25) Cond -> . Expr GEQ Expr
    (26) Cond -> . Expr LEQ Expr
    (27) Cond -> . Expr EQUIV Expr
    (28) Cond -> . Expr NEQ Expr
    (29) Cond -> . Cond OR Cond
    (30) Cond -> . Expr AND Expr
    (31) Cond -> . NOT Cond
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NOT             shift and go to state 41
    NUM             shift and go to state 37
    ID              shift and go to state 33

    Cond                           shift and go to state 39
    Expr                           shift and go to state 40
    Var                            shift and go to state 36

state 28

    (22) DoWhile -> DO COLON . Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (7) Newline -> .
    (8) Newline -> . NEWLINE

    INDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12

    Newline                        shift and go to state 42

state 29

    (35) NonFormatted -> PRINT LCPARENT . Argument RCPARENT
    (36) Argument -> . String
    (37) Argument -> . Var
    (38) Argument -> . Expr
    (50) String -> . QUOTE STRING QUOTE
    (51) String -> .
    (48) Var -> . ID
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC

    QUOTE           shift and go to state 47
    RCPARENT        reduce using rule 51 (String -> .)
    ID              shift and go to state 48
    NUM             shift and go to state 37

    Argument                       shift and go to state 43
    String                         shift and go to state 44
    Var                            shift and go to state 45
    Expr                           shift and go to state 46

state 30

    (5) Corpo -> Corpo Proc Newline .

    ID              reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    IF              reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    DO              reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    PRINT           reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    ENDMARKER       reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    WHILE           reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    DEDENT          reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    ELSE            reduce using rule 5 (Corpo -> Corpo Proc Newline .)
    NEWLINE         reduce using rule 5 (Corpo -> Corpo Proc Newline .)


state 31

    (12) Decls -> Decls Decl Newline .

    INTDec          reduce using rule 12 (Decls -> Decls Decl Newline .)
    NEWLINE         reduce using rule 12 (Decls -> Decls Decl Newline .)
    ID              reduce using rule 12 (Decls -> Decls Decl Newline .)
    IF              reduce using rule 12 (Decls -> Decls Decl Newline .)
    DO              reduce using rule 12 (Decls -> Decls Decl Newline .)
    PRINT           reduce using rule 12 (Decls -> Decls Decl Newline .)
    ENDMARKER       reduce using rule 12 (Decls -> Decls Decl Newline .)


state 32

    (14) Decl -> INTDec ID ATRIB . NUM
    (15) Decl -> INTDec ID ATRIB . Input
    (49) Input -> . INPUT LCPARENT String RCPARENT

    NUM             shift and go to state 49
    INPUT           shift and go to state 38

    Input                          shift and go to state 50

state 33

    (46) Expr -> ID . INC
    (47) Expr -> ID . DEC
    (48) Var -> ID .

    INC             shift and go to state 51
    DEC             shift and go to state 52
    SUM             reduce using rule 48 (Var -> ID .)
    SUB             reduce using rule 48 (Var -> ID .)
    MULT            reduce using rule 48 (Var -> ID .)
    DIV             reduce using rule 48 (Var -> ID .)
    MOD             reduce using rule 48 (Var -> ID .)
    NEWLINE         reduce using rule 48 (Var -> ID .)
    ID              reduce using rule 48 (Var -> ID .)
    IF              reduce using rule 48 (Var -> ID .)
    DO              reduce using rule 48 (Var -> ID .)
    PRINT           reduce using rule 48 (Var -> ID .)
    ENDMARKER       reduce using rule 48 (Var -> ID .)
    WHILE           reduce using rule 48 (Var -> ID .)
    DEDENT          reduce using rule 48 (Var -> ID .)
    ELSE            reduce using rule 48 (Var -> ID .)
    GT              reduce using rule 48 (Var -> ID .)
    LT              reduce using rule 48 (Var -> ID .)
    GEQ             reduce using rule 48 (Var -> ID .)
    LEQ             reduce using rule 48 (Var -> ID .)
    EQUIV           reduce using rule 48 (Var -> ID .)
    NEQ             reduce using rule 48 (Var -> ID .)
    AND             reduce using rule 48 (Var -> ID .)
    RCPARENT        reduce using rule 48 (Var -> ID .)
    OR              reduce using rule 48 (Var -> ID .)


state 34

    (32) Atrib -> ID ATRIB Expr .
    (41) Expr -> Expr . SUM Expr
    (42) Expr -> Expr . SUB Expr
    (43) Expr -> Expr . MULT Expr
    (44) Expr -> Expr . DIV Expr
    (45) Expr -> Expr . MOD Expr

    NEWLINE         reduce using rule 32 (Atrib -> ID ATRIB Expr .)
    ID              reduce using rule 32 (Atrib -> ID ATRIB Expr .)
    IF              reduce using rule 32 (Atrib -> ID ATRIB Expr .)
    DO              reduce using rule 32 (Atrib -> ID ATRIB Expr .)
    PRINT           reduce using rule 32 (Atrib -> ID ATRIB Expr .)
    ENDMARKER       reduce using rule 32 (Atrib -> ID ATRIB Expr .)
    WHILE           reduce using rule 32 (Atrib -> ID ATRIB Expr .)
    DEDENT          reduce using rule 32 (Atrib -> ID ATRIB Expr .)
    ELSE            reduce using rule 32 (Atrib -> ID ATRIB Expr .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MULT            shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57


state 35

    (33) Atrib -> ID ATRIB Input .

    NEWLINE         reduce using rule 33 (Atrib -> ID ATRIB Input .)
    ID              reduce using rule 33 (Atrib -> ID ATRIB Input .)
    IF              reduce using rule 33 (Atrib -> ID ATRIB Input .)
    DO              reduce using rule 33 (Atrib -> ID ATRIB Input .)
    PRINT           reduce using rule 33 (Atrib -> ID ATRIB Input .)
    ENDMARKER       reduce using rule 33 (Atrib -> ID ATRIB Input .)
    WHILE           reduce using rule 33 (Atrib -> ID ATRIB Input .)
    DEDENT          reduce using rule 33 (Atrib -> ID ATRIB Input .)
    ELSE            reduce using rule 33 (Atrib -> ID ATRIB Input .)


state 36

    (39) Expr -> Var .

    SUM             reduce using rule 39 (Expr -> Var .)
    SUB             reduce using rule 39 (Expr -> Var .)
    MULT            reduce using rule 39 (Expr -> Var .)
    DIV             reduce using rule 39 (Expr -> Var .)
    MOD             reduce using rule 39 (Expr -> Var .)
    NEWLINE         reduce using rule 39 (Expr -> Var .)
    ID              reduce using rule 39 (Expr -> Var .)
    IF              reduce using rule 39 (Expr -> Var .)
    DO              reduce using rule 39 (Expr -> Var .)
    PRINT           reduce using rule 39 (Expr -> Var .)
    ENDMARKER       reduce using rule 39 (Expr -> Var .)
    WHILE           reduce using rule 39 (Expr -> Var .)
    DEDENT          reduce using rule 39 (Expr -> Var .)
    ELSE            reduce using rule 39 (Expr -> Var .)
    GT              reduce using rule 39 (Expr -> Var .)
    LT              reduce using rule 39 (Expr -> Var .)
    GEQ             reduce using rule 39 (Expr -> Var .)
    LEQ             reduce using rule 39 (Expr -> Var .)
    EQUIV           reduce using rule 39 (Expr -> Var .)
    NEQ             reduce using rule 39 (Expr -> Var .)
    AND             reduce using rule 39 (Expr -> Var .)
    RCPARENT        reduce using rule 39 (Expr -> Var .)
    OR              reduce using rule 39 (Expr -> Var .)


state 37

    (40) Expr -> NUM .

    SUM             reduce using rule 40 (Expr -> NUM .)
    SUB             reduce using rule 40 (Expr -> NUM .)
    MULT            reduce using rule 40 (Expr -> NUM .)
    DIV             reduce using rule 40 (Expr -> NUM .)
    MOD             reduce using rule 40 (Expr -> NUM .)
    NEWLINE         reduce using rule 40 (Expr -> NUM .)
    ID              reduce using rule 40 (Expr -> NUM .)
    IF              reduce using rule 40 (Expr -> NUM .)
    DO              reduce using rule 40 (Expr -> NUM .)
    PRINT           reduce using rule 40 (Expr -> NUM .)
    ENDMARKER       reduce using rule 40 (Expr -> NUM .)
    WHILE           reduce using rule 40 (Expr -> NUM .)
    DEDENT          reduce using rule 40 (Expr -> NUM .)
    ELSE            reduce using rule 40 (Expr -> NUM .)
    GT              reduce using rule 40 (Expr -> NUM .)
    LT              reduce using rule 40 (Expr -> NUM .)
    GEQ             reduce using rule 40 (Expr -> NUM .)
    LEQ             reduce using rule 40 (Expr -> NUM .)
    EQUIV           reduce using rule 40 (Expr -> NUM .)
    NEQ             reduce using rule 40 (Expr -> NUM .)
    AND             reduce using rule 40 (Expr -> NUM .)
    RCPARENT        reduce using rule 40 (Expr -> NUM .)
    OR              reduce using rule 40 (Expr -> NUM .)


state 38

    (49) Input -> INPUT . LCPARENT String RCPARENT

    LCPARENT        shift and go to state 58


state 39

    (20) If -> IF LCPARENT Cond . RCPARENT COLON Newline INDENT Corpo Dedent
    (21) If -> IF LCPARENT Cond . RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (29) Cond -> Cond . OR Cond

    RCPARENT        shift and go to state 59
    OR              shift and go to state 60


state 40

    (23) Cond -> Expr . GT Expr
    (24) Cond -> Expr . LT Expr
    (25) Cond -> Expr . GEQ Expr
    (26) Cond -> Expr . LEQ Expr
    (27) Cond -> Expr . EQUIV Expr
    (28) Cond -> Expr . NEQ Expr
    (30) Cond -> Expr . AND Expr
    (41) Expr -> Expr . SUM Expr
    (42) Expr -> Expr . SUB Expr
    (43) Expr -> Expr . MULT Expr
    (44) Expr -> Expr . DIV Expr
    (45) Expr -> Expr . MOD Expr

    GT              shift and go to state 61
    LT              shift and go to state 62
    GEQ             shift and go to state 63
    LEQ             shift and go to state 64
    EQUIV           shift and go to state 65
    NEQ             shift and go to state 66
    AND             shift and go to state 67
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MULT            shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57


state 41

    (31) Cond -> NOT . Cond
    (23) Cond -> . Expr GT Expr
    (24) Cond -> . Expr LT Expr
    (25) Cond -> . Expr GEQ Expr
    (26) Cond -> . Expr LEQ Expr
    (27) Cond -> . Expr EQUIV Expr
    (28) Cond -> . Expr NEQ Expr
    (29) Cond -> . Cond OR Cond
    (30) Cond -> . Expr AND Expr
    (31) Cond -> . NOT Cond
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NOT             shift and go to state 41
    NUM             shift and go to state 37
    ID              shift and go to state 33

    Cond                           shift and go to state 68
    Expr                           shift and go to state 40
    Var                            shift and go to state 36

state 42

    (22) DoWhile -> DO COLON Newline . INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE

    INDENT          shift and go to state 69


state 43

    (35) NonFormatted -> PRINT LCPARENT Argument . RCPARENT

    RCPARENT        shift and go to state 70


state 44

    (36) Argument -> String .

    RCPARENT        reduce using rule 36 (Argument -> String .)


state 45

    (37) Argument -> Var .
    (39) Expr -> Var .

  ! reduce/reduce conflict for RCPARENT resolved using rule 37 (Argument -> Var .)
    RCPARENT        reduce using rule 37 (Argument -> Var .)
    SUM             reduce using rule 39 (Expr -> Var .)
    SUB             reduce using rule 39 (Expr -> Var .)
    MULT            reduce using rule 39 (Expr -> Var .)
    DIV             reduce using rule 39 (Expr -> Var .)
    MOD             reduce using rule 39 (Expr -> Var .)

  ! RCPARENT        [ reduce using rule 39 (Expr -> Var .) ]


state 46

    (38) Argument -> Expr .
    (41) Expr -> Expr . SUM Expr
    (42) Expr -> Expr . SUB Expr
    (43) Expr -> Expr . MULT Expr
    (44) Expr -> Expr . DIV Expr
    (45) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 38 (Argument -> Expr .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MULT            shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57


state 47

    (50) String -> QUOTE . STRING QUOTE

    STRING          shift and go to state 71


state 48

    (48) Var -> ID .
    (46) Expr -> ID . INC
    (47) Expr -> ID . DEC

    RCPARENT        reduce using rule 48 (Var -> ID .)
    SUM             reduce using rule 48 (Var -> ID .)
    SUB             reduce using rule 48 (Var -> ID .)
    MULT            reduce using rule 48 (Var -> ID .)
    DIV             reduce using rule 48 (Var -> ID .)
    MOD             reduce using rule 48 (Var -> ID .)
    INC             shift and go to state 51
    DEC             shift and go to state 52


state 49

    (14) Decl -> INTDec ID ATRIB NUM .

    NEWLINE         reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    INTDec          reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    ID              reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    IF              reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    DO              reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    PRINT           reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)
    ENDMARKER       reduce using rule 14 (Decl -> INTDec ID ATRIB NUM .)


state 50

    (15) Decl -> INTDec ID ATRIB Input .

    NEWLINE         reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    INTDec          reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    ID              reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    IF              reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    DO              reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    PRINT           reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)
    ENDMARKER       reduce using rule 15 (Decl -> INTDec ID ATRIB Input .)


state 51

    (46) Expr -> ID INC .

    SUM             reduce using rule 46 (Expr -> ID INC .)
    SUB             reduce using rule 46 (Expr -> ID INC .)
    MULT            reduce using rule 46 (Expr -> ID INC .)
    DIV             reduce using rule 46 (Expr -> ID INC .)
    MOD             reduce using rule 46 (Expr -> ID INC .)
    NEWLINE         reduce using rule 46 (Expr -> ID INC .)
    ID              reduce using rule 46 (Expr -> ID INC .)
    IF              reduce using rule 46 (Expr -> ID INC .)
    DO              reduce using rule 46 (Expr -> ID INC .)
    PRINT           reduce using rule 46 (Expr -> ID INC .)
    ENDMARKER       reduce using rule 46 (Expr -> ID INC .)
    WHILE           reduce using rule 46 (Expr -> ID INC .)
    DEDENT          reduce using rule 46 (Expr -> ID INC .)
    ELSE            reduce using rule 46 (Expr -> ID INC .)
    GT              reduce using rule 46 (Expr -> ID INC .)
    LT              reduce using rule 46 (Expr -> ID INC .)
    GEQ             reduce using rule 46 (Expr -> ID INC .)
    LEQ             reduce using rule 46 (Expr -> ID INC .)
    EQUIV           reduce using rule 46 (Expr -> ID INC .)
    NEQ             reduce using rule 46 (Expr -> ID INC .)
    AND             reduce using rule 46 (Expr -> ID INC .)
    RCPARENT        reduce using rule 46 (Expr -> ID INC .)
    OR              reduce using rule 46 (Expr -> ID INC .)


state 52

    (47) Expr -> ID DEC .

    SUM             reduce using rule 47 (Expr -> ID DEC .)
    SUB             reduce using rule 47 (Expr -> ID DEC .)
    MULT            reduce using rule 47 (Expr -> ID DEC .)
    DIV             reduce using rule 47 (Expr -> ID DEC .)
    MOD             reduce using rule 47 (Expr -> ID DEC .)
    NEWLINE         reduce using rule 47 (Expr -> ID DEC .)
    ID              reduce using rule 47 (Expr -> ID DEC .)
    IF              reduce using rule 47 (Expr -> ID DEC .)
    DO              reduce using rule 47 (Expr -> ID DEC .)
    PRINT           reduce using rule 47 (Expr -> ID DEC .)
    ENDMARKER       reduce using rule 47 (Expr -> ID DEC .)
    WHILE           reduce using rule 47 (Expr -> ID DEC .)
    DEDENT          reduce using rule 47 (Expr -> ID DEC .)
    ELSE            reduce using rule 47 (Expr -> ID DEC .)
    GT              reduce using rule 47 (Expr -> ID DEC .)
    LT              reduce using rule 47 (Expr -> ID DEC .)
    GEQ             reduce using rule 47 (Expr -> ID DEC .)
    LEQ             reduce using rule 47 (Expr -> ID DEC .)
    EQUIV           reduce using rule 47 (Expr -> ID DEC .)
    NEQ             reduce using rule 47 (Expr -> ID DEC .)
    AND             reduce using rule 47 (Expr -> ID DEC .)
    RCPARENT        reduce using rule 47 (Expr -> ID DEC .)
    OR              reduce using rule 47 (Expr -> ID DEC .)


state 53

    (41) Expr -> Expr SUM . Expr
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NUM             shift and go to state 37
    ID              shift and go to state 33

    Expr                           shift and go to state 72
    Var                            shift and go to state 36

state 54

    (42) Expr -> Expr SUB . Expr
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NUM             shift and go to state 37
    ID              shift and go to state 33

    Expr                           shift and go to state 73
    Var                            shift and go to state 36

state 55

    (43) Expr -> Expr MULT . Expr
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NUM             shift and go to state 37
    ID              shift and go to state 33

    Expr                           shift and go to state 74
    Var                            shift and go to state 36

state 56

    (44) Expr -> Expr DIV . Expr
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NUM             shift and go to state 37
    ID              shift and go to state 33

    Expr                           shift and go to state 75
    Var                            shift and go to state 36

state 57

    (45) Expr -> Expr MOD . Expr
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NUM             shift and go to state 37
    ID              shift and go to state 33

    Expr                           shift and go to state 76
    Var                            shift and go to state 36

state 58

    (49) Input -> INPUT LCPARENT . String RCPARENT
    (50) String -> . QUOTE STRING QUOTE
    (51) String -> .

    QUOTE           shift and go to state 47
    RCPARENT        reduce using rule 51 (String -> .)

    String                         shift and go to state 77

state 59

    (20) If -> IF LCPARENT Cond RCPARENT . COLON Newline INDENT Corpo Dedent
    (21) If -> IF LCPARENT Cond RCPARENT . COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT

    COLON           shift and go to state 78


state 60

    (29) Cond -> Cond OR . Cond
    (23) Cond -> . Expr GT Expr
    (24) Cond -> . Expr LT Expr
    (25) Cond -> . Expr GEQ Expr
    (26) Cond -> . Expr LEQ Expr
    (27) Cond -> . Expr EQUIV Expr
    (28) Cond -> . Expr NEQ Expr
    (29) Cond -> . Cond OR Cond
    (30) Cond -> . Expr AND Expr
    (31) Cond -> . NOT Cond
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NOT             shift and go to state 41
    NUM             shift and go to state 37
    ID              shift and go to state 33

    Cond                           shift and go to state 79
    Expr                           shift and go to state 40
    Var                            shift and go to state 36

state 61

    (23) Cond -> Expr GT . Expr
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NUM             shift and go to state 37
    ID              shift and go to state 33

    Expr                           shift and go to state 80
    Var                            shift and go to state 36

state 62

    (24) Cond -> Expr LT . Expr
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NUM             shift and go to state 37
    ID              shift and go to state 33

    Expr                           shift and go to state 81
    Var                            shift and go to state 36

state 63

    (25) Cond -> Expr GEQ . Expr
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NUM             shift and go to state 37
    ID              shift and go to state 33

    Expr                           shift and go to state 82
    Var                            shift and go to state 36

state 64

    (26) Cond -> Expr LEQ . Expr
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NUM             shift and go to state 37
    ID              shift and go to state 33

    Expr                           shift and go to state 83
    Var                            shift and go to state 36

state 65

    (27) Cond -> Expr EQUIV . Expr
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NUM             shift and go to state 37
    ID              shift and go to state 33

    Expr                           shift and go to state 84
    Var                            shift and go to state 36

state 66

    (28) Cond -> Expr NEQ . Expr
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NUM             shift and go to state 37
    ID              shift and go to state 33

    Expr                           shift and go to state 85
    Var                            shift and go to state 36

state 67

    (30) Cond -> Expr AND . Expr
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NUM             shift and go to state 37
    ID              shift and go to state 33

    Expr                           shift and go to state 86
    Var                            shift and go to state 36

state 68

    (31) Cond -> NOT Cond .
    (29) Cond -> Cond . OR Cond

  ! shift/reduce conflict for OR resolved as shift
    RCPARENT        reduce using rule 31 (Cond -> NOT Cond .)
    OR              shift and go to state 60

  ! OR              [ reduce using rule 31 (Cond -> NOT Cond .) ]


state 69

    (22) DoWhile -> DO COLON Newline INDENT . Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (16) Proc -> . Atrib
    (17) Proc -> . Print
    (18) Proc -> . If
    (19) Proc -> . DoWhile
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (32) Atrib -> . ID ATRIB Expr
    (33) Atrib -> . ID ATRIB Input
    (34) Print -> . NonFormatted
    (20) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (21) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (22) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (35) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    WHILE           reduce using rule 7 (Newline -> .)
    DEDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 87
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 70

    (35) NonFormatted -> PRINT LCPARENT Argument RCPARENT .

    NEWLINE         reduce using rule 35 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    ID              reduce using rule 35 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    IF              reduce using rule 35 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    DO              reduce using rule 35 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    PRINT           reduce using rule 35 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    ENDMARKER       reduce using rule 35 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    WHILE           reduce using rule 35 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    DEDENT          reduce using rule 35 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)
    ELSE            reduce using rule 35 (NonFormatted -> PRINT LCPARENT Argument RCPARENT .)


state 71

    (50) String -> QUOTE STRING . QUOTE

    QUOTE           shift and go to state 88


state 72

    (41) Expr -> Expr SUM Expr .
    (41) Expr -> Expr . SUM Expr
    (42) Expr -> Expr . SUB Expr
    (43) Expr -> Expr . MULT Expr
    (44) Expr -> Expr . DIV Expr
    (45) Expr -> Expr . MOD Expr

    SUM             reduce using rule 41 (Expr -> Expr SUM Expr .)
    SUB             reduce using rule 41 (Expr -> Expr SUM Expr .)
    MOD             reduce using rule 41 (Expr -> Expr SUM Expr .)
    NEWLINE         reduce using rule 41 (Expr -> Expr SUM Expr .)
    ID              reduce using rule 41 (Expr -> Expr SUM Expr .)
    IF              reduce using rule 41 (Expr -> Expr SUM Expr .)
    DO              reduce using rule 41 (Expr -> Expr SUM Expr .)
    PRINT           reduce using rule 41 (Expr -> Expr SUM Expr .)
    ENDMARKER       reduce using rule 41 (Expr -> Expr SUM Expr .)
    WHILE           reduce using rule 41 (Expr -> Expr SUM Expr .)
    DEDENT          reduce using rule 41 (Expr -> Expr SUM Expr .)
    ELSE            reduce using rule 41 (Expr -> Expr SUM Expr .)
    GT              reduce using rule 41 (Expr -> Expr SUM Expr .)
    LT              reduce using rule 41 (Expr -> Expr SUM Expr .)
    GEQ             reduce using rule 41 (Expr -> Expr SUM Expr .)
    LEQ             reduce using rule 41 (Expr -> Expr SUM Expr .)
    EQUIV           reduce using rule 41 (Expr -> Expr SUM Expr .)
    NEQ             reduce using rule 41 (Expr -> Expr SUM Expr .)
    AND             reduce using rule 41 (Expr -> Expr SUM Expr .)
    RCPARENT        reduce using rule 41 (Expr -> Expr SUM Expr .)
    OR              reduce using rule 41 (Expr -> Expr SUM Expr .)
    MULT            shift and go to state 55
    DIV             shift and go to state 56

  ! MULT            [ reduce using rule 41 (Expr -> Expr SUM Expr .) ]
  ! DIV             [ reduce using rule 41 (Expr -> Expr SUM Expr .) ]
  ! SUM             [ shift and go to state 53 ]
  ! SUB             [ shift and go to state 54 ]
  ! MOD             [ shift and go to state 57 ]


state 73

    (42) Expr -> Expr SUB Expr .
    (41) Expr -> Expr . SUM Expr
    (42) Expr -> Expr . SUB Expr
    (43) Expr -> Expr . MULT Expr
    (44) Expr -> Expr . DIV Expr
    (45) Expr -> Expr . MOD Expr

    SUM             reduce using rule 42 (Expr -> Expr SUB Expr .)
    SUB             reduce using rule 42 (Expr -> Expr SUB Expr .)
    MOD             reduce using rule 42 (Expr -> Expr SUB Expr .)
    NEWLINE         reduce using rule 42 (Expr -> Expr SUB Expr .)
    ID              reduce using rule 42 (Expr -> Expr SUB Expr .)
    IF              reduce using rule 42 (Expr -> Expr SUB Expr .)
    DO              reduce using rule 42 (Expr -> Expr SUB Expr .)
    PRINT           reduce using rule 42 (Expr -> Expr SUB Expr .)
    ENDMARKER       reduce using rule 42 (Expr -> Expr SUB Expr .)
    WHILE           reduce using rule 42 (Expr -> Expr SUB Expr .)
    DEDENT          reduce using rule 42 (Expr -> Expr SUB Expr .)
    ELSE            reduce using rule 42 (Expr -> Expr SUB Expr .)
    GT              reduce using rule 42 (Expr -> Expr SUB Expr .)
    LT              reduce using rule 42 (Expr -> Expr SUB Expr .)
    GEQ             reduce using rule 42 (Expr -> Expr SUB Expr .)
    LEQ             reduce using rule 42 (Expr -> Expr SUB Expr .)
    EQUIV           reduce using rule 42 (Expr -> Expr SUB Expr .)
    NEQ             reduce using rule 42 (Expr -> Expr SUB Expr .)
    AND             reduce using rule 42 (Expr -> Expr SUB Expr .)
    RCPARENT        reduce using rule 42 (Expr -> Expr SUB Expr .)
    OR              reduce using rule 42 (Expr -> Expr SUB Expr .)
    MULT            shift and go to state 55
    DIV             shift and go to state 56

  ! MULT            [ reduce using rule 42 (Expr -> Expr SUB Expr .) ]
  ! DIV             [ reduce using rule 42 (Expr -> Expr SUB Expr .) ]
  ! SUM             [ shift and go to state 53 ]
  ! SUB             [ shift and go to state 54 ]
  ! MOD             [ shift and go to state 57 ]


state 74

    (43) Expr -> Expr MULT Expr .
    (41) Expr -> Expr . SUM Expr
    (42) Expr -> Expr . SUB Expr
    (43) Expr -> Expr . MULT Expr
    (44) Expr -> Expr . DIV Expr
    (45) Expr -> Expr . MOD Expr

    SUM             reduce using rule 43 (Expr -> Expr MULT Expr .)
    SUB             reduce using rule 43 (Expr -> Expr MULT Expr .)
    MULT            reduce using rule 43 (Expr -> Expr MULT Expr .)
    DIV             reduce using rule 43 (Expr -> Expr MULT Expr .)
    MOD             reduce using rule 43 (Expr -> Expr MULT Expr .)
    NEWLINE         reduce using rule 43 (Expr -> Expr MULT Expr .)
    ID              reduce using rule 43 (Expr -> Expr MULT Expr .)
    IF              reduce using rule 43 (Expr -> Expr MULT Expr .)
    DO              reduce using rule 43 (Expr -> Expr MULT Expr .)
    PRINT           reduce using rule 43 (Expr -> Expr MULT Expr .)
    ENDMARKER       reduce using rule 43 (Expr -> Expr MULT Expr .)
    WHILE           reduce using rule 43 (Expr -> Expr MULT Expr .)
    DEDENT          reduce using rule 43 (Expr -> Expr MULT Expr .)
    ELSE            reduce using rule 43 (Expr -> Expr MULT Expr .)
    GT              reduce using rule 43 (Expr -> Expr MULT Expr .)
    LT              reduce using rule 43 (Expr -> Expr MULT Expr .)
    GEQ             reduce using rule 43 (Expr -> Expr MULT Expr .)
    LEQ             reduce using rule 43 (Expr -> Expr MULT Expr .)
    EQUIV           reduce using rule 43 (Expr -> Expr MULT Expr .)
    NEQ             reduce using rule 43 (Expr -> Expr MULT Expr .)
    AND             reduce using rule 43 (Expr -> Expr MULT Expr .)
    RCPARENT        reduce using rule 43 (Expr -> Expr MULT Expr .)
    OR              reduce using rule 43 (Expr -> Expr MULT Expr .)

  ! SUM             [ shift and go to state 53 ]
  ! SUB             [ shift and go to state 54 ]
  ! MULT            [ shift and go to state 55 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 57 ]


state 75

    (44) Expr -> Expr DIV Expr .
    (41) Expr -> Expr . SUM Expr
    (42) Expr -> Expr . SUB Expr
    (43) Expr -> Expr . MULT Expr
    (44) Expr -> Expr . DIV Expr
    (45) Expr -> Expr . MOD Expr

    SUM             reduce using rule 44 (Expr -> Expr DIV Expr .)
    SUB             reduce using rule 44 (Expr -> Expr DIV Expr .)
    MULT            reduce using rule 44 (Expr -> Expr DIV Expr .)
    DIV             reduce using rule 44 (Expr -> Expr DIV Expr .)
    MOD             reduce using rule 44 (Expr -> Expr DIV Expr .)
    NEWLINE         reduce using rule 44 (Expr -> Expr DIV Expr .)
    ID              reduce using rule 44 (Expr -> Expr DIV Expr .)
    IF              reduce using rule 44 (Expr -> Expr DIV Expr .)
    DO              reduce using rule 44 (Expr -> Expr DIV Expr .)
    PRINT           reduce using rule 44 (Expr -> Expr DIV Expr .)
    ENDMARKER       reduce using rule 44 (Expr -> Expr DIV Expr .)
    WHILE           reduce using rule 44 (Expr -> Expr DIV Expr .)
    DEDENT          reduce using rule 44 (Expr -> Expr DIV Expr .)
    ELSE            reduce using rule 44 (Expr -> Expr DIV Expr .)
    GT              reduce using rule 44 (Expr -> Expr DIV Expr .)
    LT              reduce using rule 44 (Expr -> Expr DIV Expr .)
    GEQ             reduce using rule 44 (Expr -> Expr DIV Expr .)
    LEQ             reduce using rule 44 (Expr -> Expr DIV Expr .)
    EQUIV           reduce using rule 44 (Expr -> Expr DIV Expr .)
    NEQ             reduce using rule 44 (Expr -> Expr DIV Expr .)
    AND             reduce using rule 44 (Expr -> Expr DIV Expr .)
    RCPARENT        reduce using rule 44 (Expr -> Expr DIV Expr .)
    OR              reduce using rule 44 (Expr -> Expr DIV Expr .)

  ! SUM             [ shift and go to state 53 ]
  ! SUB             [ shift and go to state 54 ]
  ! MULT            [ shift and go to state 55 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 57 ]


state 76

    (45) Expr -> Expr MOD Expr .
    (41) Expr -> Expr . SUM Expr
    (42) Expr -> Expr . SUB Expr
    (43) Expr -> Expr . MULT Expr
    (44) Expr -> Expr . DIV Expr
    (45) Expr -> Expr . MOD Expr

  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    NEWLINE         reduce using rule 45 (Expr -> Expr MOD Expr .)
    ID              reduce using rule 45 (Expr -> Expr MOD Expr .)
    IF              reduce using rule 45 (Expr -> Expr MOD Expr .)
    DO              reduce using rule 45 (Expr -> Expr MOD Expr .)
    PRINT           reduce using rule 45 (Expr -> Expr MOD Expr .)
    ENDMARKER       reduce using rule 45 (Expr -> Expr MOD Expr .)
    WHILE           reduce using rule 45 (Expr -> Expr MOD Expr .)
    DEDENT          reduce using rule 45 (Expr -> Expr MOD Expr .)
    ELSE            reduce using rule 45 (Expr -> Expr MOD Expr .)
    GT              reduce using rule 45 (Expr -> Expr MOD Expr .)
    LT              reduce using rule 45 (Expr -> Expr MOD Expr .)
    GEQ             reduce using rule 45 (Expr -> Expr MOD Expr .)
    LEQ             reduce using rule 45 (Expr -> Expr MOD Expr .)
    EQUIV           reduce using rule 45 (Expr -> Expr MOD Expr .)
    NEQ             reduce using rule 45 (Expr -> Expr MOD Expr .)
    AND             reduce using rule 45 (Expr -> Expr MOD Expr .)
    RCPARENT        reduce using rule 45 (Expr -> Expr MOD Expr .)
    OR              reduce using rule 45 (Expr -> Expr MOD Expr .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MULT            shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57

  ! SUM             [ reduce using rule 45 (Expr -> Expr MOD Expr .) ]
  ! SUB             [ reduce using rule 45 (Expr -> Expr MOD Expr .) ]
  ! MULT            [ reduce using rule 45 (Expr -> Expr MOD Expr .) ]
  ! DIV             [ reduce using rule 45 (Expr -> Expr MOD Expr .) ]
  ! MOD             [ reduce using rule 45 (Expr -> Expr MOD Expr .) ]


state 77

    (49) Input -> INPUT LCPARENT String . RCPARENT

    RCPARENT        shift and go to state 89


state 78

    (20) If -> IF LCPARENT Cond RCPARENT COLON . Newline INDENT Corpo Dedent
    (21) If -> IF LCPARENT Cond RCPARENT COLON . Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (7) Newline -> .
    (8) Newline -> . NEWLINE

    INDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12

    Newline                        shift and go to state 90

state 79

    (29) Cond -> Cond OR Cond .
    (29) Cond -> Cond . OR Cond

  ! shift/reduce conflict for OR resolved as shift
    RCPARENT        reduce using rule 29 (Cond -> Cond OR Cond .)
    OR              shift and go to state 60

  ! OR              [ reduce using rule 29 (Cond -> Cond OR Cond .) ]


state 80

    (23) Cond -> Expr GT Expr .
    (41) Expr -> Expr . SUM Expr
    (42) Expr -> Expr . SUB Expr
    (43) Expr -> Expr . MULT Expr
    (44) Expr -> Expr . DIV Expr
    (45) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 23 (Cond -> Expr GT Expr .)
    OR              reduce using rule 23 (Cond -> Expr GT Expr .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MULT            shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57


state 81

    (24) Cond -> Expr LT Expr .
    (41) Expr -> Expr . SUM Expr
    (42) Expr -> Expr . SUB Expr
    (43) Expr -> Expr . MULT Expr
    (44) Expr -> Expr . DIV Expr
    (45) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 24 (Cond -> Expr LT Expr .)
    OR              reduce using rule 24 (Cond -> Expr LT Expr .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MULT            shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57


state 82

    (25) Cond -> Expr GEQ Expr .
    (41) Expr -> Expr . SUM Expr
    (42) Expr -> Expr . SUB Expr
    (43) Expr -> Expr . MULT Expr
    (44) Expr -> Expr . DIV Expr
    (45) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 25 (Cond -> Expr GEQ Expr .)
    OR              reduce using rule 25 (Cond -> Expr GEQ Expr .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MULT            shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57


state 83

    (26) Cond -> Expr LEQ Expr .
    (41) Expr -> Expr . SUM Expr
    (42) Expr -> Expr . SUB Expr
    (43) Expr -> Expr . MULT Expr
    (44) Expr -> Expr . DIV Expr
    (45) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 26 (Cond -> Expr LEQ Expr .)
    OR              reduce using rule 26 (Cond -> Expr LEQ Expr .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MULT            shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57


state 84

    (27) Cond -> Expr EQUIV Expr .
    (41) Expr -> Expr . SUM Expr
    (42) Expr -> Expr . SUB Expr
    (43) Expr -> Expr . MULT Expr
    (44) Expr -> Expr . DIV Expr
    (45) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 27 (Cond -> Expr EQUIV Expr .)
    OR              reduce using rule 27 (Cond -> Expr EQUIV Expr .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MULT            shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57


state 85

    (28) Cond -> Expr NEQ Expr .
    (41) Expr -> Expr . SUM Expr
    (42) Expr -> Expr . SUB Expr
    (43) Expr -> Expr . MULT Expr
    (44) Expr -> Expr . DIV Expr
    (45) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 28 (Cond -> Expr NEQ Expr .)
    OR              reduce using rule 28 (Cond -> Expr NEQ Expr .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MULT            shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57


state 86

    (30) Cond -> Expr AND Expr .
    (41) Expr -> Expr . SUM Expr
    (42) Expr -> Expr . SUB Expr
    (43) Expr -> Expr . MULT Expr
    (44) Expr -> Expr . DIV Expr
    (45) Expr -> Expr . MOD Expr

    RCPARENT        reduce using rule 30 (Cond -> Expr AND Expr .)
    OR              reduce using rule 30 (Cond -> Expr AND Expr .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MULT            shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57


state 87

    (22) DoWhile -> DO COLON Newline INDENT Corpo . Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (5) Corpo -> Corpo . Proc Newline
    (9) Dedent -> . Dedent DEDENT
    (10) Dedent -> .
    (16) Proc -> . Atrib
    (17) Proc -> . Print
    (18) Proc -> . If
    (19) Proc -> . DoWhile
    (32) Atrib -> . ID ATRIB Expr
    (33) Atrib -> . ID ATRIB Input
    (34) Print -> . NonFormatted
    (20) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (21) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (22) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (35) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

    WHILE           reduce using rule 10 (Dedent -> .)
    DEDENT          reduce using rule 10 (Dedent -> .)
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

    Dedent                         shift and go to state 91
    Proc                           shift and go to state 20
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 88

    (50) String -> QUOTE STRING QUOTE .

    RCPARENT        reduce using rule 50 (String -> QUOTE STRING QUOTE .)


state 89

    (49) Input -> INPUT LCPARENT String RCPARENT .

    NEWLINE         reduce using rule 49 (Input -> INPUT LCPARENT String RCPARENT .)
    ID              reduce using rule 49 (Input -> INPUT LCPARENT String RCPARENT .)
    IF              reduce using rule 49 (Input -> INPUT LCPARENT String RCPARENT .)
    DO              reduce using rule 49 (Input -> INPUT LCPARENT String RCPARENT .)
    PRINT           reduce using rule 49 (Input -> INPUT LCPARENT String RCPARENT .)
    ENDMARKER       reduce using rule 49 (Input -> INPUT LCPARENT String RCPARENT .)
    WHILE           reduce using rule 49 (Input -> INPUT LCPARENT String RCPARENT .)
    DEDENT          reduce using rule 49 (Input -> INPUT LCPARENT String RCPARENT .)
    ELSE            reduce using rule 49 (Input -> INPUT LCPARENT String RCPARENT .)
    INTDec          reduce using rule 49 (Input -> INPUT LCPARENT String RCPARENT .)


state 90

    (20) If -> IF LCPARENT Cond RCPARENT COLON Newline . INDENT Corpo Dedent
    (21) If -> IF LCPARENT Cond RCPARENT COLON Newline . INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT

    INDENT          shift and go to state 92


state 91

    (22) DoWhile -> DO COLON Newline INDENT Corpo Dedent . WHILE LCPARENT Cond RCPARENT NEWLINE
    (9) Dedent -> Dedent . DEDENT

    WHILE           shift and go to state 93
    DEDENT          shift and go to state 94


state 92

    (20) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT . Corpo Dedent
    (21) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT . Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (16) Proc -> . Atrib
    (17) Proc -> . Print
    (18) Proc -> . If
    (19) Proc -> . DoWhile
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (32) Atrib -> . ID ATRIB Expr
    (33) Atrib -> . ID ATRIB Input
    (34) Print -> . NonFormatted
    (20) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (21) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (22) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (35) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    ELSE            reduce using rule 7 (Newline -> .)
    DEDENT          reduce using rule 7 (Newline -> .)
    ENDMARKER       reduce using rule 7 (Newline -> .)
    WHILE           reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]
  ! NEWLINE         [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 95
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 93

    (22) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE . LCPARENT Cond RCPARENT NEWLINE

    LCPARENT        shift and go to state 96


state 94

    (9) Dedent -> Dedent DEDENT .

    WHILE           reduce using rule 9 (Dedent -> Dedent DEDENT .)
    DEDENT          reduce using rule 9 (Dedent -> Dedent DEDENT .)
    ELSE            reduce using rule 9 (Dedent -> Dedent DEDENT .)
    NEWLINE         reduce using rule 9 (Dedent -> Dedent DEDENT .)
    ID              reduce using rule 9 (Dedent -> Dedent DEDENT .)
    IF              reduce using rule 9 (Dedent -> Dedent DEDENT .)
    DO              reduce using rule 9 (Dedent -> Dedent DEDENT .)
    PRINT           reduce using rule 9 (Dedent -> Dedent DEDENT .)
    ENDMARKER       reduce using rule 9 (Dedent -> Dedent DEDENT .)


state 95

    (20) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo . Dedent
    (21) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo . Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (5) Corpo -> Corpo . Proc Newline
    (9) Dedent -> . Dedent DEDENT
    (10) Dedent -> .
    (16) Proc -> . Atrib
    (17) Proc -> . Print
    (18) Proc -> . If
    (19) Proc -> . DoWhile
    (32) Atrib -> . ID ATRIB Expr
    (33) Atrib -> . ID ATRIB Input
    (34) Print -> . NonFormatted
    (20) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (21) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (22) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (35) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    ELSE            reduce using rule 10 (Dedent -> .)
    DEDENT          reduce using rule 10 (Dedent -> .)
    NEWLINE         reduce using rule 10 (Dedent -> .)
    ENDMARKER       reduce using rule 10 (Dedent -> .)
    WHILE           reduce using rule 10 (Dedent -> .)
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

  ! ID              [ reduce using rule 10 (Dedent -> .) ]
  ! IF              [ reduce using rule 10 (Dedent -> .) ]
  ! DO              [ reduce using rule 10 (Dedent -> .) ]
  ! PRINT           [ reduce using rule 10 (Dedent -> .) ]

    Dedent                         shift and go to state 97
    Proc                           shift and go to state 20
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 96

    (22) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT . Cond RCPARENT NEWLINE
    (23) Cond -> . Expr GT Expr
    (24) Cond -> . Expr LT Expr
    (25) Cond -> . Expr GEQ Expr
    (26) Cond -> . Expr LEQ Expr
    (27) Cond -> . Expr EQUIV Expr
    (28) Cond -> . Expr NEQ Expr
    (29) Cond -> . Cond OR Cond
    (30) Cond -> . Expr AND Expr
    (31) Cond -> . NOT Cond
    (39) Expr -> . Var
    (40) Expr -> . NUM
    (41) Expr -> . Expr SUM Expr
    (42) Expr -> . Expr SUB Expr
    (43) Expr -> . Expr MULT Expr
    (44) Expr -> . Expr DIV Expr
    (45) Expr -> . Expr MOD Expr
    (46) Expr -> . ID INC
    (47) Expr -> . ID DEC
    (48) Var -> . ID

    NOT             shift and go to state 41
    NUM             shift and go to state 37
    ID              shift and go to state 33

    Cond                           shift and go to state 98
    Expr                           shift and go to state 40
    Var                            shift and go to state 36

state 97

    (20) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .
    (21) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent . ELSE COLON Newline INDENT Corpo DEDENT
    (9) Dedent -> Dedent . DEDENT

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for DEDENT resolved as shift
    NEWLINE         reduce using rule 20 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ID              reduce using rule 20 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    IF              reduce using rule 20 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    DO              reduce using rule 20 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    PRINT           reduce using rule 20 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ENDMARKER       reduce using rule 20 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    WHILE           reduce using rule 20 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .)
    ELSE            shift and go to state 99
    DEDENT          shift and go to state 94

  ! DEDENT          [ reduce using rule 20 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .) ]
  ! ELSE            [ reduce using rule 20 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent .) ]


state 98

    (22) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond . RCPARENT NEWLINE
    (29) Cond -> Cond . OR Cond

    RCPARENT        shift and go to state 100
    OR              shift and go to state 60


state 99

    (21) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE . COLON Newline INDENT Corpo DEDENT

    COLON           shift and go to state 101


state 100

    (22) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT . NEWLINE

    NEWLINE         shift and go to state 102


state 101

    (21) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON . Newline INDENT Corpo DEDENT
    (7) Newline -> .
    (8) Newline -> . NEWLINE

    INDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12

    Newline                        shift and go to state 103

state 102

    (22) DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .

    NEWLINE         reduce using rule 22 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    ID              reduce using rule 22 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    IF              reduce using rule 22 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    DO              reduce using rule 22 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    PRINT           reduce using rule 22 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    ENDMARKER       reduce using rule 22 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    WHILE           reduce using rule 22 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    DEDENT          reduce using rule 22 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)
    ELSE            reduce using rule 22 (DoWhile -> DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE .)


state 103

    (21) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline . INDENT Corpo DEDENT

    INDENT          shift and go to state 104


state 104

    (21) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT . Corpo DEDENT
    (4) Corpo -> . Proc Newline
    (5) Corpo -> . Corpo Proc Newline
    (6) Corpo -> . Newline
    (16) Proc -> . Atrib
    (17) Proc -> . Print
    (18) Proc -> . If
    (19) Proc -> . DoWhile
    (7) Newline -> .
    (8) Newline -> . NEWLINE
    (32) Atrib -> . ID ATRIB Expr
    (33) Atrib -> . ID ATRIB Input
    (34) Print -> . NonFormatted
    (20) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (21) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (22) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (35) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    DEDENT          reduce using rule 7 (Newline -> .)
    NEWLINE         shift and go to state 12
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

  ! ID              [ reduce using rule 7 (Newline -> .) ]
  ! IF              [ reduce using rule 7 (Newline -> .) ]
  ! DO              [ reduce using rule 7 (Newline -> .) ]
  ! PRINT           [ reduce using rule 7 (Newline -> .) ]

    Newline                        shift and go to state 6
    Corpo                          shift and go to state 105
    Proc                           shift and go to state 5
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 105

    (21) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo . DEDENT
    (5) Corpo -> Corpo . Proc Newline
    (16) Proc -> . Atrib
    (17) Proc -> . Print
    (18) Proc -> . If
    (19) Proc -> . DoWhile
    (32) Atrib -> . ID ATRIB Expr
    (33) Atrib -> . ID ATRIB Input
    (34) Print -> . NonFormatted
    (20) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent
    (21) If -> . IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT
    (22) DoWhile -> . DO COLON Newline INDENT Corpo Dedent WHILE LCPARENT Cond RCPARENT NEWLINE
    (35) NonFormatted -> . PRINT LCPARENT Argument RCPARENT

    DEDENT          shift and go to state 106
    ID              shift and go to state 14
    IF              shift and go to state 16
    DO              shift and go to state 17
    PRINT           shift and go to state 18

    Proc                           shift and go to state 20
    Atrib                          shift and go to state 8
    Print                          shift and go to state 9
    If                             shift and go to state 10
    DoWhile                        shift and go to state 11
    NonFormatted                   shift and go to state 15

state 106

    (21) If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .

    NEWLINE         reduce using rule 21 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    ID              reduce using rule 21 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    IF              reduce using rule 21 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    DO              reduce using rule 21 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    PRINT           reduce using rule 21 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    ENDMARKER       reduce using rule 21 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    WHILE           reduce using rule 21 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    DEDENT          reduce using rule 21 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)
    ELSE            reduce using rule 21 (If -> IF LCPARENT Cond RCPARENT COLON Newline INDENT Corpo Dedent ELSE COLON Newline INDENT Corpo DEDENT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for DO in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for DO in state 4 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 5 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 7 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 20 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 22 resolved as shift
WARNING: shift/reduce conflict for OR in state 68 resolved as shift
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for IF in state 69 resolved as shift
WARNING: shift/reduce conflict for DO in state 69 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 69 resolved as shift
WARNING: shift/reduce conflict for SUM in state 76 resolved as shift
WARNING: shift/reduce conflict for SUB in state 76 resolved as shift
WARNING: shift/reduce conflict for MULT in state 76 resolved as shift
WARNING: shift/reduce conflict for DIV in state 76 resolved as shift
WARNING: shift/reduce conflict for MOD in state 76 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 92 resolved as shift
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for IF in state 92 resolved as shift
WARNING: shift/reduce conflict for DO in state 92 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 92 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for IF in state 95 resolved as shift
WARNING: shift/reduce conflict for DO in state 95 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 95 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 97 resolved as shift
WARNING: shift/reduce conflict for DEDENT in state 97 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for IF in state 104 resolved as shift
WARNING: shift/reduce conflict for DO in state 104 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 104 resolved as shift
WARNING: reduce/reduce conflict in state 45 resolved using rule (Argument -> Var)
WARNING: rejected rule (Expr -> Var) in state 45
