
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "DUMP ID NUM PRINTprog : statementsstatements : statements statementstatements : statementstatement : atribstatement : printstatement : dumpatrib : ID '=' aexpprint : PRINT '(' aexp ')'dump : DUMPaexp : aexp '+' termaexp : aexp '-' termaexp : termterm : term '*' factorterm : term '/' factorterm : factorfactor : NUMfactor : IDfactor : '(' aexp ')'"
    
_lr_action_items = {'ID':([0,2,3,4,5,6,9,10,11,12,13,14,15,16,17,18,20,21,22,23,25,26,27,28,29,30,],[7,7,-3,-4,-5,-6,-9,-2,13,13,-17,-7,-12,-15,-16,13,13,13,13,13,-8,-10,-11,-13,-14,-18,]),'PRINT':([0,2,3,4,5,6,9,10,13,14,15,16,17,25,26,27,28,29,30,],[8,8,-3,-4,-5,-6,-9,-2,-17,-7,-12,-15,-16,-8,-10,-11,-13,-14,-18,]),'DUMP':([0,2,3,4,5,6,9,10,13,14,15,16,17,25,26,27,28,29,30,],[9,9,-3,-4,-5,-6,-9,-2,-17,-7,-12,-15,-16,-8,-10,-11,-13,-14,-18,]),'$end':([1,2,3,4,5,6,9,10,13,14,15,16,17,25,26,27,28,29,30,],[0,-1,-3,-4,-5,-6,-9,-2,-17,-7,-12,-15,-16,-8,-10,-11,-13,-14,-18,]),'=':([7,],[11,]),'(':([8,11,12,18,20,21,22,23,],[12,18,18,18,18,18,18,18,]),'NUM':([11,12,18,20,21,22,23,],[17,17,17,17,17,17,17,]),'*':([13,15,16,17,26,27,28,29,30,],[-17,22,-15,-16,22,22,-13,-14,-18,]),'/':([13,15,16,17,26,27,28,29,30,],[-17,23,-15,-16,23,23,-13,-14,-18,]),'+':([13,14,15,16,17,19,24,26,27,28,29,30,],[-17,20,-12,-15,-16,20,20,-10,-11,-13,-14,-18,]),'-':([13,14,15,16,17,19,24,26,27,28,29,30,],[-17,21,-12,-15,-16,21,21,-10,-11,-13,-14,-18,]),')':([13,15,16,17,19,24,26,27,28,29,30,],[-17,-12,-15,-16,25,30,-10,-11,-13,-14,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'statements':([0,],[2,]),'statement':([0,2,],[3,10,]),'atrib':([0,2,],[4,4,]),'print':([0,2,],[5,5,]),'dump':([0,2,],[6,6,]),'aexp':([11,12,18,],[14,19,24,]),'term':([11,12,18,20,21,],[15,15,15,26,27,]),'factor':([11,12,18,20,21,22,23,],[16,16,16,16,16,28,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> statements','prog',1,'p_prog','lista_compras_yacc-3.py',41),
  ('statements -> statements statement','statements',2,'p_statements_list','lista_compras_yacc-3.py',44),
  ('statements -> statement','statements',1,'p_statements_one','lista_compras_yacc-3.py',47),
  ('statement -> atrib','statement',1,'p_statement_atrib','lista_compras_yacc-3.py',50),
  ('statement -> print','statement',1,'p_statement_print','lista_compras_yacc-3.py',53),
  ('statement -> dump','statement',1,'p_statement_dump','lista_compras_yacc-3.py',56),
  ('atrib -> ID = aexp','atrib',3,'p_atrib','lista_compras_yacc-3.py',59),
  ('print -> PRINT ( aexp )','print',4,'p_print','lista_compras_yacc-3.py',64),
  ('dump -> DUMP','dump',1,'p_dump','lista_compras_yacc-3.py',68),
  ('aexp -> aexp + term','aexp',3,'p_aexp_add','lista_compras_yacc-3.py',72),
  ('aexp -> aexp - term','aexp',3,'p_aexp_sub','lista_compras_yacc-3.py',77),
  ('aexp -> term','aexp',1,'p_aexp_term','lista_compras_yacc-3.py',81),
  ('term -> term * factor','term',3,'p_term_mul','lista_compras_yacc-3.py',85),
  ('term -> term / factor','term',3,'p_term_div','lista_compras_yacc-3.py',89),
  ('term -> factor','term',1,'p_term_factor','lista_compras_yacc-3.py',93),
  ('factor -> NUM','factor',1,'p_factor_NUM','lista_compras_yacc-3.py',97),
  ('factor -> ID','factor',1,'p_factor_ID','lista_compras_yacc-3.py',101),
  ('factor -> ( aexp )','factor',3,'p_factor_aexp','lista_compras_yacc-3.py',105),
]
